// <auto-generated />
using System;
using ManboShopAPI.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ManboShopAPI.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250129234109_Fix product constrain")]
    partial class Fixproductconstrain
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AreaOrColonyOrStreetOrSectorOrVillage")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("BuildingOrCompanyOrApartment")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FlatOrHouse")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PinCode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Attributes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Attributes");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Banner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Banners");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.BannerDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BannerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BannerId");

                    b.HasIndex("ProductId");

                    b.ToTable("BannerDetails");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.CartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductVariantValueId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("ProductVariantValueId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("ParentCategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ParentCategoryId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Coupon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CurrentUsages")
                        .HasColumnType("int");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("MaxUsages")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Coupons");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.CouponCondition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Attribute")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("CouponId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DiscountAmount")
                        .HasColumnType("int");

                    b.Property<string>("Operator")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Value")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CouponId");

                    b.ToTable("CouponConditions");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Favorite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Favorites");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Star")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.News", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("News");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.NewsDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("NewsId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("NewsId");

                    b.HasIndex("ProductId");

                    b.ToTable("NewsDetails");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CouponId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CouponId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.OrderDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CouponId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductVariantValueId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CouponId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductVariantValueId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BrandId")
                        .HasColumnType("int");

                    b.Property<int>("BuyTurn")
                        .HasColumnType("int");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("OldPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("SlugName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Specification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.ProductAttributeValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AttributeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AttributeId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductAttributeValues");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.ProductImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductImages");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.ProductVariantValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("OldPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("Sku")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductVariantValues");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfilePictureUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("VerificationCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("VerificationCodeExpiryTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            Address = "58780 Luettgen Village, Yazminmouth, Syrian Arab Republic",
                            ConcurrencyStamp = "4174aff9-db29-4820-81f7-68168fd7fe45",
                            CreatedAt = new DateTime(2025, 1, 15, 23, 41, 6, 630, DateTimeKind.Utc).AddTicks(7288),
                            Email = "Macey_Mayert@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Macey",
                            LastName = "Mayert",
                            LockoutEnabled = false,
                            NormalizedEmail = "MACEY_MAYERT@HOTMAIL.COM",
                            NormalizedUserName = "MACEY_MAYERT",
                            PasswordHash = "AQAAAAIAAYagAAAAENhw/3YUWFOCfFec61QWL/e2adWF706g45wr0THUkJ1fNUnwFtNQIgJkNOGSy/V9vQ==",
                            PhoneNumber = "826-992-7638",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/562.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Macey_Mayert"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            Address = "160 Kling Lock, East Esta, Indonesia",
                            ConcurrencyStamp = "0a36978c-0154-44e2-91ff-cb5cca18ec3d",
                            CreatedAt = new DateTime(2024, 10, 2, 23, 41, 6, 632, DateTimeKind.Utc).AddTicks(1648),
                            Email = "Dasia_Wolff34@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Dasia",
                            LastName = "Wolff",
                            LockoutEnabled = false,
                            NormalizedEmail = "DASIA_WOLFF34@HOTMAIL.COM",
                            NormalizedUserName = "DASIA69",
                            PasswordHash = "AQAAAAIAAYagAAAAEMNi6p1RNU32qlU65JL/SU88wKA4NqJ+d8y99KtTQurLtBwHF848v3DE29HaaLr6nA==",
                            PhoneNumber = "798-941-0101",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/115.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Dasia69"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            Address = "17572 Jenkins Causeway, Karianneshire, Cook Islands",
                            ConcurrencyStamp = "49dabacc-e98c-48c7-91ee-a67fb20e66a6",
                            CreatedAt = new DateTime(2024, 3, 27, 23, 41, 6, 632, DateTimeKind.Utc).AddTicks(1989),
                            Email = "Emilio70@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Emilio",
                            LastName = "Skiles",
                            LockoutEnabled = false,
                            NormalizedEmail = "EMILIO70@HOTMAIL.COM",
                            NormalizedUserName = "EMILIO_SKILES",
                            PasswordHash = "AQAAAAIAAYagAAAAEKekyM1nZ7q0h7wgmplYErnXAK/c7V4pb6nJFilru0Y/eloIVmQNToIsNg7BnuUR/Q==",
                            PhoneNumber = "386-601-8101",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/346.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Emilio_Skiles"
                        },
                        new
                        {
                            Id = 4,
                            AccessFailedCount = 0,
                            Address = "150 Micah Fort, Arjunbury, Norway",
                            ConcurrencyStamp = "800c350a-3bdd-4be8-88f6-0e1272ac6662",
                            CreatedAt = new DateTime(2024, 2, 5, 23, 41, 6, 632, DateTimeKind.Utc).AddTicks(3436),
                            Email = "Wilhelmine86@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Wilhelmine",
                            LastName = "Leuschke",
                            LockoutEnabled = false,
                            NormalizedEmail = "WILHELMINE86@GMAIL.COM",
                            NormalizedUserName = "WILHELMINE_LEUSCHKE73",
                            PasswordHash = "AQAAAAIAAYagAAAAEOQIKuAkyD4zWxHBJYEYd9agMZz+tGLgylEQH2BaeVbaq4zekUA8Yt+nOrIHi9jUSw==",
                            PhoneNumber = "654-337-9415",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/211.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Wilhelmine_Leuschke73"
                        },
                        new
                        {
                            Id = 5,
                            AccessFailedCount = 0,
                            Address = "333 Gerhold Brook, West Reedberg, Senegal",
                            ConcurrencyStamp = "9a2782eb-6100-4da5-832e-85c9621c07aa",
                            CreatedAt = new DateTime(2024, 9, 18, 23, 41, 6, 632, DateTimeKind.Utc).AddTicks(3735),
                            Email = "Madeline32@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Madeline",
                            LastName = "Torp",
                            LockoutEnabled = false,
                            NormalizedEmail = "MADELINE32@GMAIL.COM",
                            NormalizedUserName = "MADELINE67",
                            PasswordHash = "AQAAAAIAAYagAAAAEBDMn7Cl+E+JOyKainPiOl4vM0e7d1CUA7Ro5HqAKrMZIMcdCpMglsScCfEUPaHTEQ==",
                            PhoneNumber = "364-651-5463",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/601.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Madeline67"
                        },
                        new
                        {
                            Id = 6,
                            AccessFailedCount = 0,
                            Address = "85807 Rutherford Highway, Lake Raquelfort, Nauru",
                            ConcurrencyStamp = "e3d3126d-3497-4f74-9c09-c6e936d751bf",
                            CreatedAt = new DateTime(2024, 9, 27, 23, 41, 6, 632, DateTimeKind.Utc).AddTicks(4017),
                            Email = "Cecelia.Pacocha@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Cecelia",
                            LastName = "Pacocha",
                            LockoutEnabled = false,
                            NormalizedEmail = "CECELIA.PACOCHA@YAHOO.COM",
                            NormalizedUserName = "CECELIA.PACOCHA90",
                            PasswordHash = "AQAAAAIAAYagAAAAEBPNnQUD9H9j0+Ctsu8NsQy1UtreXaFJAzBRtp17ncjZJFa2TjmCcfjHtTV2174PYQ==",
                            PhoneNumber = "874-846-6876",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/942.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Cecelia.Pacocha90"
                        },
                        new
                        {
                            Id = 7,
                            AccessFailedCount = 0,
                            Address = "31437 Treutel Haven, Franciscoshire, Hong Kong",
                            ConcurrencyStamp = "f2f2f70a-69e9-41c4-a809-d54f34fb1127",
                            CreatedAt = new DateTime(2024, 5, 13, 23, 41, 6, 632, DateTimeKind.Utc).AddTicks(4322),
                            Email = "Pattie74@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Pattie",
                            LastName = "Cassin",
                            LockoutEnabled = false,
                            NormalizedEmail = "PATTIE74@GMAIL.COM",
                            NormalizedUserName = "PATTIE24",
                            PasswordHash = "AQAAAAIAAYagAAAAEMVUv1CNwoCla5sw+cAWzAd9aF3DkslcXDBFgYqrsoYTTtzMEj0be8oCqRtvMuc2Ug==",
                            PhoneNumber = "099-958-6176",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/1152.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Pattie24"
                        },
                        new
                        {
                            Id = 8,
                            AccessFailedCount = 0,
                            Address = "810 Shanahan Green, Ferryville, Jersey",
                            ConcurrencyStamp = "73f072ff-23d3-4b69-8819-03c9d57f5743",
                            CreatedAt = new DateTime(2024, 9, 3, 23, 41, 6, 632, DateTimeKind.Utc).AddTicks(4543),
                            Email = "Helmer_Howe@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Helmer",
                            LastName = "Howe",
                            LockoutEnabled = false,
                            NormalizedEmail = "HELMER_HOWE@HOTMAIL.COM",
                            NormalizedUserName = "HELMER_HOWE",
                            PasswordHash = "AQAAAAIAAYagAAAAEKhiqBHwfJMGsdBy2cHZ0c0WBECXqgGHxNPqR+V+sGd27cOvfnOgR6CdUEAwKREeIA==",
                            PhoneNumber = "577-401-9922",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/1149.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Helmer_Howe"
                        },
                        new
                        {
                            Id = 9,
                            AccessFailedCount = 0,
                            Address = "3250 Kreiger Terrace, Spencerfurt, Armenia",
                            ConcurrencyStamp = "be99e968-c5e0-49ef-ade4-6baa3c0efefb",
                            CreatedAt = new DateTime(2024, 7, 29, 23, 41, 6, 632, DateTimeKind.Utc).AddTicks(4795),
                            Email = "Oceane.Schinner@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Oceane",
                            LastName = "Schinner",
                            LockoutEnabled = false,
                            NormalizedEmail = "OCEANE.SCHINNER@YAHOO.COM",
                            NormalizedUserName = "OCEANE_SCHINNER",
                            PasswordHash = "AQAAAAIAAYagAAAAEPTt9265ajFg/4OWnaHkRfuFP7lNTzlnqd8corni8E+cQThj7Ead9Q2PlrOYgsfZoA==",
                            PhoneNumber = "663-258-3019",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/93.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Oceane_Schinner"
                        },
                        new
                        {
                            Id = 10,
                            AccessFailedCount = 0,
                            Address = "121 Evan Mill, New Karsonberg, British Indian Ocean Territory (Chagos Archipelago)",
                            ConcurrencyStamp = "dc906e11-e49c-429a-ab1d-e80a4eca518a",
                            CreatedAt = new DateTime(2024, 5, 31, 23, 41, 6, 632, DateTimeKind.Utc).AddTicks(5009),
                            Email = "Sister.Orn50@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Sister",
                            LastName = "Orn",
                            LockoutEnabled = false,
                            NormalizedEmail = "SISTER.ORN50@YAHOO.COM",
                            NormalizedUserName = "SISTER_ORN58",
                            PasswordHash = "AQAAAAIAAYagAAAAEMUGYy43EfciMDRNQToPB1s9qrgdA3Wj+UJXlJpvOH56ELo4pDNW4FPQgY5ItksYNQ==",
                            PhoneNumber = "893-542-5512",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/399.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Sister_Orn58"
                        },
                        new
                        {
                            Id = 11,
                            AccessFailedCount = 0,
                            Address = "55174 Alanna Port, South Ernesto, Suriname",
                            ConcurrencyStamp = "3b481daf-ec59-4deb-9a0f-c73baae61119",
                            CreatedAt = new DateTime(2024, 4, 13, 23, 41, 6, 632, DateTimeKind.Utc).AddTicks(5214),
                            Email = "Aubree.Crist15@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Aubree",
                            LastName = "Crist",
                            LockoutEnabled = false,
                            NormalizedEmail = "AUBREE.CRIST15@YAHOO.COM",
                            NormalizedUserName = "AUBREE84",
                            PasswordHash = "AQAAAAIAAYagAAAAEOIxerp2KJoctyM7eq2iyz6muJnwHJ/jIPrpOCJCRC8SRkeVxlPoRMPjMnT59/b3mQ==",
                            PhoneNumber = "767-101-6287",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/574.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Aubree84"
                        },
                        new
                        {
                            Id = 12,
                            AccessFailedCount = 0,
                            Address = "677 Blick Trace, Cassinchester, Norway",
                            ConcurrencyStamp = "a3fba304-c3b5-431c-ba11-a40bbfb22edc",
                            CreatedAt = new DateTime(2024, 8, 6, 23, 41, 6, 632, DateTimeKind.Utc).AddTicks(5440),
                            Email = "Columbus47@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Columbus",
                            LastName = "Jacobi",
                            LockoutEnabled = false,
                            NormalizedEmail = "COLUMBUS47@GMAIL.COM",
                            NormalizedUserName = "COLUMBUS55",
                            PasswordHash = "AQAAAAIAAYagAAAAEK7p+TNq88+J3Ox3A06TF4E8h/amSEba38M0OuAkG7CZPBqIzDXJDRU2yVia/LDf4w==",
                            PhoneNumber = "732-758-8054",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/664.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Columbus55"
                        },
                        new
                        {
                            Id = 13,
                            AccessFailedCount = 0,
                            Address = "0039 Dillan Walks, East Budside, Zimbabwe",
                            ConcurrencyStamp = "72697929-17ea-45ad-a04b-728fc775c948",
                            CreatedAt = new DateTime(2024, 3, 5, 23, 41, 6, 632, DateTimeKind.Utc).AddTicks(5702),
                            Email = "Shany52@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Shany",
                            LastName = "Hettinger",
                            LockoutEnabled = false,
                            NormalizedEmail = "SHANY52@GMAIL.COM",
                            NormalizedUserName = "SHANY_HETTINGER72",
                            PasswordHash = "AQAAAAIAAYagAAAAEK5YODtZqEymFALbV/RjSalHkHZ9/I+JR4y+Zr1Gk5v2uLDfVvMpq7n9B+8l1N2JWQ==",
                            PhoneNumber = "347-914-5997",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/548.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Shany_Hettinger72"
                        },
                        new
                        {
                            Id = 14,
                            AccessFailedCount = 0,
                            Address = "91780 Cole Valley, Port Delaney, Kuwait",
                            ConcurrencyStamp = "7df17bb7-4918-4c16-87a4-afabe7d0edfb",
                            CreatedAt = new DateTime(2024, 10, 9, 23, 41, 6, 632, DateTimeKind.Utc).AddTicks(5916),
                            Email = "Ezra_Gleason@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Ezra",
                            LastName = "Gleason",
                            LockoutEnabled = false,
                            NormalizedEmail = "EZRA_GLEASON@HOTMAIL.COM",
                            NormalizedUserName = "EZRA.GLEASON27",
                            PasswordHash = "AQAAAAIAAYagAAAAEM5fR1AqeG/usUs559ouaUF61CWCOPZl70K3eJyPtmTQpr9SeHlpSc81a0G4IOLbJw==",
                            PhoneNumber = "901-373-4325",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/539.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Ezra.Gleason27"
                        },
                        new
                        {
                            Id = 15,
                            AccessFailedCount = 0,
                            Address = "452 Shea Freeway, North Aliciaview, Iraq",
                            ConcurrencyStamp = "5ba6f4f6-19b5-48ef-a760-59bd61eb5b75",
                            CreatedAt = new DateTime(2024, 12, 20, 23, 41, 6, 632, DateTimeKind.Utc).AddTicks(6185),
                            Email = "Chauncey_Runolfsdottir33@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Chauncey",
                            LastName = "Runolfsdottir",
                            LockoutEnabled = false,
                            NormalizedEmail = "CHAUNCEY_RUNOLFSDOTTIR33@YAHOO.COM",
                            NormalizedUserName = "CHAUNCEY_RUNOLFSDOTTIR",
                            PasswordHash = "AQAAAAIAAYagAAAAEL8yAxjgDvNlbDp2AUTiOY07pWVv9IEZlxZczaOHwE7k/RhSn1nbgXJLHNoY387Ylw==",
                            PhoneNumber = "527-095-7041",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/454.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Chauncey_Runolfsdottir"
                        },
                        new
                        {
                            Id = 16,
                            AccessFailedCount = 0,
                            Address = "70773 Jaiden Underpass, Kathrynechester, Libyan Arab Jamahiriya",
                            ConcurrencyStamp = "4fe39194-d431-4174-867c-80b3341b1d84",
                            CreatedAt = new DateTime(2024, 7, 22, 23, 41, 6, 632, DateTimeKind.Utc).AddTicks(6394),
                            Email = "Saige.Labadie68@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Saige",
                            LastName = "Labadie",
                            LockoutEnabled = false,
                            NormalizedEmail = "SAIGE.LABADIE68@GMAIL.COM",
                            NormalizedUserName = "SAIGE_LABADIE",
                            PasswordHash = "AQAAAAIAAYagAAAAEJSoxNJuXLiRXDKtL6acuugEq9NQS02Fx7keuGyB/kYDzGHodn8u269I7i2DsZR5SQ==",
                            PhoneNumber = "345-864-1193",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/575.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Saige_Labadie"
                        },
                        new
                        {
                            Id = 17,
                            AccessFailedCount = 0,
                            Address = "61039 Morar Square, Kohlerborough, Senegal",
                            ConcurrencyStamp = "2f2e5670-5bca-4fb4-ac04-046e8b1c7aa4",
                            CreatedAt = new DateTime(2024, 9, 8, 23, 41, 6, 632, DateTimeKind.Utc).AddTicks(6642),
                            Email = "Dereck85@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Dereck",
                            LastName = "Schroeder",
                            LockoutEnabled = false,
                            NormalizedEmail = "DERECK85@YAHOO.COM",
                            NormalizedUserName = "DERECK.SCHROEDER81",
                            PasswordHash = "AQAAAAIAAYagAAAAEP2AFO6hwLeLc8oS30TXX6GTQqZVEu4u1fny3XwCGl3FH8zLeciUAxealcj/OLHahQ==",
                            PhoneNumber = "659-413-5823",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/83.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Dereck.Schroeder81"
                        },
                        new
                        {
                            Id = 18,
                            AccessFailedCount = 0,
                            Address = "671 Hilpert Trail, West Angie, Tanzania",
                            ConcurrencyStamp = "75de1c77-6472-4f98-b286-9990beac16d0",
                            CreatedAt = new DateTime(2024, 5, 30, 23, 41, 6, 632, DateTimeKind.Utc).AddTicks(6847),
                            Email = "Dale.Rippin@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Dale",
                            LastName = "Rippin",
                            LockoutEnabled = false,
                            NormalizedEmail = "DALE.RIPPIN@HOTMAIL.COM",
                            NormalizedUserName = "DALE_RIPPIN48",
                            PasswordHash = "AQAAAAIAAYagAAAAECx28/uvjgvDE9sE8zgIZzVHFNdFirafhRnclES+9EhInWHrQt8mlG1kLuA7LAb4OA==",
                            PhoneNumber = "000-503-4993",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/122.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Dale_Rippin48"
                        },
                        new
                        {
                            Id = 19,
                            AccessFailedCount = 0,
                            Address = "10686 Oran Burg, Port Aliyah, Iraq",
                            ConcurrencyStamp = "656eeeec-9231-4b91-8d0c-4dff03be8c4c",
                            CreatedAt = new DateTime(2025, 1, 7, 23, 41, 6, 632, DateTimeKind.Utc).AddTicks(7072),
                            Email = "Breana.Heller8@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Breana",
                            LastName = "Heller",
                            LockoutEnabled = false,
                            NormalizedEmail = "BREANA.HELLER8@GMAIL.COM",
                            NormalizedUserName = "BREANA15",
                            PasswordHash = "AQAAAAIAAYagAAAAENjOPCjEj0vrVuceYmrUYQWD6JqtLEw+sfdDl/xAmmTHaSfHKh04M/zvL3Vfsjo3hw==",
                            PhoneNumber = "684-649-9781",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/1067.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Breana15"
                        },
                        new
                        {
                            Id = 20,
                            AccessFailedCount = 0,
                            Address = "1284 McKenzie Field, North Simeonstad, Moldova",
                            ConcurrencyStamp = "650a93c1-3b34-4293-8512-5e6f48242cfa",
                            CreatedAt = new DateTime(2024, 8, 30, 23, 41, 6, 632, DateTimeKind.Utc).AddTicks(7280),
                            Email = "Ramiro_Jacobi97@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Ramiro",
                            LastName = "Jacobi",
                            LockoutEnabled = false,
                            NormalizedEmail = "RAMIRO_JACOBI97@HOTMAIL.COM",
                            NormalizedUserName = "RAMIRO_JACOBI25",
                            PasswordHash = "AQAAAAIAAYagAAAAEC0KaMFPKJ4HGt7VRAFb1ztzgYv4F7hXhX8yQSOgoPNOq4LY43Vd6XywKXRNKMZzMQ==",
                            PhoneNumber = "277-108-9292",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/1246.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Ramiro_Jacobi25"
                        },
                        new
                        {
                            Id = 21,
                            AccessFailedCount = 0,
                            Address = "30696 Murazik Crossing, Meganemouth, United Arab Emirates",
                            ConcurrencyStamp = "23b286bf-ceef-472c-90bc-eba59e87871a",
                            CreatedAt = new DateTime(2024, 8, 13, 23, 41, 6, 632, DateTimeKind.Utc).AddTicks(7519),
                            Email = "Kaelyn_Brekke30@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Kaelyn",
                            LastName = "Brekke",
                            LockoutEnabled = false,
                            NormalizedEmail = "KAELYN_BREKKE30@HOTMAIL.COM",
                            NormalizedUserName = "KAELYN.BREKKE",
                            PasswordHash = "AQAAAAIAAYagAAAAEAEl5edQJffv5mLLTCfQZTPBUo0jXVf3HotVNrtJbEPWETMNiUyedHkf4pD97XEv3g==",
                            PhoneNumber = "676-053-8705",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/894.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Kaelyn.Brekke"
                        },
                        new
                        {
                            Id = 22,
                            AccessFailedCount = 0,
                            Address = "1795 Waters Port, Port Dulce, Seychelles",
                            ConcurrencyStamp = "4ab22616-7fcf-4d9c-9d1a-2d0f95da33cb",
                            CreatedAt = new DateTime(2024, 6, 26, 23, 41, 6, 632, DateTimeKind.Utc).AddTicks(7714),
                            Email = "Friedrich.Sipes@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Friedrich",
                            LastName = "Sipes",
                            LockoutEnabled = false,
                            NormalizedEmail = "FRIEDRICH.SIPES@YAHOO.COM",
                            NormalizedUserName = "FRIEDRICH18",
                            PasswordHash = "AQAAAAIAAYagAAAAEL3e4CIpj++mJWbXUXbTuT2d/ukJwOfhTdrXmxsdCIi3QKJ91v9/sj+nOCFMbdrfSA==",
                            PhoneNumber = "149-623-4100",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/113.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Friedrich18"
                        },
                        new
                        {
                            Id = 23,
                            AccessFailedCount = 0,
                            Address = "045 Herzog Rue, East Kaylieland, Georgia",
                            ConcurrencyStamp = "e8092500-ad54-41fc-bb70-0fdf5085583c",
                            CreatedAt = new DateTime(2024, 2, 26, 23, 41, 6, 632, DateTimeKind.Utc).AddTicks(7990),
                            Email = "Nathanael_Robel39@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Nathanael",
                            LastName = "Robel",
                            LockoutEnabled = false,
                            NormalizedEmail = "NATHANAEL_ROBEL39@YAHOO.COM",
                            NormalizedUserName = "NATHANAEL_ROBEL91",
                            PasswordHash = "AQAAAAIAAYagAAAAEPjBtMw0aFJ6TVHVripp3aJbJ6iy8HWHymHQGx9tHNGMa2WqLo9F2KzTBQ5Uuy3FPA==",
                            PhoneNumber = "739-815-9552",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/305.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Nathanael_Robel91"
                        },
                        new
                        {
                            Id = 24,
                            AccessFailedCount = 0,
                            Address = "7080 Vincenzo Well, Lake Sydney, Cyprus",
                            ConcurrencyStamp = "1afab850-4353-4d3e-9afb-065162cae94d",
                            CreatedAt = new DateTime(2024, 6, 23, 23, 41, 6, 632, DateTimeKind.Utc).AddTicks(8180),
                            Email = "Elias.Kulas@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Elias",
                            LastName = "Kulas",
                            LockoutEnabled = false,
                            NormalizedEmail = "ELIAS.KULAS@YAHOO.COM",
                            NormalizedUserName = "ELIAS.KULAS",
                            PasswordHash = "AQAAAAIAAYagAAAAEEnn7JnF1DE5MS7vd9SmrE7cpBcirq1xAdowHNqXK+tFMIb4WoPG8F5ppi4Jcip4Kg==",
                            PhoneNumber = "514-793-7333",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/818.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Elias.Kulas"
                        },
                        new
                        {
                            Id = 25,
                            AccessFailedCount = 0,
                            Address = "480 Elaina Hollow, Deionton, Barbados",
                            ConcurrencyStamp = "1d2c6189-ba76-40ef-bf36-b4833477c4d2",
                            CreatedAt = new DateTime(2024, 5, 20, 23, 41, 6, 632, DateTimeKind.Utc).AddTicks(8421),
                            Email = "Taylor7@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Taylor",
                            LastName = "Mayer",
                            LockoutEnabled = false,
                            NormalizedEmail = "TAYLOR7@HOTMAIL.COM",
                            NormalizedUserName = "TAYLOR32",
                            PasswordHash = "AQAAAAIAAYagAAAAEF0tyAB4uJO3ArDrtmlHI+nL+TLEkYPRaPjE3v05y70HwqUfvO9Wx86vRJFtJpNZnw==",
                            PhoneNumber = "185-587-8926",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/950.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Taylor32"
                        },
                        new
                        {
                            Id = 26,
                            AccessFailedCount = 0,
                            Address = "2795 Emmerich Fork, Wilfredborough, Falkland Islands (Malvinas)",
                            ConcurrencyStamp = "15436e16-d73a-48b9-a59a-4e2ca010faf4",
                            CreatedAt = new DateTime(2024, 10, 30, 23, 41, 6, 632, DateTimeKind.Utc).AddTicks(8660),
                            Email = "Madyson.Torphy54@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Madyson",
                            LastName = "Torphy",
                            LockoutEnabled = false,
                            NormalizedEmail = "MADYSON.TORPHY54@HOTMAIL.COM",
                            NormalizedUserName = "MADYSON_TORPHY98",
                            PasswordHash = "AQAAAAIAAYagAAAAEHht1Qx/QiTktZzEb19x9n3fS5K3r1eCY6jLb8SugqT9g4bIoPA4Fdqb+oIOvVpZgA==",
                            PhoneNumber = "240-392-6307",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/367.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Madyson_Torphy98"
                        },
                        new
                        {
                            Id = 27,
                            AccessFailedCount = 0,
                            Address = "528 Dejuan Shoals, Isacfurt, Bhutan",
                            ConcurrencyStamp = "f72576f4-86ba-4ce9-8c61-a8a4dfccfb5c",
                            CreatedAt = new DateTime(2024, 2, 20, 23, 41, 6, 632, DateTimeKind.Utc).AddTicks(8893),
                            Email = "Granville48@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Granville",
                            LastName = "Boyer",
                            LockoutEnabled = false,
                            NormalizedEmail = "GRANVILLE48@YAHOO.COM",
                            NormalizedUserName = "GRANVILLE.BOYER59",
                            PasswordHash = "AQAAAAIAAYagAAAAEBUXQFE8VJMpEWJpgPsXQ+WyS72eq8B5Zo7P6NPF+ltRwwIzKttakWQkmO+3BjY5gQ==",
                            PhoneNumber = "855-879-6518",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/161.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Granville.Boyer59"
                        },
                        new
                        {
                            Id = 28,
                            AccessFailedCount = 0,
                            Address = "0817 Bogan Fall, Lake Jennifershire, United States Minor Outlying Islands",
                            ConcurrencyStamp = "4023c08b-9a76-4cc0-aaec-a5386c847f02",
                            CreatedAt = new DateTime(2024, 9, 25, 23, 41, 6, 632, DateTimeKind.Utc).AddTicks(9107),
                            Email = "Vance_Beatty40@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Vance",
                            LastName = "Beatty",
                            LockoutEnabled = false,
                            NormalizedEmail = "VANCE_BEATTY40@GMAIL.COM",
                            NormalizedUserName = "VANCE_BEATTY",
                            PasswordHash = "AQAAAAIAAYagAAAAEO8r9YUEja8pV9Aohc2/3e8Gr6TUcFK1/vRG2wp9OdXDWlXEnVofyKmdujlaAO9Qxw==",
                            PhoneNumber = "643-774-5746",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/589.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Vance_Beatty"
                        },
                        new
                        {
                            Id = 29,
                            AccessFailedCount = 0,
                            Address = "1575 Stark Manors, Kunzeshire, Saint Barthelemy",
                            ConcurrencyStamp = "cb10f7ff-1bed-4eeb-acf8-b4d4421e7c6b",
                            CreatedAt = new DateTime(2024, 4, 3, 23, 41, 6, 632, DateTimeKind.Utc).AddTicks(9353),
                            Email = "Jerrell_Osinski61@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Jerrell",
                            LastName = "Osinski",
                            LockoutEnabled = false,
                            NormalizedEmail = "JERRELL_OSINSKI61@HOTMAIL.COM",
                            NormalizedUserName = "JERRELL.OSINSKI",
                            PasswordHash = "AQAAAAIAAYagAAAAEADwEa45q587C7Nk3l2i8L7nAxvb8Y6VUdF9i3WyqaUZcPlR7OmcodnPmB/tsU7L5A==",
                            PhoneNumber = "452-471-8882",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/511.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Jerrell.Osinski"
                        },
                        new
                        {
                            Id = 30,
                            AccessFailedCount = 0,
                            Address = "6765 Aurelie Villages, North Caylaville, Solomon Islands",
                            ConcurrencyStamp = "dc40f233-16a5-4ebb-9092-078ba317820a",
                            CreatedAt = new DateTime(2025, 1, 27, 23, 41, 6, 632, DateTimeKind.Utc).AddTicks(9548),
                            Email = "Jace_Thiel88@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Jace",
                            LastName = "Thiel",
                            LockoutEnabled = false,
                            NormalizedEmail = "JACE_THIEL88@GMAIL.COM",
                            NormalizedUserName = "JACE33",
                            PasswordHash = "AQAAAAIAAYagAAAAEFN+P5BEsXOow99UtR1d6riHLMf4GX+s+lVmikrl5D+WZ+yCN49+EBnMB5vt9G1rtA==",
                            PhoneNumber = "216-550-2017",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/626.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Jace33"
                        },
                        new
                        {
                            Id = 31,
                            AccessFailedCount = 0,
                            Address = "860 Hilpert Rue, East Adahview, Martinique",
                            ConcurrencyStamp = "76da7713-26dd-417b-a428-cd838cb7101c",
                            CreatedAt = new DateTime(2024, 9, 2, 23, 41, 6, 632, DateTimeKind.Utc).AddTicks(9780),
                            Email = "Kianna34@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Kianna",
                            LastName = "Legros",
                            LockoutEnabled = false,
                            NormalizedEmail = "KIANNA34@YAHOO.COM",
                            NormalizedUserName = "KIANNA45",
                            PasswordHash = "AQAAAAIAAYagAAAAEHyUE3nOFSfdGA5NW5WPTEcJCrIKMxwBKLkoHzJRcASjF7na5Wungih2GPBnIs6v1A==",
                            PhoneNumber = "555-508-8858",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/1101.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Kianna45"
                        },
                        new
                        {
                            Id = 32,
                            AccessFailedCount = 0,
                            Address = "410 Chaim Canyon, Port Claudineborough, El Salvador",
                            ConcurrencyStamp = "4e9b89c0-1619-4ff5-b7a1-55fecb479612",
                            CreatedAt = new DateTime(2024, 7, 18, 23, 41, 6, 632, DateTimeKind.Utc).AddTicks(9974),
                            Email = "Lorna_Towne15@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Lorna",
                            LastName = "Towne",
                            LockoutEnabled = false,
                            NormalizedEmail = "LORNA_TOWNE15@YAHOO.COM",
                            NormalizedUserName = "LORNA_TOWNE78",
                            PasswordHash = "AQAAAAIAAYagAAAAEOssRcu5FOnT5c0rBztZx0quFWMGZSbv/inOHlHej1FofQ8NOwjgDZi/p7wWWzJSYw==",
                            PhoneNumber = "004-073-9229",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/282.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Lorna_Towne78"
                        },
                        new
                        {
                            Id = 33,
                            AccessFailedCount = 0,
                            Address = "8270 Kuhn Prairie, Haagchester, Lithuania",
                            ConcurrencyStamp = "92a9c440-5c06-479d-b161-0c21d59cac74",
                            CreatedAt = new DateTime(2024, 11, 30, 23, 41, 6, 633, DateTimeKind.Utc).AddTicks(200),
                            Email = "Brenden63@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Brenden",
                            LastName = "Jones",
                            LockoutEnabled = false,
                            NormalizedEmail = "BRENDEN63@YAHOO.COM",
                            NormalizedUserName = "BRENDEN.JONES93",
                            PasswordHash = "AQAAAAIAAYagAAAAECgjRTf6x3LmdvmO/yHlBAfKuF+UOPLxVZxkIZ6SHuw3mYf1umFPzMV6K0XN80CjqQ==",
                            PhoneNumber = "175-767-3958",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/658.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Brenden.Jones93"
                        },
                        new
                        {
                            Id = 34,
                            AccessFailedCount = 0,
                            Address = "67716 Amely Extensions, Eldredville, Argentina",
                            ConcurrencyStamp = "3425e712-1e22-4498-ab8d-2449a89af9d0",
                            CreatedAt = new DateTime(2024, 8, 6, 23, 41, 6, 633, DateTimeKind.Utc).AddTicks(469),
                            Email = "Humberto.Conroy@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Humberto",
                            LastName = "Conroy",
                            LockoutEnabled = false,
                            NormalizedEmail = "HUMBERTO.CONROY@YAHOO.COM",
                            NormalizedUserName = "HUMBERTO25",
                            PasswordHash = "AQAAAAIAAYagAAAAEMYU5h/QME72mw5Wb/D4qcFantiYFxIxHXtmCmRNmdmRWOnx1Q64MvekNsAEbXanOg==",
                            PhoneNumber = "007-003-2111",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/778.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Humberto25"
                        },
                        new
                        {
                            Id = 35,
                            AccessFailedCount = 0,
                            Address = "9411 Macy Drive, Port Katheryn, Russian Federation",
                            ConcurrencyStamp = "1088d438-fd40-4276-aa6b-b1dc2eee6b2c",
                            CreatedAt = new DateTime(2024, 4, 13, 23, 41, 6, 633, DateTimeKind.Utc).AddTicks(663),
                            Email = "Vaughn_Wehner@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Vaughn",
                            LastName = "Wehner",
                            LockoutEnabled = false,
                            NormalizedEmail = "VAUGHN_WEHNER@GMAIL.COM",
                            NormalizedUserName = "VAUGHN32",
                            PasswordHash = "AQAAAAIAAYagAAAAEMnCRnj7WZCFa0Jf31CKys+HH+u157sRAYEBLcG4qSoUDrAr79fUxGPeS0bI/boNAQ==",
                            PhoneNumber = "310-680-9277",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/143.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Vaughn32"
                        },
                        new
                        {
                            Id = 36,
                            AccessFailedCount = 0,
                            Address = "4063 Morissette Keys, New Jeannetown, Belgium",
                            ConcurrencyStamp = "ded0bc9e-7877-4e94-804f-cdf5e0bdfa6b",
                            CreatedAt = new DateTime(2024, 4, 22, 23, 41, 6, 633, DateTimeKind.Utc).AddTicks(909),
                            Email = "Jeffrey_Konopelski@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Jeffrey",
                            LastName = "Konopelski",
                            LockoutEnabled = false,
                            NormalizedEmail = "JEFFREY_KONOPELSKI@GMAIL.COM",
                            NormalizedUserName = "JEFFREY_KONOPELSKI",
                            PasswordHash = "AQAAAAIAAYagAAAAEAEDWcV22oC7e7knpRa35NwtW2UVcMht3w0f14Fqydbh8IdiEEnteI7G75XnLLZYXA==",
                            PhoneNumber = "710-518-9666",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/47.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Jeffrey_Konopelski"
                        },
                        new
                        {
                            Id = 37,
                            AccessFailedCount = 0,
                            Address = "9229 Kunze Shores, North Chanelleburgh, Cyprus",
                            ConcurrencyStamp = "42f5e366-c4a2-4d52-9023-bec5b0c63377",
                            CreatedAt = new DateTime(2024, 9, 17, 23, 41, 6, 633, DateTimeKind.Utc).AddTicks(1115),
                            Email = "Turner_Stracke@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Turner",
                            LastName = "Stracke",
                            LockoutEnabled = false,
                            NormalizedEmail = "TURNER_STRACKE@YAHOO.COM",
                            NormalizedUserName = "TURNER95",
                            PasswordHash = "AQAAAAIAAYagAAAAEAOzrlkhLg44p+89FrmzTHWt/WLW62OYau2UyFbPlaOEaVWayDDZs+8rqBvcG6ZDGA==",
                            PhoneNumber = "508-724-5035",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/633.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Turner95"
                        },
                        new
                        {
                            Id = 38,
                            AccessFailedCount = 0,
                            Address = "2445 Elizabeth Summit, Reichertside, Suriname",
                            ConcurrencyStamp = "bb4141b1-7001-4c7f-b71a-e9470fe57eb6",
                            CreatedAt = new DateTime(2024, 8, 27, 23, 41, 6, 633, DateTimeKind.Utc).AddTicks(1321),
                            Email = "Deshaun71@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Deshaun",
                            LastName = "Walker",
                            LockoutEnabled = false,
                            NormalizedEmail = "DESHAUN71@YAHOO.COM",
                            NormalizedUserName = "DESHAUN41",
                            PasswordHash = "AQAAAAIAAYagAAAAEMFlCsOe4TUvLOed+nTPdX9ih2T3ErchJJMtTzQ0JrEGr6sl3oQe7kDFrhIsbLDnWA==",
                            PhoneNumber = "716-080-3258",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/345.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Deshaun41"
                        },
                        new
                        {
                            Id = 39,
                            AccessFailedCount = 0,
                            Address = "56998 Altenwerth Camp, South Marshall, Lebanon",
                            ConcurrencyStamp = "7005ff22-c920-45e7-884d-443d14561b9e",
                            CreatedAt = new DateTime(2024, 11, 20, 23, 41, 6, 633, DateTimeKind.Utc).AddTicks(1525),
                            Email = "Josefa53@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Josefa",
                            LastName = "Herzog",
                            LockoutEnabled = false,
                            NormalizedEmail = "JOSEFA53@HOTMAIL.COM",
                            NormalizedUserName = "JOSEFA.HERZOG72",
                            PasswordHash = "AQAAAAIAAYagAAAAEIAMzOEdbEwHLwyMDnl6htBTBwmpB46QCNafpQPpJYeg9UhcAlB9jxqtPjKdRXinOQ==",
                            PhoneNumber = "890-676-5015",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/1242.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Josefa.Herzog72"
                        },
                        new
                        {
                            Id = 40,
                            AccessFailedCount = 0,
                            Address = "777 Hettinger Street, South Murray, Libyan Arab Jamahiriya",
                            ConcurrencyStamp = "28449a6a-cc86-45eb-b187-3ae6ea145706",
                            CreatedAt = new DateTime(2024, 7, 4, 23, 41, 6, 633, DateTimeKind.Utc).AddTicks(1753),
                            Email = "Kaleb.MacGyver61@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Kaleb",
                            LastName = "MacGyver",
                            LockoutEnabled = false,
                            NormalizedEmail = "KALEB.MACGYVER61@GMAIL.COM",
                            NormalizedUserName = "KALEB97",
                            PasswordHash = "AQAAAAIAAYagAAAAEKu8oUExmNS7Wc8ldSLetdnMr0rYU4Tamm6QQxUR07sNPSeK6sg46ON1++EVbTSU0w==",
                            PhoneNumber = "107-118-8677",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/512.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Kaleb97"
                        });
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Variant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Variants");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.VariantValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VariantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VariantId");

                    b.ToTable("VariantValues");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Address", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.User", "User")
                        .WithMany("Addresses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.BannerDetail", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Banner", "Banner")
                        .WithMany("BannerDetails")
                        .HasForeignKey("BannerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManboShopAPI.Domain.Entities.Product", "Product")
                        .WithMany("BannerDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Banner");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Cart", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("User");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.CartItem", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Cart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManboShopAPI.Domain.Entities.ProductVariantValue", "ProductVariantValue")
                        .WithMany("CartItems")
                        .HasForeignKey("ProductVariantValueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("ProductVariantValue");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Category", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Category", "ParentCategory")
                        .WithMany("SubCategories")
                        .HasForeignKey("ParentCategoryId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.CouponCondition", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Coupon", "Coupon")
                        .WithMany("CouponConditions")
                        .HasForeignKey("CouponId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Coupon");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Favorite", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Product", "Product")
                        .WithMany("Favorites")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManboShopAPI.Domain.Entities.User", "User")
                        .WithMany("Favorites")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Feedback", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Product", "Product")
                        .WithMany("Feedbacks")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManboShopAPI.Domain.Entities.User", "User")
                        .WithMany("Feedbacks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.NewsDetail", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.News", "News")
                        .WithMany("NewsDetails")
                        .HasForeignKey("NewsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManboShopAPI.Domain.Entities.Product", "Product")
                        .WithMany("NewsDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("News");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Order", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Coupon", null)
                        .WithMany("Orders")
                        .HasForeignKey("CouponId");

                    b.HasOne("ManboShopAPI.Domain.Entities.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("User");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.OrderDetail", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Coupon", null)
                        .WithMany("OrderDetails")
                        .HasForeignKey("CouponId");

                    b.HasOne("ManboShopAPI.Domain.Entities.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManboShopAPI.Domain.Entities.ProductVariantValue", "ProductVariantValue")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductVariantValueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("ProductVariantValue");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Product", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ManboShopAPI.Domain.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Brand");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.ProductAttributeValue", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Attributes", "Attribute")
                        .WithMany("ProductAttributeValues")
                        .HasForeignKey("AttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManboShopAPI.Domain.Entities.Product", "Product")
                        .WithMany("ProductAttributeValues")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attribute");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.ProductImage", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Product", "Product")
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.ProductVariantValue", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Product", "Product")
                        .WithMany("ProductVariantValues")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.VariantValue", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Variant", "Variant")
                        .WithMany("VariantValues")
                        .HasForeignKey("VariantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Variant");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManboShopAPI.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Attributes", b =>
                {
                    b.Navigation("ProductAttributeValues");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Banner", b =>
                {
                    b.Navigation("BannerDetails");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Brand", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Cart", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Category", b =>
                {
                    b.Navigation("Products");

                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Coupon", b =>
                {
                    b.Navigation("CouponConditions");

                    b.Navigation("OrderDetails");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.News", b =>
                {
                    b.Navigation("NewsDetails");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Product", b =>
                {
                    b.Navigation("BannerDetails");

                    b.Navigation("Favorites");

                    b.Navigation("Feedbacks");

                    b.Navigation("NewsDetails");

                    b.Navigation("ProductAttributeValues");

                    b.Navigation("ProductImages");

                    b.Navigation("ProductVariantValues");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.ProductVariantValue", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.User", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Favorites");

                    b.Navigation("Feedbacks");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Variant", b =>
                {
                    b.Navigation("VariantValues");
                });
#pragma warning restore 612, 618
        }
    }
}
