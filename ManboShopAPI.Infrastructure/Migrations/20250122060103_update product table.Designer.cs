// <auto-generated />
using System;
using ManboShopAPI.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ManboShopAPI.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250122060103_update product table")]
    partial class updateproducttable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AreaOrColonyOrStreetOrSectorOrVillage")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("BuildingOrCompanyOrApartment")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FlatOrHouse")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PinCode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Attributes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Attributes");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Banner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Banners");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.BannerDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BannerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BannerId");

                    b.HasIndex("ProductId");

                    b.ToTable("BannerDetails");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.CartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("ProductId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("ParentCategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ParentCategoryId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Coupon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CurrentUsages")
                        .HasColumnType("int");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("MaxUsages")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Coupons");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.CouponCondition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Attribute")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("CouponId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DiscountAmount")
                        .HasColumnType("int");

                    b.Property<string>("Operator")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Value")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CouponId");

                    b.ToTable("CouponConditions");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Favorite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Favorites");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Star")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.News", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("News");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.NewsDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("NewsId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("NewsId");

                    b.HasIndex("ProductId");

                    b.ToTable("NewsDetails");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CouponId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("SessionId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CouponId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.OrderDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CouponId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CouponId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BrandId")
                        .HasColumnType("int");

                    b.Property<int>("BuyTurn")
                        .HasColumnType("int");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("OldPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("SlugName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Specification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.ProductAttributeValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AttributeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AttributeId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductAttributeValues");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.ProductImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductImages");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.ProductVariantValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("OldPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("Sku")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductVariantValues");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfilePictureUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("VerificationCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("VerificationCodeExpiryTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            Address = "6685 Kiehn Track, Gennaroside, Switzerland",
                            ConcurrencyStamp = "96989079-2580-4793-9c26-536ef1dd7731",
                            CreatedAt = new DateTime(2024, 5, 27, 6, 1, 0, 30, DateTimeKind.Utc).AddTicks(1900),
                            Email = "Rodrigo_Bergstrom11@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Rodrigo",
                            LastName = "Bergstrom",
                            LockoutEnabled = false,
                            NormalizedEmail = "RODRIGO_BERGSTROM11@GMAIL.COM",
                            NormalizedUserName = "RODRIGO36",
                            PasswordHash = "AQAAAAIAAYagAAAAEDFmmNk7vOvoB+6w7kD+G892i8VThfMs7IvfAZ2WzS9sar3hYMQQRcHWJIDd4NdIUw==",
                            PhoneNumber = "404-985-0063",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/1195.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Rodrigo36"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            Address = "22924 Parker Track, West Alenefurt, Gambia",
                            ConcurrencyStamp = "f43ac615-1e01-4cc7-88b8-aaa384cd18c0",
                            CreatedAt = new DateTime(2024, 3, 6, 6, 1, 0, 32, DateTimeKind.Utc).AddTicks(841),
                            Email = "Quinten.McKenzie14@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Quinten",
                            LastName = "McKenzie",
                            LockoutEnabled = false,
                            NormalizedEmail = "QUINTEN.MCKENZIE14@HOTMAIL.COM",
                            NormalizedUserName = "QUINTEN.MCKENZIE22",
                            PasswordHash = "AQAAAAIAAYagAAAAEMoXz1tb+bG/RxFIwfrPnu2tQYEDnSZlB4l3BMKSy48zHRuzjkXsHM4sn3HzFDG6Dw==",
                            PhoneNumber = "723-428-9810",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/551.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Quinten.McKenzie22"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            Address = "8060 Selmer Shoal, Lake Destin, Tokelau",
                            ConcurrencyStamp = "5823d6ab-5cef-4c59-baec-0f13d6ef6469",
                            CreatedAt = new DateTime(2024, 8, 3, 6, 1, 0, 32, DateTimeKind.Utc).AddTicks(1538),
                            Email = "Trent_Pfannerstill39@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Trent",
                            LastName = "Pfannerstill",
                            LockoutEnabled = false,
                            NormalizedEmail = "TRENT_PFANNERSTILL39@HOTMAIL.COM",
                            NormalizedUserName = "TRENT_PFANNERSTILL",
                            PasswordHash = "AQAAAAIAAYagAAAAEKMlMrmKnEK1sN0PTf8e/aiEKp0zDsJsa/la4eutKkHpBNlJyH7ONU33GMi+U17M4Q==",
                            PhoneNumber = "432-001-9323",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/1245.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Trent_Pfannerstill"
                        },
                        new
                        {
                            Id = 4,
                            AccessFailedCount = 0,
                            Address = "954 Mueller Corner, Port Beulah, Somalia",
                            ConcurrencyStamp = "50a08e5e-58b2-4c85-87ea-0c9bb96f182a",
                            CreatedAt = new DateTime(2025, 1, 7, 6, 1, 0, 32, DateTimeKind.Utc).AddTicks(1970),
                            Email = "Patricia35@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Patricia",
                            LastName = "Watsica",
                            LockoutEnabled = false,
                            NormalizedEmail = "PATRICIA35@HOTMAIL.COM",
                            NormalizedUserName = "PATRICIA_WATSICA",
                            PasswordHash = "AQAAAAIAAYagAAAAECi96GiKyedOZpGSZ3UmPpsQXVRfXS3rJq0DIyaJCCCdrkt5azUSPD31uMYMGgwKBQ==",
                            PhoneNumber = "918-789-8432",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/963.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Patricia_Watsica"
                        },
                        new
                        {
                            Id = 5,
                            AccessFailedCount = 0,
                            Address = "673 Jared Views, Isabellaville, Egypt",
                            ConcurrencyStamp = "20fd8321-3074-4443-9415-c436796e130a",
                            CreatedAt = new DateTime(2024, 9, 11, 6, 1, 0, 32, DateTimeKind.Utc).AddTicks(2385),
                            Email = "Rachelle91@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Rachelle",
                            LastName = "Brekke",
                            LockoutEnabled = false,
                            NormalizedEmail = "RACHELLE91@GMAIL.COM",
                            NormalizedUserName = "RACHELLE.BREKKE",
                            PasswordHash = "AQAAAAIAAYagAAAAEAIYFmvgeCUJ/HmYCHXB8OHVkr6bgGD/Y6zBOEirN/BQayEyRv+aOIxJMqTWGnbSQg==",
                            PhoneNumber = "008-194-9229",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/865.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Rachelle.Brekke"
                        },
                        new
                        {
                            Id = 6,
                            AccessFailedCount = 0,
                            Address = "66356 Deckow Lock, Olsonchester, Martinique",
                            ConcurrencyStamp = "6a601123-575d-4952-ae44-c711343c324d",
                            CreatedAt = new DateTime(2024, 9, 4, 6, 1, 0, 32, DateTimeKind.Utc).AddTicks(2776),
                            Email = "Herbert69@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Herbert",
                            LastName = "Schinner",
                            LockoutEnabled = false,
                            NormalizedEmail = "HERBERT69@YAHOO.COM",
                            NormalizedUserName = "HERBERT_SCHINNER85",
                            PasswordHash = "AQAAAAIAAYagAAAAEDqAI4IrPAxmxk3LzQATB0/TDGt8keoodScY85XZdzijcR9pWENLbaDozZagiD+UsQ==",
                            PhoneNumber = "742-283-0856",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/397.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Herbert_Schinner85"
                        },
                        new
                        {
                            Id = 7,
                            AccessFailedCount = 0,
                            Address = "816 Wisozk Lakes, New Enos, Martinique",
                            ConcurrencyStamp = "2e12396b-aa0d-4eb9-a60e-41ec17b3839a",
                            CreatedAt = new DateTime(2024, 3, 30, 6, 1, 0, 32, DateTimeKind.Utc).AddTicks(3164),
                            Email = "Isidro60@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Isidro",
                            LastName = "Koss",
                            LockoutEnabled = false,
                            NormalizedEmail = "ISIDRO60@HOTMAIL.COM",
                            NormalizedUserName = "ISIDRO.KOSS",
                            PasswordHash = "AQAAAAIAAYagAAAAELmpcX7AnNP4PsGnS+2Y2Iz2S9LW9NFIstzWZJTlo1NoXkESqVnQi+niv0pbAR5ZCg==",
                            PhoneNumber = "974-980-7925",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/1033.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Isidro.Koss"
                        },
                        new
                        {
                            Id = 8,
                            AccessFailedCount = 0,
                            Address = "9402 MacGyver Valley, East Martine, French Guiana",
                            ConcurrencyStamp = "ba12706c-66f0-43d4-8102-12e81d3b1d42",
                            CreatedAt = new DateTime(2024, 2, 26, 6, 1, 0, 32, DateTimeKind.Utc).AddTicks(3488),
                            Email = "Ines_Legros@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Ines",
                            LastName = "Legros",
                            LockoutEnabled = false,
                            NormalizedEmail = "INES_LEGROS@YAHOO.COM",
                            NormalizedUserName = "INES.LEGROS18",
                            PasswordHash = "AQAAAAIAAYagAAAAEF3t0ku0naNgxR/Vv1j+T190BG+Ht2eLN2HzX3wNGeL8bKoyyHBy68D9DMKEnRhmOA==",
                            PhoneNumber = "250-020-5360",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/724.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Ines.Legros18"
                        },
                        new
                        {
                            Id = 9,
                            AccessFailedCount = 0,
                            Address = "7631 Schneider Burgs, New Frankiemouth, Nepal",
                            ConcurrencyStamp = "a2f50250-37d6-4f19-adb7-4733cf179bee",
                            CreatedAt = new DateTime(2024, 6, 13, 6, 1, 0, 32, DateTimeKind.Utc).AddTicks(3893),
                            Email = "Samara.Waelchi95@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Samara",
                            LastName = "Waelchi",
                            LockoutEnabled = false,
                            NormalizedEmail = "SAMARA.WAELCHI95@YAHOO.COM",
                            NormalizedUserName = "SAMARA79",
                            PasswordHash = "AQAAAAIAAYagAAAAEHetUP8qjxtdxCbxQvf+8lLX274y/kRFFEcIv7TLBLDnjFLyYEhCVxF9VntQbbIXLQ==",
                            PhoneNumber = "747-871-3902",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/348.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Samara79"
                        },
                        new
                        {
                            Id = 10,
                            AccessFailedCount = 0,
                            Address = "239 Yazmin Creek, Aurelieside, Reunion",
                            ConcurrencyStamp = "3f8e3c13-49ab-4720-964d-a356cb9344a9",
                            CreatedAt = new DateTime(2024, 5, 10, 6, 1, 0, 32, DateTimeKind.Utc).AddTicks(4312),
                            Email = "Rocky_MacGyver49@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Rocky",
                            LastName = "MacGyver",
                            LockoutEnabled = false,
                            NormalizedEmail = "ROCKY_MACGYVER49@YAHOO.COM",
                            NormalizedUserName = "ROCKY57",
                            PasswordHash = "AQAAAAIAAYagAAAAEJDa8psKu+juNJTQveSllvJlSd//MTUhFNSAJgjm7Sal68lSmGyaLOV5oeK82Va2VA==",
                            PhoneNumber = "550-177-0300",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/521.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Rocky57"
                        },
                        new
                        {
                            Id = 11,
                            AccessFailedCount = 0,
                            Address = "969 Leonora Drive, East Thalia, Bouvet Island (Bouvetoya)",
                            ConcurrencyStamp = "e660bf6b-144d-4536-b0e3-2505ec9e728f",
                            CreatedAt = new DateTime(2024, 9, 3, 6, 1, 0, 32, DateTimeKind.Utc).AddTicks(4700),
                            Email = "Douglas70@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Douglas",
                            LastName = "Miller",
                            LockoutEnabled = false,
                            NormalizedEmail = "DOUGLAS70@GMAIL.COM",
                            NormalizedUserName = "DOUGLAS.MILLER28",
                            PasswordHash = "AQAAAAIAAYagAAAAEC6GoMfxUfkfmfuRQyxdgRpVoIn5ylATiOXr48d3nV4xFZuBiBoRkhBkUGTw842RCA==",
                            PhoneNumber = "961-370-7564",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/612.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Douglas.Miller28"
                        },
                        new
                        {
                            Id = 12,
                            AccessFailedCount = 0,
                            Address = "12962 Tatyana Path, Gorczanyport, Iraq",
                            ConcurrencyStamp = "efc02d55-f57d-47bb-a7e0-e0ec2b1d234f",
                            CreatedAt = new DateTime(2024, 5, 20, 6, 1, 0, 32, DateTimeKind.Utc).AddTicks(5033),
                            Email = "Dorian.Swift38@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Dorian",
                            LastName = "Swift",
                            LockoutEnabled = false,
                            NormalizedEmail = "DORIAN.SWIFT38@GMAIL.COM",
                            NormalizedUserName = "DORIAN44",
                            PasswordHash = "AQAAAAIAAYagAAAAEFbUy1BK9xT14+awMq9uK8fmX5df8QPsG3UNuK7PZneQg3V6kbgD9vBXUOCnGgEauw==",
                            PhoneNumber = "285-346-5266",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/353.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Dorian44"
                        },
                        new
                        {
                            Id = 13,
                            AccessFailedCount = 0,
                            Address = "191 Rosalind Roads, Marcoshaven, Niue",
                            ConcurrencyStamp = "8120891f-c760-48f6-815c-d8ee67d80cbd",
                            CreatedAt = new DateTime(2024, 7, 3, 6, 1, 0, 32, DateTimeKind.Utc).AddTicks(5397),
                            Email = "Daryl.Murray75@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Daryl",
                            LastName = "Murray",
                            LockoutEnabled = false,
                            NormalizedEmail = "DARYL.MURRAY75@YAHOO.COM",
                            NormalizedUserName = "DARYL_MURRAY92",
                            PasswordHash = "AQAAAAIAAYagAAAAEDQGERFdgDA4JiwZg5ZyuetMKPMZnL7Ep7XkpWEU3A4PcLiSknDik04GcuUyJNAzHQ==",
                            PhoneNumber = "254-624-4957",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/751.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Daryl_Murray92"
                        },
                        new
                        {
                            Id = 14,
                            AccessFailedCount = 0,
                            Address = "57484 Tre Coves, South Archibaldtown, Sweden",
                            ConcurrencyStamp = "80a29243-e0b5-4344-9fe1-06b8ede6b06e",
                            CreatedAt = new DateTime(2024, 2, 14, 6, 1, 0, 32, DateTimeKind.Utc).AddTicks(5732),
                            Email = "Blanca_Rau54@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Blanca",
                            LastName = "Rau",
                            LockoutEnabled = false,
                            NormalizedEmail = "BLANCA_RAU54@GMAIL.COM",
                            NormalizedUserName = "BLANCA50",
                            PasswordHash = "AQAAAAIAAYagAAAAECY2FTtHPpcggvJZpyUooByJGIom5wpTT+UPSKQCXYL3tPPy6V1gDuewcxC6Ce3nMw==",
                            PhoneNumber = "527-463-2941",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/354.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Blanca50"
                        },
                        new
                        {
                            Id = 15,
                            AccessFailedCount = 0,
                            Address = "4578 Gaylord Corner, Kington, Wallis and Futuna",
                            ConcurrencyStamp = "f08addb4-ee86-4995-920b-5fce9db75725",
                            CreatedAt = new DateTime(2024, 6, 3, 6, 1, 0, 32, DateTimeKind.Utc).AddTicks(6201),
                            Email = "Michale8@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Michale",
                            LastName = "Ziemann",
                            LockoutEnabled = false,
                            NormalizedEmail = "MICHALE8@GMAIL.COM",
                            NormalizedUserName = "MICHALE.ZIEMANN31",
                            PasswordHash = "AQAAAAIAAYagAAAAEMF+flXo4vsagzulhLi2For4CxTHDUpM4G7neSL0ipafduckAN9pP4KlUVmIRcD6uA==",
                            PhoneNumber = "607-015-6329",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/94.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Michale.Ziemann31"
                        },
                        new
                        {
                            Id = 16,
                            AccessFailedCount = 0,
                            Address = "20692 Glennie Garden, Kayceechester, Spain",
                            ConcurrencyStamp = "bd83067e-acfb-4b46-9c94-eff774e33f6d",
                            CreatedAt = new DateTime(2024, 12, 18, 6, 1, 0, 32, DateTimeKind.Utc).AddTicks(6551),
                            Email = "Rosalia_Kunde49@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Rosalia",
                            LastName = "Kunde",
                            LockoutEnabled = false,
                            NormalizedEmail = "ROSALIA_KUNDE49@YAHOO.COM",
                            NormalizedUserName = "ROSALIA.KUNDE",
                            PasswordHash = "AQAAAAIAAYagAAAAEB0zdwJVX/WRRBUtE/WcndiIK4F9tgVIHNH5AaopGGXWFRPxIMGT0vOW7pYdFEqz+w==",
                            PhoneNumber = "443-934-7288",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/941.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Rosalia.Kunde"
                        },
                        new
                        {
                            Id = 17,
                            AccessFailedCount = 0,
                            Address = "7813 Alysa Expressway, North Jimmyburgh, Malta",
                            ConcurrencyStamp = "0e4b18b8-99c4-467c-9828-d6d97cfd3551",
                            CreatedAt = new DateTime(2024, 11, 1, 6, 1, 0, 32, DateTimeKind.Utc).AddTicks(6964),
                            Email = "Stephany.Wiegand@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Stephany",
                            LastName = "Wiegand",
                            LockoutEnabled = false,
                            NormalizedEmail = "STEPHANY.WIEGAND@YAHOO.COM",
                            NormalizedUserName = "STEPHANY.WIEGAND",
                            PasswordHash = "AQAAAAIAAYagAAAAEDsBYZHUOb5QFfz8a5Z9elyvPOcfJsFZ7BbsrRSmyunRpVTWb0Bn8KBWQ3JlE6asRQ==",
                            PhoneNumber = "502-371-4070",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/1018.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Stephany.Wiegand"
                        },
                        new
                        {
                            Id = 18,
                            AccessFailedCount = 0,
                            Address = "2548 King Rapids, Huelsville, Mozambique",
                            ConcurrencyStamp = "eb75d5d2-9917-49b5-a969-cd392810c074",
                            CreatedAt = new DateTime(2024, 4, 9, 6, 1, 0, 32, DateTimeKind.Utc).AddTicks(7284),
                            Email = "Toni55@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Toni",
                            LastName = "Stiedemann",
                            LockoutEnabled = false,
                            NormalizedEmail = "TONI55@HOTMAIL.COM",
                            NormalizedUserName = "TONI.STIEDEMANN",
                            PasswordHash = "AQAAAAIAAYagAAAAEJ5gyfQMMnkr8U1EIvfzm1GT5QjQgZXTgnTwJa+b0rHBJxOFOOEgKWw93QQeFbrLMA==",
                            PhoneNumber = "411-456-4440",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/420.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Toni.Stiedemann"
                        },
                        new
                        {
                            Id = 19,
                            AccessFailedCount = 0,
                            Address = "142 Howell Crescent, North Jamal, Hong Kong",
                            ConcurrencyStamp = "3c0973da-e4d4-483c-b9e8-63f01636dbac",
                            CreatedAt = new DateTime(2024, 9, 23, 6, 1, 0, 32, DateTimeKind.Utc).AddTicks(7615),
                            Email = "Colton_Kulas@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Colton",
                            LastName = "Kulas",
                            LockoutEnabled = false,
                            NormalizedEmail = "COLTON_KULAS@YAHOO.COM",
                            NormalizedUserName = "COLTON96",
                            PasswordHash = "AQAAAAIAAYagAAAAEHuaSWVHxinChELXxVDFMyo+s9FImnP/wxQmU3hZIPxb/OxL/6OusUEjOquvA1CHag==",
                            PhoneNumber = "449-982-3995",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/1083.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Colton96"
                        },
                        new
                        {
                            Id = 20,
                            AccessFailedCount = 0,
                            Address = "134 Stracke Drive, Klockoton, France",
                            ConcurrencyStamp = "b304b037-7542-4953-9688-c7287b877afd",
                            CreatedAt = new DateTime(2024, 6, 19, 6, 1, 0, 32, DateTimeKind.Utc).AddTicks(7940),
                            Email = "Constance96@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Constance",
                            LastName = "Purdy",
                            LockoutEnabled = false,
                            NormalizedEmail = "CONSTANCE96@GMAIL.COM",
                            NormalizedUserName = "CONSTANCE94",
                            PasswordHash = "AQAAAAIAAYagAAAAED/QIh/AnYYhUqq1kEsX/BqO5jvqkWGXeGH+f6b3V1WrRPFAO5aeCOZx5ZexeEG6Fg==",
                            PhoneNumber = "760-386-1437",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/290.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Constance94"
                        },
                        new
                        {
                            Id = 21,
                            AccessFailedCount = 0,
                            Address = "8000 Georgiana Loop, McDermottville, Czech Republic",
                            ConcurrencyStamp = "c34ed141-fa9a-45a4-8f14-227c34575c6a",
                            CreatedAt = new DateTime(2024, 11, 15, 6, 1, 0, 32, DateTimeKind.Utc).AddTicks(8305),
                            Email = "Loyce.Rogahn70@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Loyce",
                            LastName = "Rogahn",
                            LockoutEnabled = false,
                            NormalizedEmail = "LOYCE.ROGAHN70@GMAIL.COM",
                            NormalizedUserName = "LOYCE.ROGAHN74",
                            PasswordHash = "AQAAAAIAAYagAAAAEEU5VUlzVUxbne46Qnqn8aBdQN6w837AjXMBTRSt01p3e5VaB0CeNirQeUYpONlPrg==",
                            PhoneNumber = "339-161-6379",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/1242.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Loyce.Rogahn74"
                        },
                        new
                        {
                            Id = 22,
                            AccessFailedCount = 0,
                            Address = "1619 Koss Skyway, New Lelandchester, Canada",
                            ConcurrencyStamp = "97e4950b-573c-4f95-80f0-f8ef0e336f49",
                            CreatedAt = new DateTime(2024, 11, 14, 6, 1, 0, 32, DateTimeKind.Utc).AddTicks(8697),
                            Email = "Alexandre88@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Alexandre",
                            LastName = "Collier",
                            LockoutEnabled = false,
                            NormalizedEmail = "ALEXANDRE88@YAHOO.COM",
                            NormalizedUserName = "ALEXANDRE_COLLIER",
                            PasswordHash = "AQAAAAIAAYagAAAAEBOHuO8aaRQHbpToE3DuQf/ZeuDW8iEacLmR0k6iJULrgaqwHwTmiRrW5A+9rryf1A==",
                            PhoneNumber = "545-359-6700",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/872.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Alexandre_Collier"
                        },
                        new
                        {
                            Id = 23,
                            AccessFailedCount = 0,
                            Address = "7055 Cole Island, North Ernaville, Peru",
                            ConcurrencyStamp = "74b59a95-42ce-4ee5-a614-88357788ee4c",
                            CreatedAt = new DateTime(2024, 8, 25, 6, 1, 0, 32, DateTimeKind.Utc).AddTicks(9028),
                            Email = "Sally51@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Sally",
                            LastName = "Bradtke",
                            LockoutEnabled = false,
                            NormalizedEmail = "SALLY51@YAHOO.COM",
                            NormalizedUserName = "SALLY59",
                            PasswordHash = "AQAAAAIAAYagAAAAEFZZxlNw34akZMGoN0kcMvGLGofIDs4FNbW0+juba6XnFkxgmFF7fQCHOWZa5zkMRg==",
                            PhoneNumber = "254-175-4752",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/1104.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Sally59"
                        },
                        new
                        {
                            Id = 24,
                            AccessFailedCount = 0,
                            Address = "88690 Jackeline Streets, East Deliaberg, Paraguay",
                            ConcurrencyStamp = "e88c68ec-5d80-4817-9d2e-f99617f148de",
                            CreatedAt = new DateTime(2024, 2, 24, 6, 1, 0, 32, DateTimeKind.Utc).AddTicks(9403),
                            Email = "Cleveland22@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Cleveland",
                            LastName = "Powlowski",
                            LockoutEnabled = false,
                            NormalizedEmail = "CLEVELAND22@GMAIL.COM",
                            NormalizedUserName = "CLEVELAND.POWLOWSKI79",
                            PasswordHash = "AQAAAAIAAYagAAAAEHUlT9qWYRU/qzUrUXIKYDkEbfAFjyOgN1OGnOsP0Dms0QsbrRsCrLHG5KyZnAW0cg==",
                            PhoneNumber = "110-609-8157",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/980.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Cleveland.Powlowski79"
                        },
                        new
                        {
                            Id = 25,
                            AccessFailedCount = 0,
                            Address = "29973 Krystel Ridges, Port Ella, Mongolia",
                            ConcurrencyStamp = "96a87260-fa01-493f-988e-56bfa9b317e1",
                            CreatedAt = new DateTime(2025, 1, 6, 6, 1, 0, 32, DateTimeKind.Utc).AddTicks(9744),
                            Email = "Antonia_Weimann@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Antonia",
                            LastName = "Weimann",
                            LockoutEnabled = false,
                            NormalizedEmail = "ANTONIA_WEIMANN@GMAIL.COM",
                            NormalizedUserName = "ANTONIA94",
                            PasswordHash = "AQAAAAIAAYagAAAAEOvzvHjQ8GXp6RvimcjZc3XZguwsn4slROurOoNh2UwYSyWEJJi/HClXxi2IrLA//Q==",
                            PhoneNumber = "074-197-5220",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/289.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Antonia94"
                        },
                        new
                        {
                            Id = 26,
                            AccessFailedCount = 0,
                            Address = "2713 Pfannerstill Landing, New Cornell, Colombia",
                            ConcurrencyStamp = "f7a27a6e-100b-4a64-ab16-4ef1ecc4c0ba",
                            CreatedAt = new DateTime(2024, 8, 14, 6, 1, 0, 33, DateTimeKind.Utc).AddTicks(158),
                            Email = "Nakia70@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Nakia",
                            LastName = "Kihn",
                            LockoutEnabled = false,
                            NormalizedEmail = "NAKIA70@HOTMAIL.COM",
                            NormalizedUserName = "NAKIA83",
                            PasswordHash = "AQAAAAIAAYagAAAAEI8ikOJFaoHjRFfp642ZQprtSVUJEvJH1U82lTfzk2Bvh93SSUrsT2skDacXumXKgQ==",
                            PhoneNumber = "921-796-6278",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/771.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Nakia83"
                        },
                        new
                        {
                            Id = 27,
                            AccessFailedCount = 0,
                            Address = "833 Langosh Corner, South Cora, Myanmar",
                            ConcurrencyStamp = "d964cc6e-6acd-4115-92a1-b06e1bf0e74f",
                            CreatedAt = new DateTime(2024, 5, 21, 6, 1, 0, 33, DateTimeKind.Utc).AddTicks(470),
                            Email = "Fay_Jast@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Fay",
                            LastName = "Jast",
                            LockoutEnabled = false,
                            NormalizedEmail = "FAY_JAST@YAHOO.COM",
                            NormalizedUserName = "FAY.JAST75",
                            PasswordHash = "AQAAAAIAAYagAAAAEDnYUp27BHe2X5pl+k2ZwPIfnxMrkQKpkB2cj2nl5yblo9UIxNTroaxErgPWSrD2+g==",
                            PhoneNumber = "737-675-7001",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/849.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Fay.Jast75"
                        },
                        new
                        {
                            Id = 28,
                            AccessFailedCount = 0,
                            Address = "2585 Watsica Mount, New Joesphstad, British Indian Ocean Territory (Chagos Archipelago)",
                            ConcurrencyStamp = "93fcff3a-d11b-4de5-a7c6-a8891edd5ba9",
                            CreatedAt = new DateTime(2024, 2, 12, 6, 1, 0, 33, DateTimeKind.Utc).AddTicks(839),
                            Email = "Jodie65@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Jodie",
                            LastName = "Stehr",
                            LockoutEnabled = false,
                            NormalizedEmail = "JODIE65@GMAIL.COM",
                            NormalizedUserName = "JODIE62",
                            PasswordHash = "AQAAAAIAAYagAAAAEIwdfB6CiACtlusDHBYYn2lhON/aCw7CEWPceXgc82clccaVA5tJ52PUc8JhftTwhg==",
                            PhoneNumber = "630-928-9611",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/1211.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Jodie62"
                        },
                        new
                        {
                            Id = 29,
                            AccessFailedCount = 0,
                            Address = "860 Caden Court, Hendersonland, Israel",
                            ConcurrencyStamp = "0d5ebe02-c9f7-40d7-b01f-eb7fda72e500",
                            CreatedAt = new DateTime(2024, 5, 31, 6, 1, 0, 33, DateTimeKind.Utc).AddTicks(1199),
                            Email = "Kristopher_Abbott66@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Kristopher",
                            LastName = "Abbott",
                            LockoutEnabled = false,
                            NormalizedEmail = "KRISTOPHER_ABBOTT66@GMAIL.COM",
                            NormalizedUserName = "KRISTOPHER.ABBOTT",
                            PasswordHash = "AQAAAAIAAYagAAAAEP9fpBXXH2mPp3uGNoz05VFJhRRN3s9LAbgjehdLhxPMFYLGR7qS0+LzrqdYAOJvXg==",
                            PhoneNumber = "584-765-0050",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/642.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Kristopher.Abbott"
                        },
                        new
                        {
                            Id = 30,
                            AccessFailedCount = 0,
                            Address = "4792 Murphy Grove, Alexandroberg, Jordan",
                            ConcurrencyStamp = "33505a64-7195-4269-ad0b-51f118640c7b",
                            CreatedAt = new DateTime(2024, 4, 11, 6, 1, 0, 33, DateTimeKind.Utc).AddTicks(1563),
                            Email = "Lue33@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Lue",
                            LastName = "Grimes",
                            LockoutEnabled = false,
                            NormalizedEmail = "LUE33@GMAIL.COM",
                            NormalizedUserName = "LUE_GRIMES91",
                            PasswordHash = "AQAAAAIAAYagAAAAEBfd0ify197RFKGMhmc02naot0es3f3OhY/ZvIuYRVcML4HZtWUxrvnO3s/8A6rY4g==",
                            PhoneNumber = "216-219-8648",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/1027.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Lue_Grimes91"
                        },
                        new
                        {
                            Id = 31,
                            AccessFailedCount = 0,
                            Address = "9784 Tillman Summit, Quigleymouth, Haiti",
                            ConcurrencyStamp = "46aacfd8-3663-48fb-b1b2-fdf02b043287",
                            CreatedAt = new DateTime(2024, 10, 19, 6, 1, 0, 33, DateTimeKind.Utc).AddTicks(1935),
                            Email = "Madison.McLaughlin@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Madison",
                            LastName = "McLaughlin",
                            LockoutEnabled = false,
                            NormalizedEmail = "MADISON.MCLAUGHLIN@YAHOO.COM",
                            NormalizedUserName = "MADISON.MCLAUGHLIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEHz4Eqsgy/GhovnWGauS/EmXF9wH9qa0llKlLRr6EHNI8gKgwYUpa6CsiBInTD3x/Q==",
                            PhoneNumber = "907-596-1602",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/709.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Madison.McLaughlin"
                        },
                        new
                        {
                            Id = 32,
                            AccessFailedCount = 0,
                            Address = "00571 Arnaldo Forks, Talonview, Austria",
                            ConcurrencyStamp = "eea1ff80-8970-439f-8c34-797782659858",
                            CreatedAt = new DateTime(2024, 11, 24, 6, 1, 0, 34, DateTimeKind.Utc).AddTicks(5399),
                            Email = "Tre12@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Tre",
                            LastName = "O'Reilly",
                            LockoutEnabled = false,
                            NormalizedEmail = "TRE12@HOTMAIL.COM",
                            NormalizedUserName = "TRE_OREILLY74",
                            PasswordHash = "AQAAAAIAAYagAAAAEEsdjX/e93ZLhUhDvR+H1pBYFbR0rg17BmsB8+gyhjq+uBcrAVcuqmyFu7SIeiM+0A==",
                            PhoneNumber = "152-090-6738",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/560.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Tre_OReilly74"
                        },
                        new
                        {
                            Id = 33,
                            AccessFailedCount = 0,
                            Address = "664 Fae Inlet, North Esmeralda, Netherlands",
                            ConcurrencyStamp = "13e53d91-3657-454b-991f-3f53546461ec",
                            CreatedAt = new DateTime(2024, 2, 19, 6, 1, 0, 34, DateTimeKind.Utc).AddTicks(5846),
                            Email = "Rubie_Walker86@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Rubie",
                            LastName = "Walker",
                            LockoutEnabled = false,
                            NormalizedEmail = "RUBIE_WALKER86@YAHOO.COM",
                            NormalizedUserName = "RUBIE_WALKER",
                            PasswordHash = "AQAAAAIAAYagAAAAEJ15864gwmNboDLg96oCLl98LEAF3AXbKOu1BF1duzWwF94NX5sWiobEoA95+swT2g==",
                            PhoneNumber = "848-508-9264",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/1024.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Rubie_Walker"
                        },
                        new
                        {
                            Id = 34,
                            AccessFailedCount = 0,
                            Address = "257 Senger Ways, East Akeemfurt, Niue",
                            ConcurrencyStamp = "002c449b-e2f2-49e0-a59a-0aa946576d44",
                            CreatedAt = new DateTime(2024, 6, 4, 6, 1, 0, 34, DateTimeKind.Utc).AddTicks(6288),
                            Email = "Lorenz_Larson@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Lorenz",
                            LastName = "Larson",
                            LockoutEnabled = false,
                            NormalizedEmail = "LORENZ_LARSON@GMAIL.COM",
                            NormalizedUserName = "LORENZ.LARSON",
                            PasswordHash = "AQAAAAIAAYagAAAAEAnJTSraW8xdB6iCtHi5Y23wnqpNtBWrQITHrrS921Uswwfo6pIsm2yOw7Enz9HDGw==",
                            PhoneNumber = "493-098-9102",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/168.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Lorenz.Larson"
                        },
                        new
                        {
                            Id = 35,
                            AccessFailedCount = 0,
                            Address = "623 Zetta Roads, Strosinhaven, Democratic People's Republic of Korea",
                            ConcurrencyStamp = "6c826841-1605-4a02-8789-f742cc5a25c4",
                            CreatedAt = new DateTime(2024, 2, 9, 6, 1, 0, 34, DateTimeKind.Utc).AddTicks(6704),
                            Email = "Jaqueline_Ruecker@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Jaqueline",
                            LastName = "Ruecker",
                            LockoutEnabled = false,
                            NormalizedEmail = "JAQUELINE_RUECKER@HOTMAIL.COM",
                            NormalizedUserName = "JAQUELINE_RUECKER",
                            PasswordHash = "AQAAAAIAAYagAAAAENCKIBxail+wfevihWXs9IvIMtxNVewfE8r5svthtZlipzyFjqEfj5WG/oTjIa4IRw==",
                            PhoneNumber = "645-647-5711",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/1175.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Jaqueline_Ruecker"
                        },
                        new
                        {
                            Id = 36,
                            AccessFailedCount = 0,
                            Address = "29894 Leuschke Haven, East Lorenzo, Belgium",
                            ConcurrencyStamp = "50fd2c58-e0d8-40b4-a634-b5d4c01783eb",
                            CreatedAt = new DateTime(2024, 12, 13, 6, 1, 0, 34, DateTimeKind.Utc).AddTicks(7203),
                            Email = "Roxanne22@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Roxanne",
                            LastName = "Spencer",
                            LockoutEnabled = false,
                            NormalizedEmail = "ROXANNE22@GMAIL.COM",
                            NormalizedUserName = "ROXANNE_SPENCER47",
                            PasswordHash = "AQAAAAIAAYagAAAAECUUwz7GQ9w6zvmJUDnACSG8r9JlthZKdu6rJbS4kkuzuijYZ8EXEYgKQ+3r7ta4lA==",
                            PhoneNumber = "930-578-0897",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/647.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Roxanne_Spencer47"
                        },
                        new
                        {
                            Id = 37,
                            AccessFailedCount = 0,
                            Address = "37708 Frami Meadow, Amiyaton, Tonga",
                            ConcurrencyStamp = "0a6876a4-b047-42c7-967b-b195b77c67cf",
                            CreatedAt = new DateTime(2024, 9, 15, 6, 1, 0, 34, DateTimeKind.Utc).AddTicks(7552),
                            Email = "Colin_Carroll@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Colin",
                            LastName = "Carroll",
                            LockoutEnabled = false,
                            NormalizedEmail = "COLIN_CARROLL@GMAIL.COM",
                            NormalizedUserName = "COLIN.CARROLL86",
                            PasswordHash = "AQAAAAIAAYagAAAAEJRqoZlC4jqcecUEDFqBNPULUDtNJtJAwP+wmycqdodT61yfPrtTW8cYl+DxE2snmA==",
                            PhoneNumber = "596-458-0672",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/735.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Colin.Carroll86"
                        },
                        new
                        {
                            Id = 38,
                            AccessFailedCount = 0,
                            Address = "9278 Raynor Spur, North Braulio, Costa Rica",
                            ConcurrencyStamp = "e20f5d8b-43e4-47b8-b3e4-b48503844592",
                            CreatedAt = new DateTime(2024, 8, 7, 6, 1, 0, 34, DateTimeKind.Utc).AddTicks(7942),
                            Email = "Alexanne.McKenzie4@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Alexanne",
                            LastName = "McKenzie",
                            LockoutEnabled = false,
                            NormalizedEmail = "ALEXANNE.MCKENZIE4@GMAIL.COM",
                            NormalizedUserName = "ALEXANNE.MCKENZIE",
                            PasswordHash = "AQAAAAIAAYagAAAAEOVp2wtJW1vWF0BX0+v1exCLjB2BQtrQu8JexcjLT2fKylh9hqLr6T/GJ6A417no+Q==",
                            PhoneNumber = "548-357-2172",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/1191.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Alexanne.McKenzie"
                        },
                        new
                        {
                            Id = 39,
                            AccessFailedCount = 0,
                            Address = "859 Wuckert Forges, Daltonton, Malaysia",
                            ConcurrencyStamp = "fcfeeff3-fc8f-4737-ac9b-90b02681bc78",
                            CreatedAt = new DateTime(2024, 4, 8, 6, 1, 0, 34, DateTimeKind.Utc).AddTicks(8318),
                            Email = "Rosalee.VonRueden7@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Rosalee",
                            LastName = "VonRueden",
                            LockoutEnabled = false,
                            NormalizedEmail = "ROSALEE.VONRUEDEN7@HOTMAIL.COM",
                            NormalizedUserName = "ROSALEE53",
                            PasswordHash = "AQAAAAIAAYagAAAAECysQz50hcgMekjJbFBTh/ow84QNG4JI8Hh9ne+jerg67fbQ3c8ycXOfMOB/oiqUIA==",
                            PhoneNumber = "634-648-5532",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/946.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Rosalee53"
                        },
                        new
                        {
                            Id = 40,
                            AccessFailedCount = 0,
                            Address = "4003 Elena Streets, Ullrichborough, Slovakia (Slovak Republic)",
                            ConcurrencyStamp = "48be71b5-2ecf-4be2-af9c-b29123864928",
                            CreatedAt = new DateTime(2024, 11, 18, 6, 1, 0, 34, DateTimeKind.Utc).AddTicks(8700),
                            Email = "Pascale_Kozey@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Pascale",
                            LastName = "Kozey",
                            LockoutEnabled = false,
                            NormalizedEmail = "PASCALE_KOZEY@GMAIL.COM",
                            NormalizedUserName = "PASCALE_KOZEY61",
                            PasswordHash = "AQAAAAIAAYagAAAAEOFKN3w5dkYdvlAm5JCoLxN1HRud/A/kKHEROngGITi4ZOocAWFeTebWg5VHmxWwSQ==",
                            PhoneNumber = "283-629-6691",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/303.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Pascale_Kozey61"
                        });
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Variant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Variants");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.VariantValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VariantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VariantId");

                    b.ToTable("VariantValues");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Address", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.User", "User")
                        .WithMany("Addresses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.BannerDetail", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Banner", "Banner")
                        .WithMany("BannerDetails")
                        .HasForeignKey("BannerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManboShopAPI.Domain.Entities.Product", "Product")
                        .WithMany("BannerDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Banner");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Cart", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("User");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.CartItem", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Cart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManboShopAPI.Domain.Entities.Product", "Product")
                        .WithMany("CartItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Category", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Category", "ParentCategory")
                        .WithMany("SubCategories")
                        .HasForeignKey("ParentCategoryId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.CouponCondition", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Coupon", "Coupon")
                        .WithMany("CouponConditions")
                        .HasForeignKey("CouponId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Coupon");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Favorite", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Product", "Product")
                        .WithMany("Favorites")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManboShopAPI.Domain.Entities.User", "User")
                        .WithMany("Favorites")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Feedback", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Product", "Product")
                        .WithMany("Feedbacks")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManboShopAPI.Domain.Entities.User", "User")
                        .WithMany("Feedbacks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.NewsDetail", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.News", "News")
                        .WithMany("NewsDetails")
                        .HasForeignKey("NewsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManboShopAPI.Domain.Entities.Product", "Product")
                        .WithMany("NewsDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("News");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Order", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Coupon", "Coupon")
                        .WithMany("Orders")
                        .HasForeignKey("CouponId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ManboShopAPI.Domain.Entities.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Coupon");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.OrderDetail", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Coupon", "Coupon")
                        .WithMany("OrderDetails")
                        .HasForeignKey("CouponId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ManboShopAPI.Domain.Entities.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManboShopAPI.Domain.Entities.Product", "Product")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Coupon");

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Product", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ManboShopAPI.Domain.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Brand");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.ProductAttributeValue", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Attributes", "Attribute")
                        .WithMany("ProductAttributeValues")
                        .HasForeignKey("AttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManboShopAPI.Domain.Entities.Product", "Product")
                        .WithMany("ProductAttributeValues")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attribute");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.ProductImage", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Product", "Product")
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.ProductVariantValue", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Product", "Product")
                        .WithMany("ProductVariantValues")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.VariantValue", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Variant", "Variant")
                        .WithMany("VariantValues")
                        .HasForeignKey("VariantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Variant");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManboShopAPI.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Attributes", b =>
                {
                    b.Navigation("ProductAttributeValues");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Banner", b =>
                {
                    b.Navigation("BannerDetails");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Brand", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Cart", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Category", b =>
                {
                    b.Navigation("Products");

                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Coupon", b =>
                {
                    b.Navigation("CouponConditions");

                    b.Navigation("OrderDetails");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.News", b =>
                {
                    b.Navigation("NewsDetails");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Product", b =>
                {
                    b.Navigation("BannerDetails");

                    b.Navigation("CartItems");

                    b.Navigation("Favorites");

                    b.Navigation("Feedbacks");

                    b.Navigation("NewsDetails");

                    b.Navigation("OrderDetails");

                    b.Navigation("ProductAttributeValues");

                    b.Navigation("ProductImages");

                    b.Navigation("ProductVariantValues");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.User", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Favorites");

                    b.Navigation("Feedbacks");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Variant", b =>
                {
                    b.Navigation("VariantValues");
                });
#pragma warning restore 612, 618
        }
    }
}
