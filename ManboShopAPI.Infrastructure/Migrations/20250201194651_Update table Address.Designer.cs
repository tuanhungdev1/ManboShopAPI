// <auto-generated />
using System;
using ManboShopAPI.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ManboShopAPI.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250201194651_Update table Address")]
    partial class UpdatetableAddress
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AddressLine")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Attributes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Attributes");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Banner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Banners");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.BannerDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BannerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BannerId");

                    b.HasIndex("ProductId");

                    b.ToTable("BannerDetails");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.CartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductVariantValueId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("ProductVariantValueId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("ParentCategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ParentCategoryId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Coupon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CurrentUsages")
                        .HasColumnType("int");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("MaxUsages")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Coupons");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.CouponCondition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Attribute")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("CouponId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DiscountAmount")
                        .HasColumnType("int");

                    b.Property<string>("Operator")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Value")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CouponId");

                    b.ToTable("CouponConditions");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Favorite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Favorites");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Star")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.News", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("News");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.NewsDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("NewsId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("NewsId");

                    b.HasIndex("ProductId");

                    b.ToTable("NewsDetails");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CouponId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CouponId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.OrderDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CouponId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductVariantValueId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CouponId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductVariantValueId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BrandId")
                        .HasColumnType("int");

                    b.Property<int>("BuyTurn")
                        .HasColumnType("int");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("OldPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("SlugName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Specification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.ProductAttributeValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AttributeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AttributeId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductAttributeValues");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.ProductImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductImages");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.ProductVariantValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("OldPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("Sku")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductVariantValues");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfilePictureUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("VerificationCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("VerificationCodeExpiryTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            Address = "0605 Reed Turnpike, North Jazmynefurt, Guadeloupe",
                            ConcurrencyStamp = "4847e74f-e4fc-45d3-a1d1-d287db85bd1c",
                            CreatedAt = new DateTime(2024, 3, 31, 19, 46, 49, 4, DateTimeKind.Utc).AddTicks(3261),
                            Email = "Nikolas.Lowe@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Nikolas",
                            LastName = "Lowe",
                            LockoutEnabled = false,
                            NormalizedEmail = "NIKOLAS.LOWE@HOTMAIL.COM",
                            NormalizedUserName = "NIKOLAS_LOWE77",
                            PasswordHash = "AQAAAAIAAYagAAAAEAQIcjQpgQHDsz1erd0bUoQTj+GScc4AhwGP07Ebd6tmY5qH6Lc8W0/wwyILIfy5/w==",
                            PhoneNumber = "244-484-6156",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/602.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Nikolas_Lowe77"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            Address = "6752 Steve Expressway, East Michelle, Somalia",
                            ConcurrencyStamp = "219c651f-78b9-4f13-aee2-329fae42f279",
                            CreatedAt = new DateTime(2024, 9, 9, 19, 46, 49, 5, DateTimeKind.Utc).AddTicks(5746),
                            Email = "Ayla.Nikolaus@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Ayla",
                            LastName = "Nikolaus",
                            LockoutEnabled = false,
                            NormalizedEmail = "AYLA.NIKOLAUS@YAHOO.COM",
                            NormalizedUserName = "AYLA.NIKOLAUS",
                            PasswordHash = "AQAAAAIAAYagAAAAELLc3N4CxDyGOeK4vlDdomU9hwMLViJb1JJLQ5wUC/hPIivdPN4SEhMeB5mYPP6P9g==",
                            PhoneNumber = "764-474-9176",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/679.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Ayla.Nikolaus"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            Address = "9710 Lillian Run, West Haley, Kuwait",
                            ConcurrencyStamp = "4d410dfc-e927-4625-8e9d-e8ec2398ce15",
                            CreatedAt = new DateTime(2024, 11, 26, 19, 46, 49, 5, DateTimeKind.Utc).AddTicks(6181),
                            Email = "Amani56@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Amani",
                            LastName = "Kilback",
                            LockoutEnabled = false,
                            NormalizedEmail = "AMANI56@GMAIL.COM",
                            NormalizedUserName = "AMANI.KILBACK",
                            PasswordHash = "AQAAAAIAAYagAAAAEAy6GiTEGXZBGLKGffq6OZslnyuG0U3cOa9KcT53v5VbJybw1VQdPg36u2BrnEcS0Q==",
                            PhoneNumber = "973-961-0710",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/1208.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Amani.Kilback"
                        },
                        new
                        {
                            Id = 4,
                            AccessFailedCount = 0,
                            Address = "67398 Arne Radial, New Joel, Bermuda",
                            ConcurrencyStamp = "fafd3e95-6cec-4a8c-aa14-b4499524758f",
                            CreatedAt = new DateTime(2024, 10, 5, 19, 46, 49, 5, DateTimeKind.Utc).AddTicks(7535),
                            Email = "Marge_Konopelski@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Marge",
                            LastName = "Konopelski",
                            LockoutEnabled = false,
                            NormalizedEmail = "MARGE_KONOPELSKI@GMAIL.COM",
                            NormalizedUserName = "MARGE.KONOPELSKI46",
                            PasswordHash = "AQAAAAIAAYagAAAAEFYwFjEOrsuayEzyNyVvfvgDagD43CnEqkxtPd0AM3Lo6qxkc2/9G2vm3LjRiPJA2Q==",
                            PhoneNumber = "693-518-8570",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/913.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Marge.Konopelski46"
                        },
                        new
                        {
                            Id = 5,
                            AccessFailedCount = 0,
                            Address = "078 Mollie Glens, Mantebury, Montserrat",
                            ConcurrencyStamp = "ba3a9ddd-d9bd-4795-8f00-2d903650d4e5",
                            CreatedAt = new DateTime(2024, 5, 9, 19, 46, 49, 5, DateTimeKind.Utc).AddTicks(7812),
                            Email = "Alf88@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Alf",
                            LastName = "Rohan",
                            LockoutEnabled = false,
                            NormalizedEmail = "ALF88@GMAIL.COM",
                            NormalizedUserName = "ALF_ROHAN50",
                            PasswordHash = "AQAAAAIAAYagAAAAELaM8IlHQ5hxItIt3LUvHEnrnBPOWw9XdmlMEwo1wlLfxWLnqxrJ0HChHwqavXzVLg==",
                            PhoneNumber = "971-501-5454",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/177.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Alf_Rohan50"
                        },
                        new
                        {
                            Id = 6,
                            AccessFailedCount = 0,
                            Address = "5529 Melvina Key, North Josephchester, Sudan",
                            ConcurrencyStamp = "91364031-7bed-4d84-be59-30321d24f1d2",
                            CreatedAt = new DateTime(2024, 7, 2, 19, 46, 49, 5, DateTimeKind.Utc).AddTicks(8107),
                            Email = "August26@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "August",
                            LastName = "Cummings",
                            LockoutEnabled = false,
                            NormalizedEmail = "AUGUST26@GMAIL.COM",
                            NormalizedUserName = "AUGUST.CUMMINGS59",
                            PasswordHash = "AQAAAAIAAYagAAAAEC9hasqWAgkeUuYe/w3RA8IxW8HJVu9t/HgOwTTqhyCmHCPVhZYZ2/rbvo+j5xlKTA==",
                            PhoneNumber = "482-567-2634",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/1093.jpg",
                            TwoFactorEnabled = false,
                            UserName = "August.Cummings59"
                        },
                        new
                        {
                            Id = 7,
                            AccessFailedCount = 0,
                            Address = "13224 Dietrich Drive, Spencerchester, Singapore",
                            ConcurrencyStamp = "79109045-1ba8-4410-a5c3-5198c2de5eb8",
                            CreatedAt = new DateTime(2024, 6, 22, 19, 46, 49, 5, DateTimeKind.Utc).AddTicks(8336),
                            Email = "Nick46@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Nick",
                            LastName = "Walsh",
                            LockoutEnabled = false,
                            NormalizedEmail = "NICK46@GMAIL.COM",
                            NormalizedUserName = "NICK_WALSH76",
                            PasswordHash = "AQAAAAIAAYagAAAAEO8vWaPPuadZ+hYH308qbV1LCIFBnzxYs6+QH0b5WmmAT7/xmDDL/UQDG9KMjVrcfw==",
                            PhoneNumber = "912-350-2282",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/126.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Nick_Walsh76"
                        },
                        new
                        {
                            Id = 8,
                            AccessFailedCount = 0,
                            Address = "8439 O'Hara Points, South Vicente, Japan",
                            ConcurrencyStamp = "cbcf6c51-71bf-4653-86da-df445a89b7ab",
                            CreatedAt = new DateTime(2024, 3, 16, 19, 46, 49, 5, DateTimeKind.Utc).AddTicks(8576),
                            Email = "Reece60@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Reece",
                            LastName = "Hodkiewicz",
                            LockoutEnabled = false,
                            NormalizedEmail = "REECE60@GMAIL.COM",
                            NormalizedUserName = "REECE_HODKIEWICZ28",
                            PasswordHash = "AQAAAAIAAYagAAAAEKrCu/jHo3iLtpqoyZCATdN+wjOa/BKqvlqmCBzJSwzpSXxNTz83aI9lqgeN7HhZfg==",
                            PhoneNumber = "222-789-1602",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/723.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Reece_Hodkiewicz28"
                        },
                        new
                        {
                            Id = 9,
                            AccessFailedCount = 0,
                            Address = "902 Lilly Square, West Tyreek, Syrian Arab Republic",
                            ConcurrencyStamp = "271d69a0-76b5-4210-8df0-04e6205fa4d2",
                            CreatedAt = new DateTime(2024, 5, 12, 19, 46, 49, 5, DateTimeKind.Utc).AddTicks(8771),
                            Email = "Jed_Pacocha@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Jed",
                            LastName = "Pacocha",
                            LockoutEnabled = false,
                            NormalizedEmail = "JED_PACOCHA@HOTMAIL.COM",
                            NormalizedUserName = "JED.PACOCHA",
                            PasswordHash = "AQAAAAIAAYagAAAAELJT0gLn0HG7Nj5wsjvSDj096WveWiqe/OygxNVkTSQdinxwiOtkKSVDQlGLFfpqug==",
                            PhoneNumber = "579-646-4934",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/549.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Jed.Pacocha"
                        },
                        new
                        {
                            Id = 10,
                            AccessFailedCount = 0,
                            Address = "73413 Zulauf Extensions, Stoltenbergburgh, Romania",
                            ConcurrencyStamp = "b4f461e4-22dc-496b-8e24-c0a8d95e41b1",
                            CreatedAt = new DateTime(2024, 9, 14, 19, 46, 49, 5, DateTimeKind.Utc).AddTicks(8998),
                            Email = "Laurie_Wuckert@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Laurie",
                            LastName = "Wuckert",
                            LockoutEnabled = false,
                            NormalizedEmail = "LAURIE_WUCKERT@GMAIL.COM",
                            NormalizedUserName = "LAURIE.WUCKERT81",
                            PasswordHash = "AQAAAAIAAYagAAAAEMmt4Qrrn9qnqs3sBOThkFijRVErz/ZxklkxaF9MyqdcO1IBZYA0SjWgRlzHD3R7Dw==",
                            PhoneNumber = "704-195-1503",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/823.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Laurie.Wuckert81"
                        },
                        new
                        {
                            Id = 11,
                            AccessFailedCount = 0,
                            Address = "78199 Hahn Turnpike, West Krista, Guernsey",
                            ConcurrencyStamp = "f8646e96-705b-4377-944a-ec3485357ccb",
                            CreatedAt = new DateTime(2024, 5, 21, 19, 46, 49, 5, DateTimeKind.Utc).AddTicks(9189),
                            Email = "Asia.Jacobi73@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Asia",
                            LastName = "Jacobi",
                            LockoutEnabled = false,
                            NormalizedEmail = "ASIA.JACOBI73@YAHOO.COM",
                            NormalizedUserName = "ASIA.JACOBI",
                            PasswordHash = "AQAAAAIAAYagAAAAEDNRW0qL3BqpF6JPB1Z7nRvbCukTCfhmPSbigWDfVV9ljzIZKFCUKoKgD6uF5f0ucQ==",
                            PhoneNumber = "791-682-3754",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/880.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Asia.Jacobi"
                        },
                        new
                        {
                            Id = 12,
                            AccessFailedCount = 0,
                            Address = "25922 Kreiger Tunnel, Dimitritown, Liechtenstein",
                            ConcurrencyStamp = "7bf809ab-a55e-48e7-9ef4-60b1ab5665e8",
                            CreatedAt = new DateTime(2024, 5, 29, 19, 46, 49, 5, DateTimeKind.Utc).AddTicks(9440),
                            Email = "Pete_Pfannerstill32@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Pete",
                            LastName = "Pfannerstill",
                            LockoutEnabled = false,
                            NormalizedEmail = "PETE_PFANNERSTILL32@YAHOO.COM",
                            NormalizedUserName = "PETE.PFANNERSTILL",
                            PasswordHash = "AQAAAAIAAYagAAAAEIZhKioekDBP1iU8xE0rzmS112Jfd1D5W2nCvhzMkpdTI4W9xKMThNPSu4VA397NvQ==",
                            PhoneNumber = "187-555-6428",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/1245.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Pete.Pfannerstill"
                        },
                        new
                        {
                            Id = 13,
                            AccessFailedCount = 0,
                            Address = "693 Troy Shores, Lefflerview, Cayman Islands",
                            ConcurrencyStamp = "ac58b51f-f7cf-4689-be2e-cc4e449ea002",
                            CreatedAt = new DateTime(2024, 9, 19, 19, 46, 49, 5, DateTimeKind.Utc).AddTicks(9642),
                            Email = "Jaiden15@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Jaiden",
                            LastName = "Windler",
                            LockoutEnabled = false,
                            NormalizedEmail = "JAIDEN15@YAHOO.COM",
                            NormalizedUserName = "JAIDEN_WINDLER",
                            PasswordHash = "AQAAAAIAAYagAAAAEN+R29x0i09aMtHztIVDpxHkC96hNlM79SFaZvM2bjsEy1rCPahjqFotg32lpfZNDw==",
                            PhoneNumber = "552-697-0749",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/709.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Jaiden_Windler"
                        },
                        new
                        {
                            Id = 14,
                            AccessFailedCount = 0,
                            Address = "03099 Westley Coves, Augustineside, Ghana",
                            ConcurrencyStamp = "10d49f6b-eaa4-46bb-8bea-0ce61bb029a3",
                            CreatedAt = new DateTime(2024, 5, 26, 19, 46, 49, 5, DateTimeKind.Utc).AddTicks(9863),
                            Email = "Kristina_Bogan49@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Kristina",
                            LastName = "Bogan",
                            LockoutEnabled = false,
                            NormalizedEmail = "KRISTINA_BOGAN49@HOTMAIL.COM",
                            NormalizedUserName = "KRISTINA38",
                            PasswordHash = "AQAAAAIAAYagAAAAED9GBKtSf3OGdfCotMsptGiT+LFZ8b8n8b16tDjufq1IgruNYXfOqivl+Vn+5HiF5A==",
                            PhoneNumber = "928-324-2692",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/864.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Kristina38"
                        },
                        new
                        {
                            Id = 15,
                            AccessFailedCount = 0,
                            Address = "119 Koepp Mountains, New Jenningshaven, Finland",
                            ConcurrencyStamp = "ee09c439-0444-458b-8e7d-c1d6bee75be7",
                            CreatedAt = new DateTime(2024, 11, 11, 19, 46, 49, 6, DateTimeKind.Utc).AddTicks(67),
                            Email = "Guido84@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Guido",
                            LastName = "Effertz",
                            LockoutEnabled = false,
                            NormalizedEmail = "GUIDO84@GMAIL.COM",
                            NormalizedUserName = "GUIDO11",
                            PasswordHash = "AQAAAAIAAYagAAAAENKk7cSoJznvZ5f7cTiG0c739JCjulwrpz3iLdLps5ghu2Go71HLAM+4QkD//Il3yQ==",
                            PhoneNumber = "394-205-1515",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/1241.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Guido11"
                        },
                        new
                        {
                            Id = 16,
                            AccessFailedCount = 0,
                            Address = "511 Hirthe Lodge, South Isadore, Georgia",
                            ConcurrencyStamp = "b511d441-2f51-4d27-9ec9-7559c0beb5cb",
                            CreatedAt = new DateTime(2024, 4, 12, 19, 46, 49, 6, DateTimeKind.Utc).AddTicks(274),
                            Email = "Lily44@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Lily",
                            LastName = "Dickinson",
                            LockoutEnabled = false,
                            NormalizedEmail = "LILY44@YAHOO.COM",
                            NormalizedUserName = "LILY_DICKINSON32",
                            PasswordHash = "AQAAAAIAAYagAAAAEGmRGTjTydO267zevq6fJmAetN7Y87/FFc2MT/MAb4x6j5njRtFpNSUk6SOwORsGbA==",
                            PhoneNumber = "559-995-5336",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/680.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Lily_Dickinson32"
                        },
                        new
                        {
                            Id = 17,
                            AccessFailedCount = 0,
                            Address = "77201 McGlynn Dam, Lake Ardith, Eritrea",
                            ConcurrencyStamp = "f1b1027c-78d8-4078-bb2f-21be96273499",
                            CreatedAt = new DateTime(2024, 6, 28, 19, 46, 49, 6, DateTimeKind.Utc).AddTicks(471),
                            Email = "Emily69@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Emily",
                            LastName = "Brown",
                            LockoutEnabled = false,
                            NormalizedEmail = "EMILY69@GMAIL.COM",
                            NormalizedUserName = "EMILY_BROWN",
                            PasswordHash = "AQAAAAIAAYagAAAAELPGCcjk4rAbV2hE8sWNrPVVt+oPbAhkisN+UeRobljBKPdQwfY0/FW22Ezb9FhTkQ==",
                            PhoneNumber = "606-853-1974",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/1243.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Emily_Brown"
                        },
                        new
                        {
                            Id = 18,
                            AccessFailedCount = 0,
                            Address = "5434 Brady Gateway, Emilioton, Netherlands Antilles",
                            ConcurrencyStamp = "fa05736c-f085-4b37-b4ce-2f5b4005bc81",
                            CreatedAt = new DateTime(2024, 4, 3, 19, 46, 49, 6, DateTimeKind.Utc).AddTicks(707),
                            Email = "Candido93@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Candido",
                            LastName = "Leuschke",
                            LockoutEnabled = false,
                            NormalizedEmail = "CANDIDO93@YAHOO.COM",
                            NormalizedUserName = "CANDIDO.LEUSCHKE83",
                            PasswordHash = "AQAAAAIAAYagAAAAEL6ezJS8rVe4V1mAcpBYK1+rb9RmD3ySvzBMwAscFpqscEfCAmwV1uxQQwHjf8Phrw==",
                            PhoneNumber = "716-549-4482",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/632.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Candido.Leuschke83"
                        },
                        new
                        {
                            Id = 19,
                            AccessFailedCount = 0,
                            Address = "3447 Hyatt Junction, Boyleburgh, Finland",
                            ConcurrencyStamp = "fc0c8cbe-c44a-46c7-9fad-0cbd8b4b6137",
                            CreatedAt = new DateTime(2024, 2, 28, 19, 46, 49, 6, DateTimeKind.Utc).AddTicks(890),
                            Email = "Brielle_Durgan@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Brielle",
                            LastName = "Durgan",
                            LockoutEnabled = false,
                            NormalizedEmail = "BRIELLE_DURGAN@GMAIL.COM",
                            NormalizedUserName = "BRIELLE96",
                            PasswordHash = "AQAAAAIAAYagAAAAECV/e69aITZcVdEvN5Bo1ZTXbEOKcMXAUaw+F4X041yuyQUU4kGBbDBaaLF4K+sBGQ==",
                            PhoneNumber = "627-287-0880",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/1044.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Brielle96"
                        },
                        new
                        {
                            Id = 20,
                            AccessFailedCount = 0,
                            Address = "792 Bernier Center, New Sageshire, El Salvador",
                            ConcurrencyStamp = "04a23839-fda1-4f67-8a75-95eab863e5bf",
                            CreatedAt = new DateTime(2024, 3, 30, 19, 46, 49, 6, DateTimeKind.Utc).AddTicks(1111),
                            Email = "Joshua_Hettinger@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Joshua",
                            LastName = "Hettinger",
                            LockoutEnabled = false,
                            NormalizedEmail = "JOSHUA_HETTINGER@HOTMAIL.COM",
                            NormalizedUserName = "JOSHUA39",
                            PasswordHash = "AQAAAAIAAYagAAAAEFTaPYp8nwjKHag/txPi344QlUtkWhiyU3j8vNCZL0x1a/FZaWqYuIxtSg8khK60ig==",
                            PhoneNumber = "037-729-6764",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/612.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Joshua39"
                        },
                        new
                        {
                            Id = 21,
                            AccessFailedCount = 0,
                            Address = "0746 Ayla Ports, New Jeanie, Malawi",
                            ConcurrencyStamp = "31eb0e8b-ef12-4e2d-95f8-63aa696e4987",
                            CreatedAt = new DateTime(2024, 5, 14, 19, 46, 49, 6, DateTimeKind.Utc).AddTicks(1300),
                            Email = "Destiney_Jerde@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Destiney",
                            LastName = "Jerde",
                            LockoutEnabled = false,
                            NormalizedEmail = "DESTINEY_JERDE@YAHOO.COM",
                            NormalizedUserName = "DESTINEY_JERDE",
                            PasswordHash = "AQAAAAIAAYagAAAAEJpJaPPex9/eXA1sZ6u4UIrlqi2sAXi3/31Lt6grttSyxuIBrsJ6uY1rxTfK/7wq2A==",
                            PhoneNumber = "947-967-7698",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/809.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Destiney_Jerde"
                        },
                        new
                        {
                            Id = 22,
                            AccessFailedCount = 0,
                            Address = "859 Guiseppe Knoll, Alexzanderburgh, American Samoa",
                            ConcurrencyStamp = "1fc85db4-3062-4b0c-9190-c0e8b81b66cb",
                            CreatedAt = new DateTime(2024, 11, 14, 19, 46, 49, 6, DateTimeKind.Utc).AddTicks(1522),
                            Email = "Jaunita.Turner78@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Jaunita",
                            LastName = "Turner",
                            LockoutEnabled = false,
                            NormalizedEmail = "JAUNITA.TURNER78@YAHOO.COM",
                            NormalizedUserName = "JAUNITA_TURNER2",
                            PasswordHash = "AQAAAAIAAYagAAAAEPbWDdGd/kAwetqYtuwo3o63+q291tpz6rjSInGclnCF+JRdVdDSIO/QF6ThhVyxzw==",
                            PhoneNumber = "814-001-1414",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/406.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Jaunita_Turner2"
                        },
                        new
                        {
                            Id = 23,
                            AccessFailedCount = 0,
                            Address = "0494 Celestine Walk, Pacochamouth, Liechtenstein",
                            ConcurrencyStamp = "f3cec2b1-2659-4c12-a04c-b25e240dbe89",
                            CreatedAt = new DateTime(2024, 5, 13, 19, 46, 49, 6, DateTimeKind.Utc).AddTicks(1723),
                            Email = "Sandrine74@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Sandrine",
                            LastName = "Abshire",
                            LockoutEnabled = false,
                            NormalizedEmail = "SANDRINE74@YAHOO.COM",
                            NormalizedUserName = "SANDRINE.ABSHIRE",
                            PasswordHash = "AQAAAAIAAYagAAAAEOmAzaJlIUkMmMnE9rCj5tPWMnukTjDAKGotv/UGf2Jq72LHIQRDFUB5l7Pkt8i0bw==",
                            PhoneNumber = "249-240-7331",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/462.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Sandrine.Abshire"
                        },
                        new
                        {
                            Id = 24,
                            AccessFailedCount = 0,
                            Address = "6610 Romaguera Forge, New Dorthahaven, Guernsey",
                            ConcurrencyStamp = "3ee93a11-d410-4c6e-94c1-fb76433bede3",
                            CreatedAt = new DateTime(2024, 11, 20, 19, 46, 49, 6, DateTimeKind.Utc).AddTicks(1948),
                            Email = "Kristina.Stokes14@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Kristina",
                            LastName = "Stokes",
                            LockoutEnabled = false,
                            NormalizedEmail = "KRISTINA.STOKES14@GMAIL.COM",
                            NormalizedUserName = "KRISTINA.STOKES39",
                            PasswordHash = "AQAAAAIAAYagAAAAEOMZqT7SXfMq1USmtNMjYNLWKWEF8+lieTBZ3LINFPiM+rOtx5RXPF7kC6Nb6/2lKQ==",
                            PhoneNumber = "054-489-0899",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/650.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Kristina.Stokes39"
                        },
                        new
                        {
                            Id = 25,
                            AccessFailedCount = 0,
                            Address = "03835 Block Mission, Francofort, Egypt",
                            ConcurrencyStamp = "8ddd1fba-5580-4a79-98ca-2bc8f0af6048",
                            CreatedAt = new DateTime(2024, 7, 17, 19, 46, 49, 6, DateTimeKind.Utc).AddTicks(2170),
                            Email = "Katarina_Tremblay2@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Katarina",
                            LastName = "Tremblay",
                            LockoutEnabled = false,
                            NormalizedEmail = "KATARINA_TREMBLAY2@GMAIL.COM",
                            NormalizedUserName = "KATARINA.TREMBLAY",
                            PasswordHash = "AQAAAAIAAYagAAAAEKXgm30leAdETLMtMlimuN1jGnppqDFZ8NfuLxjbGmLilSKBZlXHUkG275ls7Ja1zw==",
                            PhoneNumber = "291-845-6354",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/1104.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Katarina.Tremblay"
                        },
                        new
                        {
                            Id = 26,
                            AccessFailedCount = 0,
                            Address = "7630 Hoppe Stravenue, Deckowchester, Guinea",
                            ConcurrencyStamp = "d86e5847-4248-492d-a72b-448363086eca",
                            CreatedAt = new DateTime(2024, 3, 31, 19, 46, 49, 6, DateTimeKind.Utc).AddTicks(2384),
                            Email = "Lilian55@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Lilian",
                            LastName = "Beatty",
                            LockoutEnabled = false,
                            NormalizedEmail = "LILIAN55@YAHOO.COM",
                            NormalizedUserName = "LILIAN87",
                            PasswordHash = "AQAAAAIAAYagAAAAEIVWOrD5T8jhoBBY044f+RtDhM30g9rTwYXTaWLjcuvFpzWz1Ji5ozplJ7Sq01wc+g==",
                            PhoneNumber = "967-058-6786",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/13.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Lilian87"
                        },
                        new
                        {
                            Id = 27,
                            AccessFailedCount = 0,
                            Address = "65348 Emilia Pass, Brannonport, Switzerland",
                            ConcurrencyStamp = "ad243747-1cd9-4430-8208-b63f24006850",
                            CreatedAt = new DateTime(2024, 6, 9, 19, 46, 49, 6, DateTimeKind.Utc).AddTicks(2597),
                            Email = "Brice_Sanford@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Brice",
                            LastName = "Sanford",
                            LockoutEnabled = false,
                            NormalizedEmail = "BRICE_SANFORD@YAHOO.COM",
                            NormalizedUserName = "BRICE.SANFORD16",
                            PasswordHash = "AQAAAAIAAYagAAAAEI5R8pgwoG6FlFwlKGfkd1D4id99sSM9Ybd4CzBx8UfCMnE7xdebtZ9y/NLQ8JNhVQ==",
                            PhoneNumber = "426-657-8198",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/1104.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Brice.Sanford16"
                        },
                        new
                        {
                            Id = 28,
                            AccessFailedCount = 0,
                            Address = "2168 Bertram Roads, New Retta, Western Sahara",
                            ConcurrencyStamp = "bfc333e9-58e1-4ba1-9f3c-1906daee68a8",
                            CreatedAt = new DateTime(2024, 5, 7, 19, 46, 49, 6, DateTimeKind.Utc).AddTicks(2802),
                            Email = "Barney18@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Barney",
                            LastName = "Boehm",
                            LockoutEnabled = false,
                            NormalizedEmail = "BARNEY18@YAHOO.COM",
                            NormalizedUserName = "BARNEY.BOEHM67",
                            PasswordHash = "AQAAAAIAAYagAAAAEBvaTgKA/5j17MgIXluirq2hIR0QLuD3mmlZW0bIhV/DynNGyMWmNB3SYOPBo0/3tw==",
                            PhoneNumber = "603-087-3179",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/787.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Barney.Boehm67"
                        },
                        new
                        {
                            Id = 29,
                            AccessFailedCount = 0,
                            Address = "0344 Quigley Harbor, Ortizshire, Saint Lucia",
                            ConcurrencyStamp = "51bdab0d-e06e-460f-9a1a-632fad6e6e2d",
                            CreatedAt = new DateTime(2024, 11, 9, 19, 46, 49, 6, DateTimeKind.Utc).AddTicks(3009),
                            Email = "Noelia71@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Noelia",
                            LastName = "Kunde",
                            LockoutEnabled = false,
                            NormalizedEmail = "NOELIA71@HOTMAIL.COM",
                            NormalizedUserName = "NOELIA49",
                            PasswordHash = "AQAAAAIAAYagAAAAEOaRUhBBkizz9IXa5nvEi6+p9bWQS2vc5X4kKCt8AYu5iZVOYEoYiYdGhGrJTzd55w==",
                            PhoneNumber = "836-370-3323",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/530.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Noelia49"
                        },
                        new
                        {
                            Id = 30,
                            AccessFailedCount = 0,
                            Address = "061 Flavie Mountain, Trompville, Saint Pierre and Miquelon",
                            ConcurrencyStamp = "1347a86c-9e67-4ac9-9690-0bd5dbf8ca8d",
                            CreatedAt = new DateTime(2024, 4, 8, 19, 46, 49, 6, DateTimeKind.Utc).AddTicks(3216),
                            Email = "Patience_Runolfsdottir79@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Patience",
                            LastName = "Runolfsdottir",
                            LockoutEnabled = false,
                            NormalizedEmail = "PATIENCE_RUNOLFSDOTTIR79@GMAIL.COM",
                            NormalizedUserName = "PATIENCE.RUNOLFSDOTTIR",
                            PasswordHash = "AQAAAAIAAYagAAAAEAAQ/HkAGB1NIrOhE6zaIILZr+ftzu3g3l+r8VrM5ImQFAmXw5bGmJtO9g8JlqX8BQ==",
                            PhoneNumber = "449-646-7198",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/643.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Patience.Runolfsdottir"
                        },
                        new
                        {
                            Id = 31,
                            AccessFailedCount = 0,
                            Address = "28518 Salvatore Tunnel, Hollyview, Kazakhstan",
                            ConcurrencyStamp = "c8770ab2-4e9d-434a-b4db-07208217d192",
                            CreatedAt = new DateTime(2024, 3, 12, 19, 46, 49, 6, DateTimeKind.Utc).AddTicks(3425),
                            Email = "Omer_Schmitt@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Omer",
                            LastName = "Schmitt",
                            LockoutEnabled = false,
                            NormalizedEmail = "OMER_SCHMITT@HOTMAIL.COM",
                            NormalizedUserName = "OMER.SCHMITT39",
                            PasswordHash = "AQAAAAIAAYagAAAAEGQsj/3JLmlMZAOEt7+WULWmetVKwOCzgGoym9uf3W1spSTha1DxjGfYL/f7uMXzZQ==",
                            PhoneNumber = "629-155-1030",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/263.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Omer.Schmitt39"
                        },
                        new
                        {
                            Id = 32,
                            AccessFailedCount = 0,
                            Address = "082 Alfonzo Corners, Collierport, Slovakia (Slovak Republic)",
                            ConcurrencyStamp = "2e79c8c8-b43c-4940-a800-7f67d2a55a70",
                            CreatedAt = new DateTime(2024, 12, 30, 19, 46, 49, 6, DateTimeKind.Utc).AddTicks(3596),
                            Email = "Leon26@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Leon",
                            LastName = "Sanford",
                            LockoutEnabled = false,
                            NormalizedEmail = "LEON26@YAHOO.COM",
                            NormalizedUserName = "LEON_SANFORD31",
                            PasswordHash = "AQAAAAIAAYagAAAAEJYvbtyFLZ/8QSqEdTt8gQWrDvYhpJFUZfpwsqITH4sAGQthw+PQYMbMahTwbiw9lg==",
                            PhoneNumber = "446-091-6600",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/755.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Leon_Sanford31"
                        },
                        new
                        {
                            Id = 33,
                            AccessFailedCount = 0,
                            Address = "843 Murphy Turnpike, Alessiaberg, Zambia",
                            ConcurrencyStamp = "a82f54d6-9265-41cd-982a-05eb8fcb1e00",
                            CreatedAt = new DateTime(2024, 12, 17, 19, 46, 49, 6, DateTimeKind.Utc).AddTicks(3819),
                            Email = "Idella.Bayer59@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Idella",
                            LastName = "Bayer",
                            LockoutEnabled = false,
                            NormalizedEmail = "IDELLA.BAYER59@HOTMAIL.COM",
                            NormalizedUserName = "IDELLA73",
                            PasswordHash = "AQAAAAIAAYagAAAAEIFSU7Cr/ff0FLysSN5AcTNbv90BWJZgwEMCD7ZawtwrnGCJoop40Swb+yEpmKF+xw==",
                            PhoneNumber = "617-762-6416",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/284.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Idella73"
                        },
                        new
                        {
                            Id = 34,
                            AccessFailedCount = 0,
                            Address = "99131 Fiona Stravenue, West Carissaborough, Nauru",
                            ConcurrencyStamp = "a8d046a1-d40e-4dd6-bf94-cca08fec3eca",
                            CreatedAt = new DateTime(2024, 3, 12, 19, 46, 49, 6, DateTimeKind.Utc).AddTicks(4023),
                            Email = "Tessie_Wintheiser@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Tessie",
                            LastName = "Wintheiser",
                            LockoutEnabled = false,
                            NormalizedEmail = "TESSIE_WINTHEISER@HOTMAIL.COM",
                            NormalizedUserName = "TESSIE_WINTHEISER75",
                            PasswordHash = "AQAAAAIAAYagAAAAEKsGwdJTKNIC1geHOV2J+7QGqysok3PqyIZ2YAEGlblLy2rrK5rQ6wKJe+36GGGaXQ==",
                            PhoneNumber = "805-523-5827",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/938.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Tessie_Wintheiser75"
                        },
                        new
                        {
                            Id = 35,
                            AccessFailedCount = 0,
                            Address = "1196 Will Rapids, Lake Janick, Myanmar",
                            ConcurrencyStamp = "cb28839d-7b14-455f-b5a9-73302b7dd8cb",
                            CreatedAt = new DateTime(2024, 6, 27, 19, 46, 49, 6, DateTimeKind.Utc).AddTicks(4235),
                            Email = "Kattie_Homenick@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Kattie",
                            LastName = "Homenick",
                            LockoutEnabled = false,
                            NormalizedEmail = "KATTIE_HOMENICK@GMAIL.COM",
                            NormalizedUserName = "KATTIE_HOMENICK",
                            PasswordHash = "AQAAAAIAAYagAAAAEI/3PabFJmsFP0BaUAtsqO18mLYUtVNjLWWaBUECzl7JWgMtmcBbVTy/a6FCkKj1Eg==",
                            PhoneNumber = "724-482-8446",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/104.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Kattie_Homenick"
                        },
                        new
                        {
                            Id = 36,
                            AccessFailedCount = 0,
                            Address = "732 Candido Parks, Port Shannon, Burundi",
                            ConcurrencyStamp = "972f2c55-3007-419f-8351-48af746d4cec",
                            CreatedAt = new DateTime(2024, 9, 30, 19, 46, 49, 6, DateTimeKind.Utc).AddTicks(4420),
                            Email = "Tina.Rodriguez@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Tina",
                            LastName = "Rodriguez",
                            LockoutEnabled = false,
                            NormalizedEmail = "TINA.RODRIGUEZ@HOTMAIL.COM",
                            NormalizedUserName = "TINA.RODRIGUEZ50",
                            PasswordHash = "AQAAAAIAAYagAAAAECY5gKpMyWA/BGMy3wVrUkVSK5sue83aFsVUFmH5bAW15P7vj4QXu1FiPWCEuzl1hw==",
                            PhoneNumber = "824-003-8803",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/1154.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Tina.Rodriguez50"
                        },
                        new
                        {
                            Id = 37,
                            AccessFailedCount = 0,
                            Address = "6410 Rath Key, Brekkeside, Ireland",
                            ConcurrencyStamp = "13ef555d-1f84-4f09-9331-bd7ff87a12dc",
                            CreatedAt = new DateTime(2024, 8, 31, 19, 46, 49, 6, DateTimeKind.Utc).AddTicks(4624),
                            Email = "Shanelle98@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Shanelle",
                            LastName = "Lubowitz",
                            LockoutEnabled = false,
                            NormalizedEmail = "SHANELLE98@GMAIL.COM",
                            NormalizedUserName = "SHANELLE75",
                            PasswordHash = "AQAAAAIAAYagAAAAEC/MKvTEbAiXeqdgbKtoAT4mImlpaaUcrSGsakp5ebZ2hGd3QBxfB2nTUohKUaWksA==",
                            PhoneNumber = "256-886-7286",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/291.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Shanelle75"
                        },
                        new
                        {
                            Id = 38,
                            AccessFailedCount = 0,
                            Address = "502 Carmella Ford, New Ayanashire, New Caledonia",
                            ConcurrencyStamp = "125a9115-1232-4101-9333-6947fcf615d9",
                            CreatedAt = new DateTime(2025, 1, 29, 19, 46, 49, 6, DateTimeKind.Utc).AddTicks(4816),
                            Email = "Tyson_Bode6@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Tyson",
                            LastName = "Bode",
                            LockoutEnabled = false,
                            NormalizedEmail = "TYSON_BODE6@GMAIL.COM",
                            NormalizedUserName = "TYSON_BODE80",
                            PasswordHash = "AQAAAAIAAYagAAAAEGNh9PxGZdJtNl/aTKjnad4rP49S9TrWqlcf1Z5AhfatnpOXyS792HgTFKX10pJsaA==",
                            PhoneNumber = "827-980-9926",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/286.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Tyson_Bode80"
                        },
                        new
                        {
                            Id = 39,
                            AccessFailedCount = 0,
                            Address = "414 Georgianna Pines, Alanaberg, El Salvador",
                            ConcurrencyStamp = "37cbb5c6-16e3-4998-83b0-0fa374f3563f",
                            CreatedAt = new DateTime(2024, 5, 22, 19, 46, 49, 6, DateTimeKind.Utc).AddTicks(5026),
                            Email = "Peggie.Lind79@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Peggie",
                            LastName = "Lind",
                            LockoutEnabled = false,
                            NormalizedEmail = "PEGGIE.LIND79@GMAIL.COM",
                            NormalizedUserName = "PEGGIE_LIND",
                            PasswordHash = "AQAAAAIAAYagAAAAEG4+82sOQ4OvWtYep9Tv6O/O11oSoaxbGGuwymI8BugpRBDRbl1ITm/QSL571MRNEA==",
                            PhoneNumber = "500-181-7388",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/747.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Peggie_Lind"
                        },
                        new
                        {
                            Id = 40,
                            AccessFailedCount = 0,
                            Address = "82502 Rebeka Expressway, Bartonland, Netherlands Antilles",
                            ConcurrencyStamp = "ff7ccb13-6935-4b93-9706-503a363ea7ab",
                            CreatedAt = new DateTime(2024, 3, 14, 19, 46, 49, 6, DateTimeKind.Utc).AddTicks(5204),
                            Email = "Odie28@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Odie",
                            LastName = "Littel",
                            LockoutEnabled = false,
                            NormalizedEmail = "ODIE28@YAHOO.COM",
                            NormalizedUserName = "ODIE18",
                            PasswordHash = "AQAAAAIAAYagAAAAEC69pI9yaZK2Un0zH0Fc93fZP6dwbVjAgzWEyw31gRO1oJgDoH5vBfcmozkgiNokCw==",
                            PhoneNumber = "161-395-9659",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/508.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Odie18"
                        });
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Variant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Variants");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.VariantValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VariantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VariantId");

                    b.ToTable("VariantValues");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Address", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.User", "User")
                        .WithMany("Addresses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.BannerDetail", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Banner", "Banner")
                        .WithMany("BannerDetails")
                        .HasForeignKey("BannerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManboShopAPI.Domain.Entities.Product", "Product")
                        .WithMany("BannerDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Banner");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Cart", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("User");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.CartItem", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Cart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManboShopAPI.Domain.Entities.ProductVariantValue", "ProductVariantValue")
                        .WithMany("CartItems")
                        .HasForeignKey("ProductVariantValueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("ProductVariantValue");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Category", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Category", "ParentCategory")
                        .WithMany("SubCategories")
                        .HasForeignKey("ParentCategoryId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.CouponCondition", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Coupon", "Coupon")
                        .WithMany("CouponConditions")
                        .HasForeignKey("CouponId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Coupon");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Favorite", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Product", "Product")
                        .WithMany("Favorites")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManboShopAPI.Domain.Entities.User", "User")
                        .WithMany("Favorites")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Feedback", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Product", "Product")
                        .WithMany("Feedbacks")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManboShopAPI.Domain.Entities.User", "User")
                        .WithMany("Feedbacks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.NewsDetail", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.News", "News")
                        .WithMany("NewsDetails")
                        .HasForeignKey("NewsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManboShopAPI.Domain.Entities.Product", "Product")
                        .WithMany("NewsDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("News");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Order", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Coupon", null)
                        .WithMany("Orders")
                        .HasForeignKey("CouponId");

                    b.HasOne("ManboShopAPI.Domain.Entities.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("User");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.OrderDetail", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Coupon", null)
                        .WithMany("OrderDetails")
                        .HasForeignKey("CouponId");

                    b.HasOne("ManboShopAPI.Domain.Entities.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManboShopAPI.Domain.Entities.ProductVariantValue", "ProductVariantValue")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductVariantValueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("ProductVariantValue");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Product", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ManboShopAPI.Domain.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Brand");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.ProductAttributeValue", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Attributes", "Attribute")
                        .WithMany("ProductAttributeValues")
                        .HasForeignKey("AttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManboShopAPI.Domain.Entities.Product", "Product")
                        .WithMany("ProductAttributeValues")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attribute");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.ProductImage", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Product", "Product")
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.ProductVariantValue", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Product", "Product")
                        .WithMany("ProductVariantValues")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.VariantValue", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Variant", "Variant")
                        .WithMany("VariantValues")
                        .HasForeignKey("VariantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Variant");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManboShopAPI.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Attributes", b =>
                {
                    b.Navigation("ProductAttributeValues");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Banner", b =>
                {
                    b.Navigation("BannerDetails");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Brand", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Cart", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Category", b =>
                {
                    b.Navigation("Products");

                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Coupon", b =>
                {
                    b.Navigation("CouponConditions");

                    b.Navigation("OrderDetails");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.News", b =>
                {
                    b.Navigation("NewsDetails");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Product", b =>
                {
                    b.Navigation("BannerDetails");

                    b.Navigation("Favorites");

                    b.Navigation("Feedbacks");

                    b.Navigation("NewsDetails");

                    b.Navigation("ProductAttributeValues");

                    b.Navigation("ProductImages");

                    b.Navigation("ProductVariantValues");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.ProductVariantValue", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.User", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Favorites");

                    b.Navigation("Feedbacks");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Variant", b =>
                {
                    b.Navigation("VariantValues");
                });
#pragma warning restore 612, 618
        }
    }
}
