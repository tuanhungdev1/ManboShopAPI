// <auto-generated />
using System;
using ManboShopAPI.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ManboShopAPI.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AddressLine")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Addresses", (string)null);
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Attributes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Attributes", (string)null);
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Banner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Banners", (string)null);
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.BannerDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BannerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BannerId");

                    b.HasIndex("ProductId");

                    b.ToTable("BannerDetails", (string)null);
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Brands", (string)null);
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Carts", (string)null);
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.CartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductVariantValueId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("ProductVariantValueId");

                    b.ToTable("CartItems", (string)null);
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("ParentCategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ParentCategoryId");

                    b.ToTable("Categories", (string)null);
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Coupon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CurrentUsages")
                        .HasColumnType("int");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("MaxUsages")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Coupons", (string)null);
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.CouponCondition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Attribute")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("CouponId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DiscountAmount")
                        .HasColumnType("int");

                    b.Property<string>("Operator")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Value")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CouponId");

                    b.ToTable("CouponConditions", (string)null);
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Favorite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Favorites", (string)null);
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Star")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Feedbacks", (string)null);
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.FeedbackLike", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("FeedbackId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FeedbackId");

                    b.HasIndex("UserId");

                    b.ToTable("FeedbackLikes", (string)null);
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.FeedbackReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("FeedbackId")
                        .HasColumnType("int");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FeedbackId");

                    b.HasIndex("UserId");

                    b.ToTable("FeedbackReports", (string)null);
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.News", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("News", (string)null);
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.NewsDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("NewsId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("NewsId");

                    b.HasIndex("ProductId");

                    b.ToTable("NewsDetails", (string)null);
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CouponId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CouponId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders", (string)null);
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.OrderDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CouponId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductVariantValueId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CouponId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductVariantValueId");

                    b.ToTable("OrderDetails", (string)null);
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BrandId")
                        .HasColumnType("int");

                    b.Property<int>("BuyTurn")
                        .HasColumnType("int");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("OldPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("SlugName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Specification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products", (string)null);
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.ProductAttributeValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AttributeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AttributeId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductAttributeValues", (string)null);
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.ProductImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductImages", (string)null);
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.ProductVariantValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("OldPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("Sku")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductVariantValues", (string)null);
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfilePictureUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("VerificationCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("VerificationCodeExpiryTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            Address = "077 Oberbrunner Park, West Rorybury, Aruba",
                            ConcurrencyStamp = "54b10b2d-086d-43b8-b892-37f613b26177",
                            CreatedAt = new DateTime(2024, 9, 29, 7, 10, 19, 798, DateTimeKind.Utc).AddTicks(3101),
                            Email = "Oceane_Cummings86@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Oceane",
                            LastName = "Cummings",
                            LockoutEnabled = false,
                            NormalizedEmail = "OCEANE_CUMMINGS86@YAHOO.COM",
                            NormalizedUserName = "OCEANE44",
                            PasswordHash = "AQAAAAIAAYagAAAAECb/cUoAOD7V+TjfXgTg8pLXRPPMLBX9EAnJVvY0Dsj0aQ/1KPqmBtfNSLtIopUtrA==",
                            PhoneNumber = "425-667-0698",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/666.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Oceane44"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            Address = "38458 Rashawn Crescent, South Jazmyneberg, Albania",
                            ConcurrencyStamp = "2127be1f-1c95-4500-a7ef-ccb3b4c61c9c",
                            CreatedAt = new DateTime(2024, 4, 3, 7, 10, 19, 799, DateTimeKind.Utc).AddTicks(7377),
                            Email = "Keith.Gleichner@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Keith",
                            LastName = "Gleichner",
                            LockoutEnabled = false,
                            NormalizedEmail = "KEITH.GLEICHNER@GMAIL.COM",
                            NormalizedUserName = "KEITH.GLEICHNER",
                            PasswordHash = "AQAAAAIAAYagAAAAEOrY5jD/+AoZBhTqTx4GyWmj0w3dxkMlqYipByPSe62ZirhteWfuSzhDYTaMcQPonA==",
                            PhoneNumber = "633-861-9113",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/257.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Keith.Gleichner"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            Address = "01853 Adams Ridges, Gradytown, Uzbekistan",
                            ConcurrencyStamp = "2acd26d4-3298-4831-b70d-b23d11c4d831",
                            CreatedAt = new DateTime(2025, 1, 8, 7, 10, 19, 799, DateTimeKind.Utc).AddTicks(7752),
                            Email = "Bertram30@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Bertram",
                            LastName = "Tillman",
                            LockoutEnabled = false,
                            NormalizedEmail = "BERTRAM30@YAHOO.COM",
                            NormalizedUserName = "BERTRAM46",
                            PasswordHash = "AQAAAAIAAYagAAAAEDexS9ZsCPJFweNzbY7h2qZQtw/VLqRm7I2XXgpLrmGv/gPOEaiNw/KGt6/GtDD6LQ==",
                            PhoneNumber = "136-933-1261",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/859.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Bertram46"
                        },
                        new
                        {
                            Id = 4,
                            AccessFailedCount = 0,
                            Address = "686 Brody Radial, VonRuedenborough, Swaziland",
                            ConcurrencyStamp = "d0081d86-b9cc-4399-aa00-b72bdd811fb7",
                            CreatedAt = new DateTime(2024, 7, 17, 7, 10, 19, 799, DateTimeKind.Utc).AddTicks(8026),
                            Email = "Garett47@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Garett",
                            LastName = "Powlowski",
                            LockoutEnabled = false,
                            NormalizedEmail = "GARETT47@YAHOO.COM",
                            NormalizedUserName = "GARETT_POWLOWSKI77",
                            PasswordHash = "AQAAAAIAAYagAAAAEJEe3aP45QcJZ0DidS2ufgpqonUxsppaav/2t8uRQyztZ9YXMb+JTMp8QhOxVShPMg==",
                            PhoneNumber = "494-933-6243",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/944.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Garett_Powlowski77"
                        },
                        new
                        {
                            Id = 5,
                            AccessFailedCount = 0,
                            Address = "575 Rubie Land, Pagachaven, French Guiana",
                            ConcurrencyStamp = "e79e878c-589e-4dfc-9bbb-a4db07e79960",
                            CreatedAt = new DateTime(2024, 11, 28, 7, 10, 19, 799, DateTimeKind.Utc).AddTicks(8235),
                            Email = "Brennon39@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Brennon",
                            LastName = "Kerluke",
                            LockoutEnabled = false,
                            NormalizedEmail = "BRENNON39@GMAIL.COM",
                            NormalizedUserName = "BRENNON45",
                            PasswordHash = "AQAAAAIAAYagAAAAEGfoj0oMZdqX9ofAx9sci9TStEKAAzXYu7GwwrRYJl2WBQEDocTSE7aTkxn4ZtrEMw==",
                            PhoneNumber = "507-438-4071",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/608.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Brennon45"
                        },
                        new
                        {
                            Id = 6,
                            AccessFailedCount = 0,
                            Address = "18378 Leannon Ridge, Chrisshire, Luxembourg",
                            ConcurrencyStamp = "0ce6ef9a-0842-4958-aaf6-079ce6be8544",
                            CreatedAt = new DateTime(2024, 4, 18, 7, 10, 19, 799, DateTimeKind.Utc).AddTicks(8468),
                            Email = "Roosevelt71@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Roosevelt",
                            LastName = "Kassulke",
                            LockoutEnabled = false,
                            NormalizedEmail = "ROOSEVELT71@HOTMAIL.COM",
                            NormalizedUserName = "ROOSEVELT35",
                            PasswordHash = "AQAAAAIAAYagAAAAEGC+E5Dnkn25VChTXwpUmebV2ydjHpQ2pEM8722i9TulNd4mC34w8+lDvOxEr1dHrA==",
                            PhoneNumber = "195-265-5105",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/534.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Roosevelt35"
                        },
                        new
                        {
                            Id = 7,
                            AccessFailedCount = 0,
                            Address = "003 Mustafa Forges, Sadieberg, United Arab Emirates",
                            ConcurrencyStamp = "b7c4c342-aed7-4b05-b70f-1857404c8ca0",
                            CreatedAt = new DateTime(2024, 4, 24, 7, 10, 19, 799, DateTimeKind.Utc).AddTicks(8678),
                            Email = "Lionel.Predovic@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Lionel",
                            LastName = "Predovic",
                            LockoutEnabled = false,
                            NormalizedEmail = "LIONEL.PREDOVIC@YAHOO.COM",
                            NormalizedUserName = "LIONEL_PREDOVIC",
                            PasswordHash = "AQAAAAIAAYagAAAAELVoFdqfj297V48C2QE+wJfpcC4Y9DHMXEGkHUd+jFzZdwXu/65/XkAN8bRFDXx2xA==",
                            PhoneNumber = "222-074-5688",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/1220.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Lionel_Predovic"
                        },
                        new
                        {
                            Id = 8,
                            AccessFailedCount = 0,
                            Address = "8054 Zachery Expressway, New Darrin, Lebanon",
                            ConcurrencyStamp = "3b506795-06c7-418b-b297-4309caf0b9c7",
                            CreatedAt = new DateTime(2024, 12, 10, 7, 10, 19, 799, DateTimeKind.Utc).AddTicks(8934),
                            Email = "Oda.Considine@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Oda",
                            LastName = "Considine",
                            LockoutEnabled = false,
                            NormalizedEmail = "ODA.CONSIDINE@GMAIL.COM",
                            NormalizedUserName = "ODA.CONSIDINE98",
                            PasswordHash = "AQAAAAIAAYagAAAAEIXjznZHwGSNYFIIqTzxPxArsH7cQefZmT7YYqaCSnXuNq24Z6QGl/jChT1T1SfQoQ==",
                            PhoneNumber = "747-762-0939",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/132.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Oda.Considine98"
                        },
                        new
                        {
                            Id = 9,
                            AccessFailedCount = 0,
                            Address = "7236 Jovani Forge, Carleeberg, Sudan",
                            ConcurrencyStamp = "50186085-74fa-4cc2-8174-22cf2621f13d",
                            CreatedAt = new DateTime(2024, 3, 17, 7, 10, 19, 799, DateTimeKind.Utc).AddTicks(9125),
                            Email = "Mose.Macejkovic@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Mose",
                            LastName = "Macejkovic",
                            LockoutEnabled = false,
                            NormalizedEmail = "MOSE.MACEJKOVIC@YAHOO.COM",
                            NormalizedUserName = "MOSE_MACEJKOVIC",
                            PasswordHash = "AQAAAAIAAYagAAAAECT+eascTZYy8F8AyldITGdsFXerOyA/VOnavTX047br6kkbA+6zmgUXCdsGolPA2w==",
                            PhoneNumber = "753-645-4433",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/144.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Mose_Macejkovic"
                        },
                        new
                        {
                            Id = 10,
                            AccessFailedCount = 0,
                            Address = "01463 Anderson Highway, Rutherfordville, Chad",
                            ConcurrencyStamp = "1899e0f4-799d-4546-8d68-e2a8cfb5ec05",
                            CreatedAt = new DateTime(2024, 6, 22, 7, 10, 19, 799, DateTimeKind.Utc).AddTicks(9393),
                            Email = "Winfield21@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Winfield",
                            LastName = "Jacobi",
                            LockoutEnabled = false,
                            NormalizedEmail = "WINFIELD21@HOTMAIL.COM",
                            NormalizedUserName = "WINFIELD.JACOBI37",
                            PasswordHash = "AQAAAAIAAYagAAAAEGy919EVHTu4Pv3E+UuWQjwoLvM/BCPBk8lQ85t3tss51goCzy2TRWCnsL4pJp8u8w==",
                            PhoneNumber = "688-290-3233",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/26.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Winfield.Jacobi37"
                        },
                        new
                        {
                            Id = 11,
                            AccessFailedCount = 0,
                            Address = "0930 Elmira Drive, Garfieldborough, Turks and Caicos Islands",
                            ConcurrencyStamp = "f6e4cc6e-5a27-4e80-989c-36918ef4454e",
                            CreatedAt = new DateTime(2024, 10, 28, 7, 10, 19, 799, DateTimeKind.Utc).AddTicks(9633),
                            Email = "Trent.Lesch@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Trent",
                            LastName = "Lesch",
                            LockoutEnabled = false,
                            NormalizedEmail = "TRENT.LESCH@YAHOO.COM",
                            NormalizedUserName = "TRENT48",
                            PasswordHash = "AQAAAAIAAYagAAAAEH33a8JdQ6TP9NcKVzVq9g/IhyQz9yPGdBs2hPiMcAkFBemQN5t9TY5B09tQkDN14Q==",
                            PhoneNumber = "104-659-2531",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/1209.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Trent48"
                        },
                        new
                        {
                            Id = 12,
                            AccessFailedCount = 0,
                            Address = "990 Gutmann Crescent, Generalbury, Uganda",
                            ConcurrencyStamp = "a1a6c79b-ac10-43a3-9037-20ac5f1f0ef6",
                            CreatedAt = new DateTime(2024, 10, 19, 7, 10, 19, 799, DateTimeKind.Utc).AddTicks(9841),
                            Email = "Liliane72@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Liliane",
                            LastName = "Nikolaus",
                            LockoutEnabled = false,
                            NormalizedEmail = "LILIANE72@HOTMAIL.COM",
                            NormalizedUserName = "LILIANE.NIKOLAUS75",
                            PasswordHash = "AQAAAAIAAYagAAAAEEsVaBHr6yMkYLFYq1wSRlH5BHzQc34f88bYdI0HcH7qhjh5wDoAnv6st6Li/qju0w==",
                            PhoneNumber = "821-842-4956",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/983.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Liliane.Nikolaus75"
                        },
                        new
                        {
                            Id = 13,
                            AccessFailedCount = 0,
                            Address = "1280 Harber Overpass, Randallberg, Iraq",
                            ConcurrencyStamp = "5b96515e-6aa0-4e2c-bd36-647f038590dd",
                            CreatedAt = new DateTime(2024, 11, 30, 7, 10, 19, 800, DateTimeKind.Utc).AddTicks(33),
                            Email = "Nichole.Runte6@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Nichole",
                            LastName = "Runte",
                            LockoutEnabled = false,
                            NormalizedEmail = "NICHOLE.RUNTE6@GMAIL.COM",
                            NormalizedUserName = "NICHOLE_RUNTE",
                            PasswordHash = "AQAAAAIAAYagAAAAEA4P1IxwwzMBHvPne2MVPWT5YxgCH/6gk4wV5lcoBprYeifS48bWKh9sjaSYHuk5aQ==",
                            PhoneNumber = "370-073-3342",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/414.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Nichole_Runte"
                        },
                        new
                        {
                            Id = 14,
                            AccessFailedCount = 0,
                            Address = "51011 Dalton Square, North Kenneth, Svalbard & Jan Mayen Islands",
                            ConcurrencyStamp = "738914cc-97fd-477b-8c7d-cd9fc5afdda1",
                            CreatedAt = new DateTime(2024, 6, 13, 7, 10, 19, 800, DateTimeKind.Utc).AddTicks(249),
                            Email = "Boris55@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Boris",
                            LastName = "Emmerich",
                            LockoutEnabled = false,
                            NormalizedEmail = "BORIS55@GMAIL.COM",
                            NormalizedUserName = "BORIS.EMMERICH85",
                            PasswordHash = "AQAAAAIAAYagAAAAEDGKdenD9D8GPOOJMiRMSf4ISGpo9aLdk8mZuOUX8Rn6RebYeom91475w67MMfMrsw==",
                            PhoneNumber = "403-177-6450",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/570.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Boris.Emmerich85"
                        },
                        new
                        {
                            Id = 15,
                            AccessFailedCount = 0,
                            Address = "599 Garett Place, West Meredithberg, Antigua and Barbuda",
                            ConcurrencyStamp = "2de6e217-cce9-48ee-8e63-23b4bb2851ed",
                            CreatedAt = new DateTime(2024, 6, 9, 7, 10, 19, 800, DateTimeKind.Utc).AddTicks(431),
                            Email = "Ellie_Wisozk@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Ellie",
                            LastName = "Wisozk",
                            LockoutEnabled = false,
                            NormalizedEmail = "ELLIE_WISOZK@YAHOO.COM",
                            NormalizedUserName = "ELLIE76",
                            PasswordHash = "AQAAAAIAAYagAAAAEJ/1u+t9+jCS4BPEcPYXbqT3iT8oW/G3haMD3hGZmeZiD3oPiS9i4hWvqrMnJBvykg==",
                            PhoneNumber = "579-686-9218",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/738.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Ellie76"
                        },
                        new
                        {
                            Id = 16,
                            AccessFailedCount = 0,
                            Address = "72906 Hilll Manors, Maryseville, Papua New Guinea",
                            ConcurrencyStamp = "e7fbd63f-4d88-4f19-9b74-4854fe21110d",
                            CreatedAt = new DateTime(2024, 6, 18, 7, 10, 19, 800, DateTimeKind.Utc).AddTicks(680),
                            Email = "Kailey_Stiedemann@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Kailey",
                            LastName = "Stiedemann",
                            LockoutEnabled = false,
                            NormalizedEmail = "KAILEY_STIEDEMANN@GMAIL.COM",
                            NormalizedUserName = "KAILEY_STIEDEMANN",
                            PasswordHash = "AQAAAAIAAYagAAAAEBIawalxI9Uz6N0SBaNi8hHfVOEAsmnsehDjRvWUgW+6l/msoNw3L2GDcWRgau+MBg==",
                            PhoneNumber = "900-174-6926",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/33.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Kailey_Stiedemann"
                        },
                        new
                        {
                            Id = 17,
                            AccessFailedCount = 0,
                            Address = "51628 Abernathy Place, South Mya, Cambodia",
                            ConcurrencyStamp = "801fd928-1a59-44b8-8db1-b1ba34506a74",
                            CreatedAt = new DateTime(2025, 1, 22, 7, 10, 19, 800, DateTimeKind.Utc).AddTicks(897),
                            Email = "Abigale71@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Abigale",
                            LastName = "Littel",
                            LockoutEnabled = false,
                            NormalizedEmail = "ABIGALE71@GMAIL.COM",
                            NormalizedUserName = "ABIGALE.LITTEL85",
                            PasswordHash = "AQAAAAIAAYagAAAAEOZVq++oaFxmPm0Ea/Ur32EMNUt+3Uel5irQSfoFAAVWZFJreQs8Rya/f2yA0exfIA==",
                            PhoneNumber = "083-851-1081",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/835.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Abigale.Littel85"
                        },
                        new
                        {
                            Id = 18,
                            AccessFailedCount = 0,
                            Address = "1927 Halvorson Tunnel, Titusport, Lithuania",
                            ConcurrencyStamp = "c35cdef9-7d9a-4912-939d-7ea49098b845",
                            CreatedAt = new DateTime(2024, 8, 30, 7, 10, 19, 800, DateTimeKind.Utc).AddTicks(1093),
                            Email = "Armando.Kertzmann96@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Armando",
                            LastName = "Kertzmann",
                            LockoutEnabled = false,
                            NormalizedEmail = "ARMANDO.KERTZMANN96@GMAIL.COM",
                            NormalizedUserName = "ARMANDO_KERTZMANN",
                            PasswordHash = "AQAAAAIAAYagAAAAEK30+yVh//iz+DWFsr/tkOFxJi+SZV6rbCL8QEvVscy4TfWhCDPIBS76wzzrF2NaQQ==",
                            PhoneNumber = "927-223-6627",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/896.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Armando_Kertzmann"
                        },
                        new
                        {
                            Id = 19,
                            AccessFailedCount = 0,
                            Address = "155 Will Extension, East Rolandoville, Guinea-Bissau",
                            ConcurrencyStamp = "1be9000b-acc8-48ac-bf59-bd9b52bffd56",
                            CreatedAt = new DateTime(2024, 7, 31, 7, 10, 19, 800, DateTimeKind.Utc).AddTicks(1317),
                            Email = "Corrine.Cummings@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Corrine",
                            LastName = "Cummings",
                            LockoutEnabled = false,
                            NormalizedEmail = "CORRINE.CUMMINGS@YAHOO.COM",
                            NormalizedUserName = "CORRINE39",
                            PasswordHash = "AQAAAAIAAYagAAAAEBM1bHr9vaEb1hzgQAqSXs7mzjbIOYNu9A3VbmvP0WOD+H1quAcDJdybwIqLnJoFrg==",
                            PhoneNumber = "291-277-0830",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/297.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Corrine39"
                        },
                        new
                        {
                            Id = 20,
                            AccessFailedCount = 0,
                            Address = "952 Lemke Square, Gastonville, Netherlands",
                            ConcurrencyStamp = "f22ade51-b92f-4e11-8d42-b89aeff38474",
                            CreatedAt = new DateTime(2024, 3, 7, 7, 10, 19, 800, DateTimeKind.Utc).AddTicks(1493),
                            Email = "Elmore_Flatley61@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Elmore",
                            LastName = "Flatley",
                            LockoutEnabled = false,
                            NormalizedEmail = "ELMORE_FLATLEY61@YAHOO.COM",
                            NormalizedUserName = "ELMORE.FLATLEY67",
                            PasswordHash = "AQAAAAIAAYagAAAAEI7Bf7BJedbqcByLAtWICOM4+XfH8UPMqzP/7xy6GBrLatD3mUwHB8OgAGtt0ziNvw==",
                            PhoneNumber = "815-832-2911",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/492.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Elmore.Flatley67"
                        },
                        new
                        {
                            Id = 21,
                            AccessFailedCount = 0,
                            Address = "48744 Baumbach Vista, Cruzport, Christmas Island",
                            ConcurrencyStamp = "158c1b91-455f-4570-995d-e9dadf016767",
                            CreatedAt = new DateTime(2024, 3, 3, 7, 10, 19, 800, DateTimeKind.Utc).AddTicks(1724),
                            Email = "Thaddeus_Blick53@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Thaddeus",
                            LastName = "Blick",
                            LockoutEnabled = false,
                            NormalizedEmail = "THADDEUS_BLICK53@GMAIL.COM",
                            NormalizedUserName = "THADDEUS21",
                            PasswordHash = "AQAAAAIAAYagAAAAELpRZZYbnh9RV7dwL7QW7w4CcitBYOwa3qbTDSAp0Kpi/P6sHQRXlDp+C/T2TSEfzw==",
                            PhoneNumber = "007-660-0114",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/596.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Thaddeus21"
                        },
                        new
                        {
                            Id = 22,
                            AccessFailedCount = 0,
                            Address = "649 Fiona Green, Darronfort, Guadeloupe",
                            ConcurrencyStamp = "bc667860-e08e-492a-bed8-ba56b1d269cb",
                            CreatedAt = new DateTime(2024, 12, 8, 7, 10, 19, 800, DateTimeKind.Utc).AddTicks(1913),
                            Email = "Clair77@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Clair",
                            LastName = "Schamberger",
                            LockoutEnabled = false,
                            NormalizedEmail = "CLAIR77@YAHOO.COM",
                            NormalizedUserName = "CLAIR.SCHAMBERGER29",
                            PasswordHash = "AQAAAAIAAYagAAAAEIpb/Jbb/rsSpJ3lIOzsBk8JrTFiPg/+nuezZVlIaJ0DFKOq4P0VhGfr060FkjARew==",
                            PhoneNumber = "670-659-6848",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/1173.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Clair.Schamberger29"
                        },
                        new
                        {
                            Id = 23,
                            AccessFailedCount = 0,
                            Address = "1999 Hagenes Causeway, Harveyfort, Guinea-Bissau",
                            ConcurrencyStamp = "aed1b8a7-4ad0-478b-a309-554e23256b3f",
                            CreatedAt = new DateTime(2024, 7, 30, 7, 10, 19, 800, DateTimeKind.Utc).AddTicks(2117),
                            Email = "Rosetta18@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Rosetta",
                            LastName = "Mosciski",
                            LockoutEnabled = false,
                            NormalizedEmail = "ROSETTA18@GMAIL.COM",
                            NormalizedUserName = "ROSETTA.MOSCISKI",
                            PasswordHash = "AQAAAAIAAYagAAAAEC6L4TnRKijBtlxn8gM3Mp9OCkPiCSEtY8L/IXGoPOp/kkFOLVK9jmVO/aPUGlRhHQ==",
                            PhoneNumber = "765-208-8248",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/641.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Rosetta.Mosciski"
                        },
                        new
                        {
                            Id = 24,
                            AccessFailedCount = 0,
                            Address = "94715 O'Reilly Center, South Morris, Estonia",
                            ConcurrencyStamp = "23b57ad7-f26f-44aa-9de7-4df82361dff9",
                            CreatedAt = new DateTime(2024, 9, 8, 7, 10, 19, 800, DateTimeKind.Utc).AddTicks(2286),
                            Email = "Samir49@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Samir",
                            LastName = "Ledner",
                            LockoutEnabled = false,
                            NormalizedEmail = "SAMIR49@GMAIL.COM",
                            NormalizedUserName = "SAMIR.LEDNER",
                            PasswordHash = "AQAAAAIAAYagAAAAEBINDCSPT2zgNYnLXsu0PdUBLGv9v81k3r+PgxOhjHn9+u+2UW+nsPlTcWuynOtINQ==",
                            PhoneNumber = "175-922-1747",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/744.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Samir.Ledner"
                        },
                        new
                        {
                            Id = 25,
                            AccessFailedCount = 0,
                            Address = "242 Koepp Stream, Port Talonfort, Gabon",
                            ConcurrencyStamp = "1d45c6e2-d953-4834-9510-2b40779eec8e",
                            CreatedAt = new DateTime(2024, 4, 1, 7, 10, 19, 800, DateTimeKind.Utc).AddTicks(2489),
                            Email = "Gabriella.Berge47@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Gabriella",
                            LastName = "Berge",
                            LockoutEnabled = false,
                            NormalizedEmail = "GABRIELLA.BERGE47@GMAIL.COM",
                            NormalizedUserName = "GABRIELLA.BERGE",
                            PasswordHash = "AQAAAAIAAYagAAAAEJFX9gQqBYA0EejcvHaWg2yHB44y/cD3Blv1fJdKm/UnZ67QAibZD2NT1P+rhYeU8g==",
                            PhoneNumber = "696-309-9043",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/1133.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Gabriella.Berge"
                        },
                        new
                        {
                            Id = 26,
                            AccessFailedCount = 0,
                            Address = "82534 Enid Knolls, Schuppeland, Brunei Darussalam",
                            ConcurrencyStamp = "6a536e39-e49e-4a2b-a70e-0127740418e2",
                            CreatedAt = new DateTime(2024, 2, 17, 7, 10, 19, 800, DateTimeKind.Utc).AddTicks(2794),
                            Email = "Jackson_Tromp4@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Jackson",
                            LastName = "Tromp",
                            LockoutEnabled = false,
                            NormalizedEmail = "JACKSON_TROMP4@GMAIL.COM",
                            NormalizedUserName = "JACKSON.TROMP53",
                            PasswordHash = "AQAAAAIAAYagAAAAELrmDI5LpZ87PPx9hGlLx55yHbNWe9/mNz81Ox4R8YKAHknH62UuFfguMCtQogldRQ==",
                            PhoneNumber = "778-217-4354",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/158.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Jackson.Tromp53"
                        },
                        new
                        {
                            Id = 27,
                            AccessFailedCount = 0,
                            Address = "9071 Una Flat, New Vaughn, Bermuda",
                            ConcurrencyStamp = "2a53231f-ce2c-45b4-99cc-2c2e77630f28",
                            CreatedAt = new DateTime(2024, 8, 29, 7, 10, 19, 800, DateTimeKind.Utc).AddTicks(2992),
                            Email = "Hilbert74@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Hilbert",
                            LastName = "Reynolds",
                            LockoutEnabled = false,
                            NormalizedEmail = "HILBERT74@GMAIL.COM",
                            NormalizedUserName = "HILBERT.REYNOLDS41",
                            PasswordHash = "AQAAAAIAAYagAAAAEHhknLkY+s+Xw7Zi/d/trTXK5Rft71YtGF+fTCR8N44V+xu2Aqt3OfC0zSq6ZpzmXw==",
                            PhoneNumber = "633-832-5256",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/448.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Hilbert.Reynolds41"
                        },
                        new
                        {
                            Id = 28,
                            AccessFailedCount = 0,
                            Address = "02015 Will Ford, Terrellbury, Taiwan",
                            ConcurrencyStamp = "aa76a422-a472-471a-a0b7-b2b0a961c4d8",
                            CreatedAt = new DateTime(2024, 8, 2, 7, 10, 19, 800, DateTimeKind.Utc).AddTicks(3163),
                            Email = "Arden_Ferry@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Arden",
                            LastName = "Ferry",
                            LockoutEnabled = false,
                            NormalizedEmail = "ARDEN_FERRY@GMAIL.COM",
                            NormalizedUserName = "ARDEN_FERRY4",
                            PasswordHash = "AQAAAAIAAYagAAAAEBGazUtwKNlRy6Zwp40kj9TQk27zQiln7c8LFInzRN7VWRuj6Ar+h5I7Dh8KQwdY5w==",
                            PhoneNumber = "856-640-2069",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/227.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Arden_Ferry4"
                        },
                        new
                        {
                            Id = 29,
                            AccessFailedCount = 0,
                            Address = "94301 Humberto Locks, North Jessikastad, Philippines",
                            ConcurrencyStamp = "1f16c4e0-a979-42fa-8964-5859a5618030",
                            CreatedAt = new DateTime(2024, 2, 26, 7, 10, 19, 800, DateTimeKind.Utc).AddTicks(3381),
                            Email = "Eloise_Carter@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Eloise",
                            LastName = "Carter",
                            LockoutEnabled = false,
                            NormalizedEmail = "ELOISE_CARTER@GMAIL.COM",
                            NormalizedUserName = "ELOISE15",
                            PasswordHash = "AQAAAAIAAYagAAAAEB2FzWqVZ0O1Uljzx+nP6GGNoT46idifudqyG15OoJMCbNwtrPZOYYCykc5zxu1nsw==",
                            PhoneNumber = "266-162-9135",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/402.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Eloise15"
                        },
                        new
                        {
                            Id = 30,
                            AccessFailedCount = 0,
                            Address = "246 Haley Summit, Wymanhaven, Saudi Arabia",
                            ConcurrencyStamp = "e9a63d89-a867-4d77-8f77-f2873703e284",
                            CreatedAt = new DateTime(2024, 12, 11, 7, 10, 19, 800, DateTimeKind.Utc).AddTicks(3585),
                            Email = "Mario.Aufderhar@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Mario",
                            LastName = "Aufderhar",
                            LockoutEnabled = false,
                            NormalizedEmail = "MARIO.AUFDERHAR@HOTMAIL.COM",
                            NormalizedUserName = "MARIO_AUFDERHAR16",
                            PasswordHash = "AQAAAAIAAYagAAAAECcJINqsZhxEA8q1Ut8mpnxjWNTz53KoaUsY6yq3/Rh/djeBKtRUDKBdrL9bqX7GtA==",
                            PhoneNumber = "294-471-2972",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/441.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Mario_Aufderhar16"
                        },
                        new
                        {
                            Id = 31,
                            AccessFailedCount = 0,
                            Address = "500 Hertha Center, Eldredmouth, United Arab Emirates",
                            ConcurrencyStamp = "76422c61-4147-4d7a-b46c-f7c9cb56c9a7",
                            CreatedAt = new DateTime(2024, 4, 29, 7, 10, 19, 800, DateTimeKind.Utc).AddTicks(3793),
                            Email = "Mabelle96@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Mabelle",
                            LastName = "Heidenreich",
                            LockoutEnabled = false,
                            NormalizedEmail = "MABELLE96@HOTMAIL.COM",
                            NormalizedUserName = "MABELLE_HEIDENREICH82",
                            PasswordHash = "AQAAAAIAAYagAAAAEE91v6h2NmJi3sF2nJDliIGaKX9sxZ+jk8LTr/f/4wWMfcFuusW0Apui7JtFkngmVw==",
                            PhoneNumber = "466-057-3669",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/934.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Mabelle_Heidenreich82"
                        },
                        new
                        {
                            Id = 32,
                            AccessFailedCount = 0,
                            Address = "453 Craig Run, East Timothyfort, Qatar",
                            ConcurrencyStamp = "ea8830ec-8e57-4d72-be07-0bba6aeec83d",
                            CreatedAt = new DateTime(2024, 8, 23, 7, 10, 19, 800, DateTimeKind.Utc).AddTicks(4016),
                            Email = "Tamia_Stracke87@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Tamia",
                            LastName = "Stracke",
                            LockoutEnabled = false,
                            NormalizedEmail = "TAMIA_STRACKE87@GMAIL.COM",
                            NormalizedUserName = "TAMIA_STRACKE",
                            PasswordHash = "AQAAAAIAAYagAAAAEB7DXv86Nkt9wEj54F3+Ne3HMJVtwL9+qQKYkVTNxU4oNc8KnzuEGE2VjNuyBF+JXA==",
                            PhoneNumber = "632-522-9615",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/940.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Tamia_Stracke"
                        },
                        new
                        {
                            Id = 33,
                            AccessFailedCount = 0,
                            Address = "11673 Hyatt Freeway, Port Evalynborough, Portugal",
                            ConcurrencyStamp = "c04f369b-90fa-47cd-84f5-d737ee80de4c",
                            CreatedAt = new DateTime(2024, 9, 20, 7, 10, 19, 800, DateTimeKind.Utc).AddTicks(4197),
                            Email = "Sydnee.Jerde84@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Sydnee",
                            LastName = "Jerde",
                            LockoutEnabled = false,
                            NormalizedEmail = "SYDNEE.JERDE84@HOTMAIL.COM",
                            NormalizedUserName = "SYDNEE_JERDE",
                            PasswordHash = "AQAAAAIAAYagAAAAEOjuRDoBQanp5wAUALAmVTAyFjuDRXcUOcCj+Tvo9XLRrZA21KCy1MFUS8N/Hfn3UA==",
                            PhoneNumber = "120-497-1259",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/1042.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Sydnee_Jerde"
                        },
                        new
                        {
                            Id = 34,
                            AccessFailedCount = 0,
                            Address = "8509 Jo Courts, Adityamouth, Mexico",
                            ConcurrencyStamp = "cd79909d-3ba9-4247-9395-c1828cfb4f1c",
                            CreatedAt = new DateTime(2025, 1, 3, 7, 10, 19, 800, DateTimeKind.Utc).AddTicks(4406),
                            Email = "Odie_Lindgren67@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Odie",
                            LastName = "Lindgren",
                            LockoutEnabled = false,
                            NormalizedEmail = "ODIE_LINDGREN67@YAHOO.COM",
                            NormalizedUserName = "ODIE.LINDGREN85",
                            PasswordHash = "AQAAAAIAAYagAAAAEKDs/ea3QvlVI3pXJXRDZS9fJcBZUhskpxf6nzFJbRSoCT2MSzFOcZhRAvp0Km/J4Q==",
                            PhoneNumber = "882-405-7652",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/818.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Odie.Lindgren85"
                        },
                        new
                        {
                            Id = 35,
                            AccessFailedCount = 0,
                            Address = "9372 Mike Greens, Vellamouth, Canada",
                            ConcurrencyStamp = "a4c80844-f65d-4dcb-969b-22fd9a4d996a",
                            CreatedAt = new DateTime(2024, 4, 11, 7, 10, 19, 800, DateTimeKind.Utc).AddTicks(4576),
                            Email = "Summer.Maggio@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Summer",
                            LastName = "Maggio",
                            LockoutEnabled = false,
                            NormalizedEmail = "SUMMER.MAGGIO@HOTMAIL.COM",
                            NormalizedUserName = "SUMMER_MAGGIO96",
                            PasswordHash = "AQAAAAIAAYagAAAAEPZFOR5Fm3M5qD4CoQgMOPL7QZYLbhU3MHJYjNhVyub80eEhXHKr67I4GfOlbylGHw==",
                            PhoneNumber = "705-215-7796",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/618.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Summer_Maggio96"
                        },
                        new
                        {
                            Id = 36,
                            AccessFailedCount = 0,
                            Address = "3072 Josie Points, Greggville, Belarus",
                            ConcurrencyStamp = "695985d8-42e4-496c-8b23-0968a9f54786",
                            CreatedAt = new DateTime(2024, 4, 3, 7, 10, 19, 800, DateTimeKind.Utc).AddTicks(4775),
                            Email = "Quincy.Kovacek@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Quincy",
                            LastName = "Kovacek",
                            LockoutEnabled = false,
                            NormalizedEmail = "QUINCY.KOVACEK@YAHOO.COM",
                            NormalizedUserName = "QUINCY.KOVACEK29",
                            PasswordHash = "AQAAAAIAAYagAAAAEEpIjdiE7C0WAZOvegnnF0dikxom1xAodKI4K7Is98Joluql7YqXqv+m9Tj0Z8P80A==",
                            PhoneNumber = "106-670-9748",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/663.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Quincy.Kovacek29"
                        },
                        new
                        {
                            Id = 37,
                            AccessFailedCount = 0,
                            Address = "300 Hayes Points, Calistaborough, Germany",
                            ConcurrencyStamp = "4ba15f08-714b-4363-8049-16c1595a59a5",
                            CreatedAt = new DateTime(2024, 9, 15, 7, 10, 19, 800, DateTimeKind.Utc).AddTicks(4970),
                            Email = "Filiberto_Crist52@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Filiberto",
                            LastName = "Crist",
                            LockoutEnabled = false,
                            NormalizedEmail = "FILIBERTO_CRIST52@HOTMAIL.COM",
                            NormalizedUserName = "FILIBERTO.CRIST",
                            PasswordHash = "AQAAAAIAAYagAAAAEKMFp9TEoDezMqej+N8sz/WwxCkk3ZZEaxxsPUZ7N+bDL/TF4ntY192oioi4Rh/wbA==",
                            PhoneNumber = "829-625-7316",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/317.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Filiberto.Crist"
                        },
                        new
                        {
                            Id = 38,
                            AccessFailedCount = 0,
                            Address = "3477 Creola Drives, Bruenmouth, Argentina",
                            ConcurrencyStamp = "9d67faee-76f3-4e3f-bed2-9a5ea62ae19b",
                            CreatedAt = new DateTime(2024, 7, 1, 7, 10, 19, 800, DateTimeKind.Utc).AddTicks(5223),
                            Email = "Bethel_Armstrong@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Bethel",
                            LastName = "Armstrong",
                            LockoutEnabled = false,
                            NormalizedEmail = "BETHEL_ARMSTRONG@HOTMAIL.COM",
                            NormalizedUserName = "BETHEL_ARMSTRONG98",
                            PasswordHash = "AQAAAAIAAYagAAAAEF/3C3OQ3/B+PwX8V2K6ytkDpZwR09o9ORyyWFT1KJtz+cyOmCA+PO/vt9Ja5400MQ==",
                            PhoneNumber = "496-314-6005",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/1204.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Bethel_Armstrong98"
                        },
                        new
                        {
                            Id = 39,
                            AccessFailedCount = 0,
                            Address = "944 Hagenes Port, Port Elenora, Cambodia",
                            ConcurrencyStamp = "96876b6c-284e-47e6-a42d-4a09faa57f7e",
                            CreatedAt = new DateTime(2024, 7, 4, 7, 10, 19, 800, DateTimeKind.Utc).AddTicks(5395),
                            Email = "Mellie.Fadel@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Mellie",
                            LastName = "Fadel",
                            LockoutEnabled = false,
                            NormalizedEmail = "MELLIE.FADEL@GMAIL.COM",
                            NormalizedUserName = "MELLIE_FADEL91",
                            PasswordHash = "AQAAAAIAAYagAAAAENe60TH6PNA41VtvbkYM38vWYOtWtauwBrLW7/hpfK7fUxQPfuRGJtzV1535+VsStg==",
                            PhoneNumber = "924-170-3356",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/325.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Mellie_Fadel91"
                        },
                        new
                        {
                            Id = 40,
                            AccessFailedCount = 0,
                            Address = "681 Auer Hollow, Lake Rupertmouth, Kazakhstan",
                            ConcurrencyStamp = "d136c130-f129-4c1d-a066-60d0be6e0940",
                            CreatedAt = new DateTime(2024, 9, 25, 7, 10, 19, 800, DateTimeKind.Utc).AddTicks(5594),
                            Email = "Ben_West85@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Ben",
                            LastName = "West",
                            LockoutEnabled = false,
                            NormalizedEmail = "BEN_WEST85@YAHOO.COM",
                            NormalizedUserName = "BEN.WEST12",
                            PasswordHash = "AQAAAAIAAYagAAAAEE2MoLnSDAzxXnKhAX9ULbHKxeF1XydOAJBamyZQWJJ6UaySN0Fn3zESEobRgVAVSg==",
                            PhoneNumber = "617-541-6810",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/830.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Ben.West12"
                        });
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Variant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Variants", (string)null);
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.VariantValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VariantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VariantId");

                    b.ToTable("VariantValues", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Address", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.User", "User")
                        .WithMany("Addresses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.BannerDetail", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Banner", "Banner")
                        .WithMany("BannerDetails")
                        .HasForeignKey("BannerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManboShopAPI.Domain.Entities.Product", "Product")
                        .WithMany("BannerDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Banner");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Cart", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("User");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.CartItem", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Cart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManboShopAPI.Domain.Entities.ProductVariantValue", "ProductVariantValue")
                        .WithMany("CartItems")
                        .HasForeignKey("ProductVariantValueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("ProductVariantValue");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Category", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Category", "ParentCategory")
                        .WithMany("SubCategories")
                        .HasForeignKey("ParentCategoryId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.CouponCondition", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Coupon", "Coupon")
                        .WithMany("CouponConditions")
                        .HasForeignKey("CouponId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Coupon");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Favorite", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Product", "Product")
                        .WithMany("Favorites")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManboShopAPI.Domain.Entities.User", "User")
                        .WithMany("Favorites")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Feedback", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Product", "Product")
                        .WithMany("Feedbacks")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManboShopAPI.Domain.Entities.User", "User")
                        .WithMany("Feedbacks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.FeedbackLike", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Feedback", "Feedback")
                        .WithMany("FeedbackLikes")
                        .HasForeignKey("FeedbackId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ManboShopAPI.Domain.Entities.User", "User")
                        .WithMany("FeedbackLikes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Feedback");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.FeedbackReport", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Feedback", "Feedback")
                        .WithMany("FeedbackReports")
                        .HasForeignKey("FeedbackId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ManboShopAPI.Domain.Entities.User", "User")
                        .WithMany("FeedbackReports")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Feedback");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.NewsDetail", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.News", "News")
                        .WithMany("NewsDetails")
                        .HasForeignKey("NewsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManboShopAPI.Domain.Entities.Product", "Product")
                        .WithMany("NewsDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("News");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Order", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Coupon", null)
                        .WithMany("Orders")
                        .HasForeignKey("CouponId");

                    b.HasOne("ManboShopAPI.Domain.Entities.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("User");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.OrderDetail", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Coupon", null)
                        .WithMany("OrderDetails")
                        .HasForeignKey("CouponId");

                    b.HasOne("ManboShopAPI.Domain.Entities.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManboShopAPI.Domain.Entities.ProductVariantValue", "ProductVariantValue")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductVariantValueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("ProductVariantValue");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Product", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ManboShopAPI.Domain.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Brand");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.ProductAttributeValue", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Attributes", "Attribute")
                        .WithMany("ProductAttributeValues")
                        .HasForeignKey("AttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManboShopAPI.Domain.Entities.Product", "Product")
                        .WithMany("ProductAttributeValues")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attribute");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.ProductImage", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Product", "Product")
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.ProductVariantValue", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Product", "Product")
                        .WithMany("ProductVariantValues")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.VariantValue", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Variant", "Variant")
                        .WithMany("VariantValues")
                        .HasForeignKey("VariantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Variant");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManboShopAPI.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Attributes", b =>
                {
                    b.Navigation("ProductAttributeValues");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Banner", b =>
                {
                    b.Navigation("BannerDetails");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Brand", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Cart", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Category", b =>
                {
                    b.Navigation("Products");

                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Coupon", b =>
                {
                    b.Navigation("CouponConditions");

                    b.Navigation("OrderDetails");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Feedback", b =>
                {
                    b.Navigation("FeedbackLikes");

                    b.Navigation("FeedbackReports");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.News", b =>
                {
                    b.Navigation("NewsDetails");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Product", b =>
                {
                    b.Navigation("BannerDetails");

                    b.Navigation("Favorites");

                    b.Navigation("Feedbacks");

                    b.Navigation("NewsDetails");

                    b.Navigation("ProductAttributeValues");

                    b.Navigation("ProductImages");

                    b.Navigation("ProductVariantValues");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.ProductVariantValue", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.User", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Favorites");

                    b.Navigation("FeedbackLikes");

                    b.Navigation("FeedbackReports");

                    b.Navigation("Feedbacks");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Variant", b =>
                {
                    b.Navigation("VariantValues");
                });
#pragma warning restore 612, 618
        }
    }
}
