// <auto-generated />
using System;
using ManboShopAPI.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ManboShopAPI.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241225062651_fix relationship user and cart")]
    partial class fixrelationshipuserandcart
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AreaOrColonyOrStreetOrSectorOrVillage")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("BuildingOrCompanyOrApartment")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FlatOrHouse")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PinCode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Banner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Banners");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.BannerDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BannerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BannerId");

                    b.HasIndex("ProductId");

                    b.ToTable("BannerDetails");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Brands");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 12, 25, 6, 26, 50, 584, DateTimeKind.Utc).AddTicks(8955),
                            ImageUrl = "https://example.com/images/nike.jpg",
                            Name = "Nike"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 12, 25, 6, 26, 50, 584, DateTimeKind.Utc).AddTicks(9551),
                            ImageUrl = "https://example.com/images/adidas.jpg",
                            Name = "Adidas"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 12, 25, 6, 26, 50, 584, DateTimeKind.Utc).AddTicks(9553),
                            ImageUrl = "https://example.com/images/gucci.jpg",
                            Name = "Gucci"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2024, 12, 25, 6, 26, 50, 584, DateTimeKind.Utc).AddTicks(9555),
                            ImageUrl = "https://example.com/images/louis-vuitton.jpg",
                            Name = "Louis Vuitton"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2024, 12, 25, 6, 26, 50, 584, DateTimeKind.Utc).AddTicks(9556),
                            ImageUrl = "https://example.com/images/zara.jpg",
                            Name = "Zara"
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2024, 12, 25, 6, 26, 50, 584, DateTimeKind.Utc).AddTicks(9559),
                            ImageUrl = "https://example.com/images/h&m.jpg",
                            Name = "H&M"
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2024, 12, 25, 6, 26, 50, 584, DateTimeKind.Utc).AddTicks(9561),
                            ImageUrl = "https://example.com/images/chanel.jpg",
                            Name = "Chanel"
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2024, 12, 25, 6, 26, 50, 584, DateTimeKind.Utc).AddTicks(9562),
                            ImageUrl = "https://example.com/images/prada.jpg",
                            Name = "Prada"
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2024, 12, 25, 6, 26, 50, 584, DateTimeKind.Utc).AddTicks(9563),
                            ImageUrl = "https://example.com/images/versace.jpg",
                            Name = "Versace"
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2024, 12, 25, 6, 26, 50, 584, DateTimeKind.Utc).AddTicks(9564),
                            ImageUrl = "https://example.com/images/burberry.jpg",
                            Name = "Burberry"
                        },
                        new
                        {
                            Id = 11,
                            CreatedAt = new DateTime(2024, 12, 25, 6, 26, 50, 584, DateTimeKind.Utc).AddTicks(9566),
                            ImageUrl = "https://example.com/images/dior.jpg",
                            Name = "Dior"
                        },
                        new
                        {
                            Id = 12,
                            CreatedAt = new DateTime(2024, 12, 25, 6, 26, 50, 584, DateTimeKind.Utc).AddTicks(9567),
                            ImageUrl = "https://example.com/images/calvin-klein.jpg",
                            Name = "Calvin Klein"
                        },
                        new
                        {
                            Id = 13,
                            CreatedAt = new DateTime(2024, 12, 25, 6, 26, 50, 584, DateTimeKind.Utc).AddTicks(9568),
                            ImageUrl = "https://example.com/images/tommy-hilfiger.jpg",
                            Name = "Tommy Hilfiger"
                        },
                        new
                        {
                            Id = 14,
                            CreatedAt = new DateTime(2024, 12, 25, 6, 26, 50, 584, DateTimeKind.Utc).AddTicks(9569),
                            ImageUrl = "https://example.com/images/levis.jpg",
                            Name = "Levi's"
                        },
                        new
                        {
                            Id = 15,
                            CreatedAt = new DateTime(2024, 12, 25, 6, 26, 50, 584, DateTimeKind.Utc).AddTicks(9570),
                            ImageUrl = "https://example.com/images/uniqlo.jpg",
                            Name = "Uniqlo"
                        },
                        new
                        {
                            Id = 16,
                            CreatedAt = new DateTime(2024, 12, 25, 6, 26, 50, 584, DateTimeKind.Utc).AddTicks(9571),
                            ImageUrl = "https://example.com/images/lacoste.jpg",
                            Name = "Lacoste"
                        },
                        new
                        {
                            Id = 17,
                            CreatedAt = new DateTime(2024, 12, 25, 6, 26, 50, 584, DateTimeKind.Utc).AddTicks(9572),
                            ImageUrl = "https://example.com/images/the-north-face.jpg",
                            Name = "The North Face"
                        },
                        new
                        {
                            Id = 18,
                            CreatedAt = new DateTime(2024, 12, 25, 6, 26, 50, 584, DateTimeKind.Utc).AddTicks(9574),
                            ImageUrl = "https://example.com/images/ralph-lauren.jpg",
                            Name = "Ralph Lauren"
                        },
                        new
                        {
                            Id = 19,
                            CreatedAt = new DateTime(2024, 12, 25, 6, 26, 50, 584, DateTimeKind.Utc).AddTicks(9575),
                            ImageUrl = "https://example.com/images/puma.jpg",
                            Name = "Puma"
                        },
                        new
                        {
                            Id = 20,
                            CreatedAt = new DateTime(2024, 12, 25, 6, 26, 50, 584, DateTimeKind.Utc).AddTicks(9576),
                            ImageUrl = "https://example.com/images/hugo-boss.jpg",
                            Name = "Hugo Boss"
                        },
                        new
                        {
                            Id = 21,
                            CreatedAt = new DateTime(2024, 12, 25, 6, 26, 50, 584, DateTimeKind.Utc).AddTicks(9577),
                            ImageUrl = "https://example.com/images/armani.jpg",
                            Name = "Armani"
                        },
                        new
                        {
                            Id = 22,
                            CreatedAt = new DateTime(2024, 12, 25, 6, 26, 50, 584, DateTimeKind.Utc).AddTicks(9578),
                            ImageUrl = "https://example.com/images/balenciaga.jpg",
                            Name = "Balenciaga"
                        },
                        new
                        {
                            Id = 23,
                            CreatedAt = new DateTime(2024, 12, 25, 6, 26, 50, 584, DateTimeKind.Utc).AddTicks(9579),
                            ImageUrl = "https://example.com/images/fendi.jpg",
                            Name = "Fendi"
                        },
                        new
                        {
                            Id = 24,
                            CreatedAt = new DateTime(2024, 12, 25, 6, 26, 50, 584, DateTimeKind.Utc).AddTicks(9596),
                            ImageUrl = "https://example.com/images/givenchy.jpg",
                            Name = "Givenchy"
                        },
                        new
                        {
                            Id = 25,
                            CreatedAt = new DateTime(2024, 12, 25, 6, 26, 50, 584, DateTimeKind.Utc).AddTicks(9597),
                            ImageUrl = "https://example.com/images/hermes.jpg",
                            Name = "Hermès"
                        },
                        new
                        {
                            Id = 26,
                            CreatedAt = new DateTime(2024, 12, 25, 6, 26, 50, 584, DateTimeKind.Utc).AddTicks(9598),
                            ImageUrl = "https://example.com/images/salvatore-ferragamo.jpg",
                            Name = "Salvatore Ferragamo"
                        },
                        new
                        {
                            Id = 27,
                            CreatedAt = new DateTime(2024, 12, 25, 6, 26, 50, 584, DateTimeKind.Utc).AddTicks(9599),
                            ImageUrl = "https://example.com/images/valentino.jpg",
                            Name = "Valentino"
                        },
                        new
                        {
                            Id = 28,
                            CreatedAt = new DateTime(2024, 12, 25, 6, 26, 50, 584, DateTimeKind.Utc).AddTicks(9727),
                            ImageUrl = "https://example.com/images/dolce-gabbana.jpg",
                            Name = "Dolce & Gabbana"
                        },
                        new
                        {
                            Id = 29,
                            CreatedAt = new DateTime(2024, 12, 25, 6, 26, 50, 584, DateTimeKind.Utc).AddTicks(9729),
                            ImageUrl = "https://example.com/images/gap.jpg",
                            Name = "Gap"
                        },
                        new
                        {
                            Id = 30,
                            CreatedAt = new DateTime(2024, 12, 25, 6, 26, 50, 584, DateTimeKind.Utc).AddTicks(9742),
                            ImageUrl = "https://example.com/images/forever21.jpg",
                            Name = "Forever 21"
                        },
                        new
                        {
                            Id = 31,
                            CreatedAt = new DateTime(2024, 12, 25, 6, 26, 50, 584, DateTimeKind.Utc).AddTicks(9743),
                            ImageUrl = "https://example.com/images/new-balance.jpg",
                            Name = "New Balance"
                        },
                        new
                        {
                            Id = 32,
                            CreatedAt = new DateTime(2024, 12, 25, 6, 26, 50, 584, DateTimeKind.Utc).AddTicks(9744),
                            ImageUrl = "https://example.com/images/vans.jpg",
                            Name = "Vans"
                        },
                        new
                        {
                            Id = 33,
                            CreatedAt = new DateTime(2024, 12, 25, 6, 26, 50, 584, DateTimeKind.Utc).AddTicks(9745),
                            ImageUrl = "https://example.com/images/converse.jpg",
                            Name = "Converse"
                        },
                        new
                        {
                            Id = 34,
                            CreatedAt = new DateTime(2024, 12, 25, 6, 26, 50, 584, DateTimeKind.Utc).AddTicks(9749),
                            ImageUrl = "https://example.com/images/under-armour.jpg",
                            Name = "Under Armour"
                        },
                        new
                        {
                            Id = 35,
                            CreatedAt = new DateTime(2024, 12, 25, 6, 26, 50, 584, DateTimeKind.Utc).AddTicks(9750),
                            ImageUrl = "https://example.com/images/reebok.jpg",
                            Name = "Reebok"
                        },
                        new
                        {
                            Id = 36,
                            CreatedAt = new DateTime(2024, 12, 25, 6, 26, 50, 584, DateTimeKind.Utc).AddTicks(9751),
                            ImageUrl = "https://example.com/images/coach.jpg",
                            Name = "Coach"
                        },
                        new
                        {
                            Id = 37,
                            CreatedAt = new DateTime(2024, 12, 25, 6, 26, 50, 584, DateTimeKind.Utc).AddTicks(9752),
                            ImageUrl = "https://example.com/images/kate-spade.jpg",
                            Name = "Kate Spade"
                        },
                        new
                        {
                            Id = 38,
                            CreatedAt = new DateTime(2024, 12, 25, 6, 26, 50, 584, DateTimeKind.Utc).AddTicks(9753),
                            ImageUrl = "https://example.com/images/michael-kors.jpg",
                            Name = "Michael Kors"
                        },
                        new
                        {
                            Id = 39,
                            CreatedAt = new DateTime(2024, 12, 25, 6, 26, 50, 584, DateTimeKind.Utc).AddTicks(9754),
                            ImageUrl = "https://example.com/images/bally.jpg",
                            Name = "Bally"
                        },
                        new
                        {
                            Id = 40,
                            CreatedAt = new DateTime(2024, 12, 25, 6, 26, 50, 584, DateTimeKind.Utc).AddTicks(9755),
                            ImageUrl = "https://example.com/images/guess.jpg",
                            Name = "Guess"
                        });
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.CartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("ProductId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 12, 25, 6, 26, 48, 39, DateTimeKind.Utc).AddTicks(7031),
                            ImageUrl = "https://example.com/images/men-clothing.jpg",
                            Name = "Men's Clothing"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 12, 25, 6, 26, 48, 39, DateTimeKind.Utc).AddTicks(7818),
                            ImageUrl = "https://example.com/images/women-clothing.jpg",
                            Name = "Women's Clothing"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 12, 25, 6, 26, 48, 39, DateTimeKind.Utc).AddTicks(7821),
                            ImageUrl = "https://example.com/images/children-clothing.jpg",
                            Name = "Children's Clothing"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2024, 12, 25, 6, 26, 48, 39, DateTimeKind.Utc).AddTicks(7822),
                            ImageUrl = "https://example.com/images/shoes.jpg",
                            Name = "Shoes"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2024, 12, 25, 6, 26, 48, 39, DateTimeKind.Utc).AddTicks(7823),
                            ImageUrl = "https://example.com/images/bags.jpg",
                            Name = "Bags"
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2024, 12, 25, 6, 26, 48, 39, DateTimeKind.Utc).AddTicks(7829),
                            ImageUrl = "https://example.com/images/accessories.jpg",
                            Name = "Accessories"
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2024, 12, 25, 6, 26, 48, 39, DateTimeKind.Utc).AddTicks(7830),
                            ImageUrl = "https://example.com/images/watches.jpg",
                            Name = "Watches"
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2024, 12, 25, 6, 26, 48, 39, DateTimeKind.Utc).AddTicks(7831),
                            ImageUrl = "https://example.com/images/sportswear.jpg",
                            Name = "Sportswear"
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2024, 12, 25, 6, 26, 48, 39, DateTimeKind.Utc).AddTicks(7832),
                            ImageUrl = "https://example.com/images/swimwear.jpg",
                            Name = "Swimwear"
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2024, 12, 25, 6, 26, 48, 39, DateTimeKind.Utc).AddTicks(7834),
                            ImageUrl = "https://example.com/images/formal-wear.jpg",
                            Name = "Formal Wear"
                        },
                        new
                        {
                            Id = 11,
                            CreatedAt = new DateTime(2024, 12, 25, 6, 26, 48, 39, DateTimeKind.Utc).AddTicks(7835),
                            ImageUrl = "https://example.com/images/casual-wear.jpg",
                            Name = "Casual Wear"
                        },
                        new
                        {
                            Id = 12,
                            CreatedAt = new DateTime(2024, 12, 25, 6, 26, 48, 39, DateTimeKind.Utc).AddTicks(7836),
                            ImageUrl = "https://example.com/images/t-shirts.jpg",
                            Name = "T-Shirts"
                        },
                        new
                        {
                            Id = 13,
                            CreatedAt = new DateTime(2024, 12, 25, 6, 26, 48, 39, DateTimeKind.Utc).AddTicks(7837),
                            ImageUrl = "https://example.com/images/jeans.jpg",
                            Name = "Jeans"
                        },
                        new
                        {
                            Id = 14,
                            CreatedAt = new DateTime(2024, 12, 25, 6, 26, 48, 39, DateTimeKind.Utc).AddTicks(7838),
                            ImageUrl = "https://example.com/images/jackets-coats.jpg",
                            Name = "Jackets & Coats"
                        },
                        new
                        {
                            Id = 15,
                            CreatedAt = new DateTime(2024, 12, 25, 6, 26, 48, 39, DateTimeKind.Utc).AddTicks(7839),
                            ImageUrl = "https://example.com/images/hats-caps.jpg",
                            Name = "Hats & Caps"
                        },
                        new
                        {
                            Id = 16,
                            CreatedAt = new DateTime(2024, 12, 25, 6, 26, 48, 39, DateTimeKind.Utc).AddTicks(7840),
                            ImageUrl = "https://example.com/images/scarves.jpg",
                            Name = "Scarves"
                        },
                        new
                        {
                            Id = 17,
                            CreatedAt = new DateTime(2024, 12, 25, 6, 26, 48, 39, DateTimeKind.Utc).AddTicks(7841),
                            ImageUrl = "https://example.com/images/sunglasses.jpg",
                            Name = "Sunglasses"
                        },
                        new
                        {
                            Id = 18,
                            CreatedAt = new DateTime(2024, 12, 25, 6, 26, 48, 39, DateTimeKind.Utc).AddTicks(7843),
                            ImageUrl = "https://example.com/images/belts.jpg",
                            Name = "Belts"
                        },
                        new
                        {
                            Id = 19,
                            CreatedAt = new DateTime(2024, 12, 25, 6, 26, 48, 39, DateTimeKind.Utc).AddTicks(7844),
                            ImageUrl = "https://example.com/images/undergarments.jpg",
                            Name = "Undergarments"
                        },
                        new
                        {
                            Id = 20,
                            CreatedAt = new DateTime(2024, 12, 25, 6, 26, 48, 39, DateTimeKind.Utc).AddTicks(7846),
                            ImageUrl = "https://example.com/images/sports-shoes.jpg",
                            Name = "Sports Shoes"
                        },
                        new
                        {
                            Id = 21,
                            CreatedAt = new DateTime(2024, 12, 25, 6, 26, 48, 39, DateTimeKind.Utc).AddTicks(7847),
                            ImageUrl = "https://example.com/images/boots.jpg",
                            Name = "Boots"
                        },
                        new
                        {
                            Id = 22,
                            CreatedAt = new DateTime(2024, 12, 25, 6, 26, 48, 39, DateTimeKind.Utc).AddTicks(7848),
                            ImageUrl = "https://example.com/images/high-heels.jpg",
                            Name = "High Heels"
                        },
                        new
                        {
                            Id = 23,
                            CreatedAt = new DateTime(2024, 12, 25, 6, 26, 48, 39, DateTimeKind.Utc).AddTicks(7849),
                            ImageUrl = "https://example.com/images/sneakers.jpg",
                            Name = "Sneakers"
                        },
                        new
                        {
                            Id = 24,
                            CreatedAt = new DateTime(2024, 12, 25, 6, 26, 48, 39, DateTimeKind.Utc).AddTicks(7850),
                            ImageUrl = "https://example.com/images/suits.jpg",
                            Name = "Suits"
                        },
                        new
                        {
                            Id = 25,
                            CreatedAt = new DateTime(2024, 12, 25, 6, 26, 48, 39, DateTimeKind.Utc).AddTicks(7851),
                            ImageUrl = "https://example.com/images/dresses.jpg",
                            Name = "Dresses"
                        },
                        new
                        {
                            Id = 26,
                            CreatedAt = new DateTime(2024, 12, 25, 6, 26, 48, 39, DateTimeKind.Utc).AddTicks(7852),
                            ImageUrl = "https://example.com/images/blouses.jpg",
                            Name = "Blouses"
                        },
                        new
                        {
                            Id = 27,
                            CreatedAt = new DateTime(2024, 12, 25, 6, 26, 48, 39, DateTimeKind.Utc).AddTicks(7853),
                            ImageUrl = "https://example.com/images/skirts.jpg",
                            Name = "Skirts"
                        },
                        new
                        {
                            Id = 28,
                            CreatedAt = new DateTime(2024, 12, 25, 6, 26, 48, 39, DateTimeKind.Utc).AddTicks(7854),
                            ImageUrl = "https://example.com/images/shorts.jpg",
                            Name = "Shorts"
                        },
                        new
                        {
                            Id = 29,
                            CreatedAt = new DateTime(2024, 12, 25, 6, 26, 48, 39, DateTimeKind.Utc).AddTicks(7855),
                            ImageUrl = "https://example.com/images/pajamas.jpg",
                            Name = "Pajamas"
                        },
                        new
                        {
                            Id = 30,
                            CreatedAt = new DateTime(2024, 12, 25, 6, 26, 48, 39, DateTimeKind.Utc).AddTicks(7856),
                            ImageUrl = "https://example.com/images/outerwear.jpg",
                            Name = "Outerwear"
                        },
                        new
                        {
                            Id = 31,
                            CreatedAt = new DateTime(2024, 12, 25, 6, 26, 48, 39, DateTimeKind.Utc).AddTicks(7857),
                            ImageUrl = "https://example.com/images/activewear.jpg",
                            Name = "Activewear"
                        },
                        new
                        {
                            Id = 32,
                            CreatedAt = new DateTime(2024, 12, 25, 6, 26, 48, 39, DateTimeKind.Utc).AddTicks(7858),
                            ImageUrl = "https://example.com/images/raincoats.jpg",
                            Name = "Raincoats"
                        },
                        new
                        {
                            Id = 33,
                            CreatedAt = new DateTime(2024, 12, 25, 6, 26, 48, 39, DateTimeKind.Utc).AddTicks(7859),
                            ImageUrl = "https://example.com/images/cardigans.jpg",
                            Name = "Cardigans"
                        },
                        new
                        {
                            Id = 34,
                            CreatedAt = new DateTime(2024, 12, 25, 6, 26, 48, 39, DateTimeKind.Utc).AddTicks(7861),
                            ImageUrl = "https://example.com/images/sweaters.jpg",
                            Name = "Sweaters"
                        },
                        new
                        {
                            Id = 35,
                            CreatedAt = new DateTime(2024, 12, 25, 6, 26, 48, 39, DateTimeKind.Utc).AddTicks(7862),
                            ImageUrl = "https://example.com/images/leggings.jpg",
                            Name = "Leggings"
                        },
                        new
                        {
                            Id = 36,
                            CreatedAt = new DateTime(2024, 12, 25, 6, 26, 48, 39, DateTimeKind.Utc).AddTicks(7863),
                            ImageUrl = "https://example.com/images/tracksuits.jpg",
                            Name = "Tracksuits"
                        },
                        new
                        {
                            Id = 37,
                            CreatedAt = new DateTime(2024, 12, 25, 6, 26, 48, 39, DateTimeKind.Utc).AddTicks(7864),
                            ImageUrl = "https://example.com/images/gloves.jpg",
                            Name = "Gloves"
                        },
                        new
                        {
                            Id = 38,
                            CreatedAt = new DateTime(2024, 12, 25, 6, 26, 48, 39, DateTimeKind.Utc).AddTicks(7865),
                            ImageUrl = "https://example.com/images/socks.jpg",
                            Name = "Socks"
                        },
                        new
                        {
                            Id = 39,
                            CreatedAt = new DateTime(2024, 12, 25, 6, 26, 48, 39, DateTimeKind.Utc).AddTicks(7866),
                            ImageUrl = "https://example.com/images/loungewear.jpg",
                            Name = "Loungewear"
                        },
                        new
                        {
                            Id = 40,
                            CreatedAt = new DateTime(2024, 12, 25, 6, 26, 48, 39, DateTimeKind.Utc).AddTicks(7867),
                            ImageUrl = "https://example.com/images/winter-wear.jpg",
                            Name = "Winter Wear"
                        });
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Coupon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CurrentUsages")
                        .HasColumnType("int");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("MaxUsages")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Coupons");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.CouponCondition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Attribute")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("CouponId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DiscountAmount")
                        .HasColumnType("int");

                    b.Property<string>("Operator")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Value")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CouponId");

                    b.ToTable("CouponConditions");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Favorite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Favorites");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Star")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.News", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("News");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.NewsDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("NewsId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("NewsId");

                    b.HasIndex("ProductId");

                    b.ToTable("NewsDetails");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CouponId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("SessionId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CouponId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.OrderDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CouponId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CouponId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BrandId")
                        .HasColumnType("int");

                    b.Property<int>("BuyTurn")
                        .HasColumnType("int");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("OldPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("Specification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.ProductImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductImages");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfilePictureUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            Address = "280 Melba Wells, Salmaberg, British Indian Ocean Territory (Chagos Archipelago)",
                            ConcurrencyStamp = "fe551945-2459-41d9-8cbb-4f50d8af5789",
                            CreatedAt = new DateTime(2024, 4, 21, 6, 26, 48, 105, DateTimeKind.Utc).AddTicks(8713),
                            Email = "Eunice.Gerlach@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Eunice",
                            LastName = "Gerlach",
                            LockoutEnabled = false,
                            NormalizedEmail = "EUNICE.GERLACH@YAHOO.COM",
                            NormalizedUserName = "EUNICE_GERLACH42",
                            PasswordHash = "AQAAAAIAAYagAAAAEA/Tc+qWYVS97P+uJLhy/M+PRNavoLy9NWVyCV8CTLnD9ySfDp4XQ5G3BcMmchZeAQ==",
                            PhoneNumber = "517-265-5701",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/1010.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Eunice_Gerlach42"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            Address = "12173 Phoebe Via, Schadenbury, Tokelau",
                            ConcurrencyStamp = "b944a4e2-1e6e-4215-ae62-31f770198ba9",
                            CreatedAt = new DateTime(2024, 8, 9, 6, 26, 48, 107, DateTimeKind.Utc).AddTicks(3251),
                            Email = "Shyanne79@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Shyanne",
                            LastName = "Johns",
                            LockoutEnabled = false,
                            NormalizedEmail = "SHYANNE79@GMAIL.COM",
                            NormalizedUserName = "SHYANNE.JOHNS",
                            PasswordHash = "AQAAAAIAAYagAAAAEK61uR0xsQ2/54LZ1R/QdIBHimt9brTQfEvHktNCf6iLFcTAIPA2d7u/iOx5Cod8Gw==",
                            PhoneNumber = "919-276-4631",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/247.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Shyanne.Johns"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            Address = "8629 Anais Row, Robintown, Ethiopia",
                            ConcurrencyStamp = "8165ceb5-edbe-450a-acc8-14ef82b59ef0",
                            CreatedAt = new DateTime(2024, 5, 14, 6, 26, 48, 107, DateTimeKind.Utc).AddTicks(3581),
                            Email = "Davon_Harvey84@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Davon",
                            LastName = "Harvey",
                            LockoutEnabled = false,
                            NormalizedEmail = "DAVON_HARVEY84@GMAIL.COM",
                            NormalizedUserName = "DAVON_HARVEY",
                            PasswordHash = "AQAAAAIAAYagAAAAEOqnDgBgb4QhY0LmfXFYU/xwIch/L5ybgZDYpWfqtGY8Dqb6XfptLDIhs6rWmu5xww==",
                            PhoneNumber = "874-676-4440",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/2.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Davon_Harvey"
                        },
                        new
                        {
                            Id = 4,
                            AccessFailedCount = 0,
                            Address = "10381 Towne Crest, New Joannyville, Guinea-Bissau",
                            ConcurrencyStamp = "862f26d6-b658-4e62-b5e2-fb8fa8d84367",
                            CreatedAt = new DateTime(2024, 5, 4, 6, 26, 48, 107, DateTimeKind.Utc).AddTicks(3910),
                            Email = "Coby61@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Coby",
                            LastName = "Torp",
                            LockoutEnabled = false,
                            NormalizedEmail = "COBY61@GMAIL.COM",
                            NormalizedUserName = "COBY.TORP",
                            PasswordHash = "AQAAAAIAAYagAAAAEBEXHNZoOuqTeuv2b2QH/6MpOWATJdMPxt6VO/+4eYRLG+kdRyjz/C6+lTdyzdhfMg==",
                            PhoneNumber = "341-927-1203",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/168.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Coby.Torp"
                        },
                        new
                        {
                            Id = 5,
                            AccessFailedCount = 0,
                            Address = "28907 Deven Run, North Miketown, Moldova",
                            ConcurrencyStamp = "c5b9d148-6326-4b80-8180-fb00c1478bfd",
                            CreatedAt = new DateTime(2024, 9, 23, 6, 26, 48, 107, DateTimeKind.Utc).AddTicks(5331),
                            Email = "Stan_Pfannerstill@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Stan",
                            LastName = "Pfannerstill",
                            LockoutEnabled = false,
                            NormalizedEmail = "STAN_PFANNERSTILL@HOTMAIL.COM",
                            NormalizedUserName = "STAN_PFANNERSTILL",
                            PasswordHash = "AQAAAAIAAYagAAAAEAfF1dSExp2wryV/izQxTYG0XTZ5g5NtMqU8xj7C5dlxxvrq+1+iuXW9xkcyInrX4g==",
                            PhoneNumber = "967-657-0262",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/504.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Stan_Pfannerstill"
                        },
                        new
                        {
                            Id = 6,
                            AccessFailedCount = 0,
                            Address = "592 Mafalda Ville, North Jeramyshire, Cayman Islands",
                            ConcurrencyStamp = "1822573e-75f6-4ad1-a5f0-34053cd25a9f",
                            CreatedAt = new DateTime(2024, 2, 4, 6, 26, 48, 107, DateTimeKind.Utc).AddTicks(5694),
                            Email = "Odell43@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Odell",
                            LastName = "Okuneva",
                            LockoutEnabled = false,
                            NormalizedEmail = "ODELL43@GMAIL.COM",
                            NormalizedUserName = "ODELL_OKUNEVA2",
                            PasswordHash = "AQAAAAIAAYagAAAAEIyNaDjgentCGqJgLRM72Qao7aQYdw9wOWfZdHO/dm1z2/UaRtfUwE1DXNoE0tuQfA==",
                            PhoneNumber = "807-419-7022",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/258.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Odell_Okuneva2"
                        },
                        new
                        {
                            Id = 7,
                            AccessFailedCount = 0,
                            Address = "6247 Auer Key, West Mckenzie, United States Minor Outlying Islands",
                            ConcurrencyStamp = "8f683aea-51fe-479c-88ad-2940bbb48800",
                            CreatedAt = new DateTime(2024, 2, 19, 6, 26, 48, 107, DateTimeKind.Utc).AddTicks(5926),
                            Email = "Rod_Volkman@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Rod",
                            LastName = "Volkman",
                            LockoutEnabled = false,
                            NormalizedEmail = "ROD_VOLKMAN@YAHOO.COM",
                            NormalizedUserName = "ROD_VOLKMAN",
                            PasswordHash = "AQAAAAIAAYagAAAAEIhZTl/EoYbdvnxpvQOZdI12b7jAT5yLRzbEK0vmOHAYlgd3knUsvAevfLWVbW4wPg==",
                            PhoneNumber = "384-918-6464",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/741.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Rod_Volkman"
                        },
                        new
                        {
                            Id = 8,
                            AccessFailedCount = 0,
                            Address = "0357 Walsh Harbors, Domenicoshire, Belize",
                            ConcurrencyStamp = "3e78e779-55a9-494d-a9b9-403e5ea5d469",
                            CreatedAt = new DateTime(2024, 9, 1, 6, 26, 48, 107, DateTimeKind.Utc).AddTicks(6207),
                            Email = "May_Spinka97@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "May",
                            LastName = "Spinka",
                            LockoutEnabled = false,
                            NormalizedEmail = "MAY_SPINKA97@YAHOO.COM",
                            NormalizedUserName = "MAY9",
                            PasswordHash = "AQAAAAIAAYagAAAAEEiO0u9EKHZcveUXaxqxJuCgOor95rRVG6opHVX4RpFC0/vA6N6TwSN15sMAGYlwrQ==",
                            PhoneNumber = "660-874-2987",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/1074.jpg",
                            TwoFactorEnabled = false,
                            UserName = "May9"
                        },
                        new
                        {
                            Id = 9,
                            AccessFailedCount = 0,
                            Address = "628 Luettgen Inlet, North Ashley, Serbia",
                            ConcurrencyStamp = "e0966cd3-3a90-44ba-aa0e-f4d79b7177cd",
                            CreatedAt = new DateTime(2024, 10, 15, 6, 26, 48, 107, DateTimeKind.Utc).AddTicks(6439),
                            Email = "Yadira_Walker@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Yadira",
                            LastName = "Walker",
                            LockoutEnabled = false,
                            NormalizedEmail = "YADIRA_WALKER@GMAIL.COM",
                            NormalizedUserName = "YADIRA48",
                            PasswordHash = "AQAAAAIAAYagAAAAEHRe0Y46E4XYK4qETrb/g1IJfK2mQzS+DQodGOIr/iQU6AGoysuZw1b7RvvqVH8BFw==",
                            PhoneNumber = "550-958-5705",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/659.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Yadira48"
                        },
                        new
                        {
                            Id = 10,
                            AccessFailedCount = 0,
                            Address = "04117 Treva Cliffs, Rodriguezburgh, Chad",
                            ConcurrencyStamp = "e89d3fe4-735d-4880-becd-99124d6546de",
                            CreatedAt = new DateTime(2024, 12, 9, 6, 26, 48, 107, DateTimeKind.Utc).AddTicks(6694),
                            Email = "Elyssa_Spinka@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Elyssa",
                            LastName = "Spinka",
                            LockoutEnabled = false,
                            NormalizedEmail = "ELYSSA_SPINKA@GMAIL.COM",
                            NormalizedUserName = "ELYSSA.SPINKA",
                            PasswordHash = "AQAAAAIAAYagAAAAEAOdvOFwswJ7KFZ9Kvtqof95GH4AQPlbmuxKCfw+9W7QUZy0uMTNaW50a83yXSSirA==",
                            PhoneNumber = "615-941-3809",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/539.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Elyssa.Spinka"
                        },
                        new
                        {
                            Id = 11,
                            AccessFailedCount = 0,
                            Address = "8462 Schroeder Radial, Wittingshire, Chile",
                            ConcurrencyStamp = "8ce4b1e8-c9d5-47c0-8ea4-c8bb950a7b8c",
                            CreatedAt = new DateTime(2024, 11, 22, 6, 26, 48, 107, DateTimeKind.Utc).AddTicks(6930),
                            Email = "Elwyn.Ritchie81@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Elwyn",
                            LastName = "Ritchie",
                            LockoutEnabled = false,
                            NormalizedEmail = "ELWYN.RITCHIE81@GMAIL.COM",
                            NormalizedUserName = "ELWYN.RITCHIE70",
                            PasswordHash = "AQAAAAIAAYagAAAAECVUedIqrt9La9phCGlyVgJ1mCI9eIjnzl5m0kJbFNVXCkMCuW/9R8QuZ38nOgd5EQ==",
                            PhoneNumber = "869-439-5541",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/882.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Elwyn.Ritchie70"
                        },
                        new
                        {
                            Id = 12,
                            AccessFailedCount = 0,
                            Address = "07555 Parker Skyway, New Clementview, Tuvalu",
                            ConcurrencyStamp = "2d36721f-ad47-41f5-81c3-4b245a15a567",
                            CreatedAt = new DateTime(2023, 12, 30, 6, 26, 48, 107, DateTimeKind.Utc).AddTicks(7192),
                            Email = "Parker73@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Parker",
                            LastName = "Metz",
                            LockoutEnabled = false,
                            NormalizedEmail = "PARKER73@GMAIL.COM",
                            NormalizedUserName = "PARKER.METZ",
                            PasswordHash = "AQAAAAIAAYagAAAAELAaNpR/jjczH08ny5aanABOoou70L+gYVF6qZc4It3xJyAyM+77X530cDNDcOZ2Vw==",
                            PhoneNumber = "264-101-3459",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/721.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Parker.Metz"
                        },
                        new
                        {
                            Id = 13,
                            AccessFailedCount = 0,
                            Address = "45408 Krajcik Park, New Modestamouth, Slovenia",
                            ConcurrencyStamp = "00e00907-8410-43d6-946d-c517b6ec0ed2",
                            CreatedAt = new DateTime(2024, 2, 5, 6, 26, 48, 107, DateTimeKind.Utc).AddTicks(7434),
                            Email = "Lavinia81@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Lavinia",
                            LastName = "Armstrong",
                            LockoutEnabled = false,
                            NormalizedEmail = "LAVINIA81@YAHOO.COM",
                            NormalizedUserName = "LAVINIA52",
                            PasswordHash = "AQAAAAIAAYagAAAAECmPrGhQ6E3uf189xX00WzkIdB1cDlHp1coCBCBVEx3sZtVFdwSCSGtZO1TRxWqTJw==",
                            PhoneNumber = "410-494-4660",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/688.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Lavinia52"
                        },
                        new
                        {
                            Id = 14,
                            AccessFailedCount = 0,
                            Address = "97915 Lysanne Extension, Geovanyview, Kyrgyz Republic",
                            ConcurrencyStamp = "ba64e86e-ae30-4a71-a4f7-9e518d336159",
                            CreatedAt = new DateTime(2024, 11, 1, 6, 26, 48, 107, DateTimeKind.Utc).AddTicks(7696),
                            Email = "Jordyn_Blick81@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Jordyn",
                            LastName = "Blick",
                            LockoutEnabled = false,
                            NormalizedEmail = "JORDYN_BLICK81@GMAIL.COM",
                            NormalizedUserName = "JORDYN.BLICK5",
                            PasswordHash = "AQAAAAIAAYagAAAAEOMT9u6cwpEsoTitZzup1I2dq3Juzc11TG0SJejgF+whk3Fb5zUTkyuMNW8a0TtC7Q==",
                            PhoneNumber = "515-539-2955",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/183.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Jordyn.Blick5"
                        },
                        new
                        {
                            Id = 15,
                            AccessFailedCount = 0,
                            Address = "665 Toy Estate, Schusterborough, Democratic People's Republic of Korea",
                            ConcurrencyStamp = "ffe4dbe3-4a3a-4dd6-8c34-1eca89be9117",
                            CreatedAt = new DateTime(2024, 5, 23, 6, 26, 48, 107, DateTimeKind.Utc).AddTicks(7891),
                            Email = "Mallie77@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Mallie",
                            LastName = "Monahan",
                            LockoutEnabled = false,
                            NormalizedEmail = "MALLIE77@HOTMAIL.COM",
                            NormalizedUserName = "MALLIE.MONAHAN92",
                            PasswordHash = "AQAAAAIAAYagAAAAEMzKUGg2805uS8HoT9ooX0xoMU3D/kscweIg8QXExlPGeMnkhQFbA5uWTS/Od9rQtg==",
                            PhoneNumber = "585-664-8185",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/438.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Mallie.Monahan92"
                        },
                        new
                        {
                            Id = 16,
                            AccessFailedCount = 0,
                            Address = "49811 Breitenberg Ville, Lake Ceasar, Guadeloupe",
                            ConcurrencyStamp = "157167a3-16a2-4f35-acac-ac665cdf77a9",
                            CreatedAt = new DateTime(2024, 9, 21, 6, 26, 48, 107, DateTimeKind.Utc).AddTicks(8169),
                            Email = "Wallace61@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Wallace",
                            LastName = "Adams",
                            LockoutEnabled = false,
                            NormalizedEmail = "WALLACE61@GMAIL.COM",
                            NormalizedUserName = "WALLACE_ADAMS82",
                            PasswordHash = "AQAAAAIAAYagAAAAECIosBSlW2h4ek60KfmGjm9/0zen6v6fin9rpka4Rk/kL3E30TT6on6s3VPZP4ydmA==",
                            PhoneNumber = "234-195-3882",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/421.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Wallace_Adams82"
                        },
                        new
                        {
                            Id = 17,
                            AccessFailedCount = 0,
                            Address = "632 Emilie Parkway, Lake Charlieport, India",
                            ConcurrencyStamp = "d618614a-f5af-49c8-b44e-2c85a8f4cc28",
                            CreatedAt = new DateTime(2024, 12, 1, 6, 26, 48, 107, DateTimeKind.Utc).AddTicks(8420),
                            Email = "Lesly2@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Lesly",
                            LastName = "Ferry",
                            LockoutEnabled = false,
                            NormalizedEmail = "LESLY2@GMAIL.COM",
                            NormalizedUserName = "LESLY10",
                            PasswordHash = "AQAAAAIAAYagAAAAEHkwf6GdY+6jj191VKJ6nGNd+zZxzXnRU30zdpsPmos//1LNx1N0wu86f9SNdX+CxQ==",
                            PhoneNumber = "600-261-2518",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/987.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Lesly10"
                        },
                        new
                        {
                            Id = 18,
                            AccessFailedCount = 0,
                            Address = "055 Lang Trail, New Maddison, Cambodia",
                            ConcurrencyStamp = "090cfb2c-30ad-41dc-9497-834515dc64e6",
                            CreatedAt = new DateTime(2024, 9, 10, 6, 26, 48, 107, DateTimeKind.Utc).AddTicks(8677),
                            Email = "Donald18@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Donald",
                            LastName = "Mayer",
                            LockoutEnabled = false,
                            NormalizedEmail = "DONALD18@HOTMAIL.COM",
                            NormalizedUserName = "DONALD_MAYER25",
                            PasswordHash = "AQAAAAIAAYagAAAAEMTaa8QSyI6flVzMbdBgGmMBDQNQae6/0ECGSriYTBVkb8ypv4161fz4m0nAaTEzFw==",
                            PhoneNumber = "915-020-4793",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/308.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Donald_Mayer25"
                        },
                        new
                        {
                            Id = 19,
                            AccessFailedCount = 0,
                            Address = "4086 Murphy Corner, Kamrenview, Guinea",
                            ConcurrencyStamp = "f6116036-af05-49f0-a9e9-7576a65798ca",
                            CreatedAt = new DateTime(2024, 3, 6, 6, 26, 48, 107, DateTimeKind.Utc).AddTicks(8894),
                            Email = "Kira42@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Kira",
                            LastName = "Crona",
                            LockoutEnabled = false,
                            NormalizedEmail = "KIRA42@GMAIL.COM",
                            NormalizedUserName = "KIRA.CRONA13",
                            PasswordHash = "AQAAAAIAAYagAAAAEGdNMHUA42gD+9SCmHn0oSJkkBlEfdgHxu/XcqFTDM8uyQN+geetZCdqQHmtxPjjgA==",
                            PhoneNumber = "166-998-1883",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/683.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Kira.Crona13"
                        },
                        new
                        {
                            Id = 20,
                            AccessFailedCount = 0,
                            Address = "6484 Hodkiewicz Parks, New Vernahaven, Netherlands",
                            ConcurrencyStamp = "73be3264-6635-4e7c-9951-590b635f9629",
                            CreatedAt = new DateTime(2024, 6, 1, 6, 26, 48, 107, DateTimeKind.Utc).AddTicks(9135),
                            Email = "Addie.Schneider55@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Addie",
                            LastName = "Schneider",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADDIE.SCHNEIDER55@GMAIL.COM",
                            NormalizedUserName = "ADDIE.SCHNEIDER",
                            PasswordHash = "AQAAAAIAAYagAAAAEH4qVyEwuCi7OMkea78nAGxjWkzLG3ajIhXBULXhUHaz+OUfmEpevdjR/qteRB2CoA==",
                            PhoneNumber = "769-494-5169",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/187.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Addie.Schneider"
                        },
                        new
                        {
                            Id = 21,
                            AccessFailedCount = 0,
                            Address = "3712 Kunde Mountain, Rutherfordburgh, Serbia",
                            ConcurrencyStamp = "6ed825ba-98a1-4214-9d1b-80e59387c712",
                            CreatedAt = new DateTime(2024, 1, 2, 6, 26, 48, 107, DateTimeKind.Utc).AddTicks(9378),
                            Email = "Amber.Hills30@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Amber",
                            LastName = "Hills",
                            LockoutEnabled = false,
                            NormalizedEmail = "AMBER.HILLS30@YAHOO.COM",
                            NormalizedUserName = "AMBER_HILLS70",
                            PasswordHash = "AQAAAAIAAYagAAAAEDT4DMnCnzNVXBcMVA9GkKKb0F5b6tG6S3aTp+dhnZDqmKarE435zyWJbXN3E3TFGg==",
                            PhoneNumber = "891-874-7243",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/254.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Amber_Hills70"
                        },
                        new
                        {
                            Id = 22,
                            AccessFailedCount = 0,
                            Address = "6594 Eryn Throughway, Runteborough, Ireland",
                            ConcurrencyStamp = "8727aaf0-7c7f-4e14-a205-3f5e5415207a",
                            CreatedAt = new DateTime(2024, 11, 16, 6, 26, 48, 107, DateTimeKind.Utc).AddTicks(9588),
                            Email = "Sabryna1@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Sabryna",
                            LastName = "Mayert",
                            LockoutEnabled = false,
                            NormalizedEmail = "SABRYNA1@YAHOO.COM",
                            NormalizedUserName = "SABRYNA.MAYERT",
                            PasswordHash = "AQAAAAIAAYagAAAAEI5Z+EvIE92pUqMM+MX5GWXtoIyr4lw0dUaxQbToVK8L7Hrg/CtDvR8r0kkfR7knbA==",
                            PhoneNumber = "145-568-5594",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/847.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Sabryna.Mayert"
                        },
                        new
                        {
                            Id = 23,
                            AccessFailedCount = 0,
                            Address = "48239 Fidel Route, South Sierra, Albania",
                            ConcurrencyStamp = "2581291a-70f9-4bef-99ec-5b74364e8731",
                            CreatedAt = new DateTime(2024, 8, 26, 6, 26, 48, 107, DateTimeKind.Utc).AddTicks(9839),
                            Email = "Keon64@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Keon",
                            LastName = "Beatty",
                            LockoutEnabled = false,
                            NormalizedEmail = "KEON64@GMAIL.COM",
                            NormalizedUserName = "KEON_BEATTY54",
                            PasswordHash = "AQAAAAIAAYagAAAAEFYBuTwuUZ3GdloQuS4xlVWL7IxOLLa7HFWY6mzzVMjdwxDlO0ED2esPJvbNf2iYtA==",
                            PhoneNumber = "087-968-4398",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/62.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Keon_Beatty54"
                        },
                        new
                        {
                            Id = 24,
                            AccessFailedCount = 0,
                            Address = "7202 Prohaska Branch, Abernathyberg, Cuba",
                            ConcurrencyStamp = "2ea14285-808d-4e01-adb5-6660ef2caad0",
                            CreatedAt = new DateTime(2024, 8, 3, 6, 26, 48, 108, DateTimeKind.Utc).AddTicks(34),
                            Email = "Deven.Labadie@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Deven",
                            LastName = "Labadie",
                            LockoutEnabled = false,
                            NormalizedEmail = "DEVEN.LABADIE@HOTMAIL.COM",
                            NormalizedUserName = "DEVEN33",
                            PasswordHash = "AQAAAAIAAYagAAAAEEUG0xpdNZitZkztJ+YSYtEOUDHtqgpTbNTIwI+5hldJsmX5UbVF7d5abt+oZfGJ8w==",
                            PhoneNumber = "146-267-4660",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/191.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Deven33"
                        },
                        new
                        {
                            Id = 25,
                            AccessFailedCount = 0,
                            Address = "96645 Casper Forges, East Lailafort, China",
                            ConcurrencyStamp = "33e614b3-a04d-4cef-876d-e5e228328e5a",
                            CreatedAt = new DateTime(2024, 8, 1, 6, 26, 48, 108, DateTimeKind.Utc).AddTicks(337),
                            Email = "Tiffany_Ruecker40@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Tiffany",
                            LastName = "Ruecker",
                            LockoutEnabled = false,
                            NormalizedEmail = "TIFFANY_RUECKER40@HOTMAIL.COM",
                            NormalizedUserName = "TIFFANY_RUECKER73",
                            PasswordHash = "AQAAAAIAAYagAAAAELUdRcnSi2QWKBUt0wAQYC4GunJOMPSWJ84QOT4dYRGKrJhLZxkzmFotfxpkYZ5+aQ==",
                            PhoneNumber = "586-667-2187",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/806.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Tiffany_Ruecker73"
                        },
                        new
                        {
                            Id = 26,
                            AccessFailedCount = 0,
                            Address = "526 Jarrod Lights, Piperburgh, Myanmar",
                            ConcurrencyStamp = "5ef60792-0ef1-4c70-a8cb-a3c849a98a83",
                            CreatedAt = new DateTime(2024, 1, 23, 6, 26, 48, 108, DateTimeKind.Utc).AddTicks(630),
                            Email = "Josianne.Williamson@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Josianne",
                            LastName = "Williamson",
                            LockoutEnabled = false,
                            NormalizedEmail = "JOSIANNE.WILLIAMSON@YAHOO.COM",
                            NormalizedUserName = "JOSIANNE75",
                            PasswordHash = "AQAAAAIAAYagAAAAENoOs+UX6NTcM4qevd4Or6YAqhUxOECTy9njz0s5ERA0/oXXCE/D4mTfcBgrSSZREg==",
                            PhoneNumber = "123-861-3566",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/1202.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Josianne75"
                        },
                        new
                        {
                            Id = 27,
                            AccessFailedCount = 0,
                            Address = "46266 Huel Cape, North Marquise, Tajikistan",
                            ConcurrencyStamp = "c0bfa4d3-98c2-4571-824a-c76689c7c5eb",
                            CreatedAt = new DateTime(2024, 9, 9, 6, 26, 48, 108, DateTimeKind.Utc).AddTicks(875),
                            Email = "Schuyler38@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Schuyler",
                            LastName = "Howell",
                            LockoutEnabled = false,
                            NormalizedEmail = "SCHUYLER38@YAHOO.COM",
                            NormalizedUserName = "SCHUYLER_HOWELL92",
                            PasswordHash = "AQAAAAIAAYagAAAAECAkFEb2m8iMUUhcpXv0hDa1ZGUagXNcxzMreKOw2qOaOgT3XR+Ih0fiIcYXKQfF5w==",
                            PhoneNumber = "248-572-9117",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/821.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Schuyler_Howell92"
                        },
                        new
                        {
                            Id = 28,
                            AccessFailedCount = 0,
                            Address = "499 O'Conner Park, North Neomaview, Paraguay",
                            ConcurrencyStamp = "972eb63d-71bf-429f-8587-a9fa3719d35e",
                            CreatedAt = new DateTime(2024, 2, 17, 6, 26, 48, 108, DateTimeKind.Utc).AddTicks(1145),
                            Email = "Noble_Denesik@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Noble",
                            LastName = "Denesik",
                            LockoutEnabled = false,
                            NormalizedEmail = "NOBLE_DENESIK@GMAIL.COM",
                            NormalizedUserName = "NOBLE.DENESIK48",
                            PasswordHash = "AQAAAAIAAYagAAAAEAYekmzhP3aoH9PGPHNHM7+j6+WAbWw3ali51TuLR5jrTK8AFaV9mTqoXcL+QDx2Vg==",
                            PhoneNumber = "981-083-9374",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/64.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Noble.Denesik48"
                        },
                        new
                        {
                            Id = 29,
                            AccessFailedCount = 0,
                            Address = "09541 Julianne Roads, Hintzmouth, Saint Kitts and Nevis",
                            ConcurrencyStamp = "ce0701a2-477d-4d45-a298-7567a348750d",
                            CreatedAt = new DateTime(2024, 2, 16, 6, 26, 48, 108, DateTimeKind.Utc).AddTicks(1360),
                            Email = "Brock_Connelly17@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Brock",
                            LastName = "Connelly",
                            LockoutEnabled = false,
                            NormalizedEmail = "BROCK_CONNELLY17@HOTMAIL.COM",
                            NormalizedUserName = "BROCK_CONNELLY8",
                            PasswordHash = "AQAAAAIAAYagAAAAEHFO1jVcJIA4BnwNXbEzv9YzvNewl7JngbSX+hlv8JHKOdpBE7jGF+z1weEjT8/P4A==",
                            PhoneNumber = "055-619-4780",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/197.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Brock_Connelly8"
                        },
                        new
                        {
                            Id = 30,
                            AccessFailedCount = 0,
                            Address = "09585 Olin Ridge, West Rowlandmouth, Australia",
                            ConcurrencyStamp = "0ed69948-f730-49c5-b712-bb6df7af2911",
                            CreatedAt = new DateTime(2024, 6, 8, 6, 26, 48, 108, DateTimeKind.Utc).AddTicks(1608),
                            Email = "Wilson.Sipes72@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Wilson",
                            LastName = "Sipes",
                            LockoutEnabled = false,
                            NormalizedEmail = "WILSON.SIPES72@HOTMAIL.COM",
                            NormalizedUserName = "WILSON24",
                            PasswordHash = "AQAAAAIAAYagAAAAEDklD8JBCWTtJPjWTIj2gdlhrkw9ttMCN6HHoaseVKYsUwh88IBoEeJEYFRwFcyEnw==",
                            PhoneNumber = "673-154-7778",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/619.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Wilson24"
                        },
                        new
                        {
                            Id = 31,
                            AccessFailedCount = 0,
                            Address = "43378 Beer Roads, Farrellville, Jersey",
                            ConcurrencyStamp = "1c961236-e2e3-41ec-a381-07c03f4e4752",
                            CreatedAt = new DateTime(2024, 3, 15, 6, 26, 48, 108, DateTimeKind.Utc).AddTicks(1810),
                            Email = "Ward15@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Ward",
                            LastName = "Graham",
                            LockoutEnabled = false,
                            NormalizedEmail = "WARD15@GMAIL.COM",
                            NormalizedUserName = "WARD64",
                            PasswordHash = "AQAAAAIAAYagAAAAEDvAtAl3QVp2t0Cd1Qy4FGT3IvHuMDqegvTaGZwKGFFKZex177j6J3NUQRWXSM2A4w==",
                            PhoneNumber = "675-858-5764",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/1233.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Ward64"
                        },
                        new
                        {
                            Id = 32,
                            AccessFailedCount = 0,
                            Address = "75846 Ramona Garden, North Gracie, Ecuador",
                            ConcurrencyStamp = "78ac0443-f075-4f1b-a4bb-d598b7ca16e7",
                            CreatedAt = new DateTime(2024, 11, 30, 6, 26, 48, 108, DateTimeKind.Utc).AddTicks(2056),
                            Email = "Bianka_Kozey76@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Bianka",
                            LastName = "Kozey",
                            LockoutEnabled = false,
                            NormalizedEmail = "BIANKA_KOZEY76@GMAIL.COM",
                            NormalizedUserName = "BIANKA_KOZEY",
                            PasswordHash = "AQAAAAIAAYagAAAAECgyEHBaZqw/db6ZeyySlyFAXD58JgWUbRy/7xLK4CEA+QO5Od8iZwn7C88UBvGevQ==",
                            PhoneNumber = "788-684-7155",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/199.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Bianka_Kozey"
                        },
                        new
                        {
                            Id = 33,
                            AccessFailedCount = 0,
                            Address = "01975 Osinski Alley, Kertzmannburgh, Mayotte",
                            ConcurrencyStamp = "6b9d0d3a-a9f1-4390-9332-a82ce371ed50",
                            CreatedAt = new DateTime(2024, 1, 5, 6, 26, 48, 108, DateTimeKind.Utc).AddTicks(2283),
                            Email = "Johathan.Smith@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Johathan",
                            LastName = "Smith",
                            LockoutEnabled = false,
                            NormalizedEmail = "JOHATHAN.SMITH@HOTMAIL.COM",
                            NormalizedUserName = "JOHATHAN51",
                            PasswordHash = "AQAAAAIAAYagAAAAELfSSAJ/p+rQI+vHjnIsxNAg44WrcK8kM4pzKw+/4LmeilO4tPjTwQckHxUeFQwhJw==",
                            PhoneNumber = "541-107-4025",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/897.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Johathan51"
                        },
                        new
                        {
                            Id = 34,
                            AccessFailedCount = 0,
                            Address = "28698 Josiah Union, Adrianastad, Qatar",
                            ConcurrencyStamp = "e172c7d3-e40e-4ea3-a368-d6583cd5bd4b",
                            CreatedAt = new DateTime(2024, 8, 26, 6, 26, 48, 108, DateTimeKind.Utc).AddTicks(2486),
                            Email = "Barton_Kohler@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Barton",
                            LastName = "Kohler",
                            LockoutEnabled = false,
                            NormalizedEmail = "BARTON_KOHLER@YAHOO.COM",
                            NormalizedUserName = "BARTON87",
                            PasswordHash = "AQAAAAIAAYagAAAAEBU0fzMam5MkPIK0P4MMhoHiLpa7hvxkiAfsFL0pLIh0sQuF2dmVdRy7p94qbfx+Jw==",
                            PhoneNumber = "233-772-0791",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/425.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Barton87"
                        },
                        new
                        {
                            Id = 35,
                            AccessFailedCount = 0,
                            Address = "62416 Kerluke Cape, Lake Isom, Macao",
                            ConcurrencyStamp = "cc9e31e1-0cf3-4fce-ab36-86f13ecfbaa3",
                            CreatedAt = new DateTime(2024, 10, 19, 6, 26, 48, 110, DateTimeKind.Utc).AddTicks(1719),
                            Email = "Madie.OKon61@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Madie",
                            LastName = "O'Kon",
                            LockoutEnabled = false,
                            NormalizedEmail = "MADIE.OKON61@HOTMAIL.COM",
                            NormalizedUserName = "MADIE.OKON",
                            PasswordHash = "AQAAAAIAAYagAAAAELqXp+ozShPTTW8Gl9c2v2duaTjqy36NKDgYVccbkY/dXJOGfPcNJkbsKPxTtn4LIA==",
                            PhoneNumber = "236-791-1471",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/1180.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Madie.OKon"
                        },
                        new
                        {
                            Id = 36,
                            AccessFailedCount = 0,
                            Address = "1367 Harris Drive, South Camylleside, Lesotho",
                            ConcurrencyStamp = "bbe6397c-cdde-4953-a47c-6a1d88f8a34a",
                            CreatedAt = new DateTime(2024, 6, 11, 6, 26, 48, 110, DateTimeKind.Utc).AddTicks(2068),
                            Email = "Adriel_Deckow65@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Adriel",
                            LastName = "Deckow",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADRIEL_DECKOW65@YAHOO.COM",
                            NormalizedUserName = "ADRIEL31",
                            PasswordHash = "AQAAAAIAAYagAAAAEExAKhdAHhle9qR7W0B+4zsrQM2uF3nOqgIrJJYFjvjrbe/VpzlssRBaUAdleUaptA==",
                            PhoneNumber = "962-428-5730",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/1126.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Adriel31"
                        },
                        new
                        {
                            Id = 37,
                            AccessFailedCount = 0,
                            Address = "570 Arturo Streets, Port Jarvisborough, Guernsey",
                            ConcurrencyStamp = "8ef5ca8f-b969-494d-a588-862d9e56250f",
                            CreatedAt = new DateTime(2024, 3, 16, 6, 26, 48, 110, DateTimeKind.Utc).AddTicks(2330),
                            Email = "Bo77@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Bo",
                            LastName = "Hoeger",
                            LockoutEnabled = false,
                            NormalizedEmail = "BO77@HOTMAIL.COM",
                            NormalizedUserName = "BO.HOEGER84",
                            PasswordHash = "AQAAAAIAAYagAAAAELVGioNeE5A3iG86874I83f136ppw0v9aPanD6KHE/NGCIoQo/9ZSE8GD0daCFXbAQ==",
                            PhoneNumber = "029-741-7106",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/612.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Bo.Hoeger84"
                        },
                        new
                        {
                            Id = 38,
                            AccessFailedCount = 0,
                            Address = "075 Rollin Cove, Mortimerhaven, Kazakhstan",
                            ConcurrencyStamp = "49b4583d-302a-4a10-81f4-07e4378072ee",
                            CreatedAt = new DateTime(2024, 9, 4, 6, 26, 48, 110, DateTimeKind.Utc).AddTicks(2628),
                            Email = "Kristoffer.Harber75@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Kristoffer",
                            LastName = "Harber",
                            LockoutEnabled = false,
                            NormalizedEmail = "KRISTOFFER.HARBER75@GMAIL.COM",
                            NormalizedUserName = "KRISTOFFER.HARBER",
                            PasswordHash = "AQAAAAIAAYagAAAAEBJZ8J1O8EWqzdxMYv7MN/u5UPSuYF9kDrOOl+3402rNl9D6mHRU0/24bUXk+/oz9Q==",
                            PhoneNumber = "916-021-2434",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/593.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Kristoffer.Harber"
                        },
                        new
                        {
                            Id = 39,
                            AccessFailedCount = 0,
                            Address = "7520 Zane View, Boscostad, Togo",
                            ConcurrencyStamp = "c76983c5-8cdd-49a9-8572-0a09fb7229d1",
                            CreatedAt = new DateTime(2024, 5, 17, 6, 26, 48, 110, DateTimeKind.Utc).AddTicks(2850),
                            Email = "Luisa_Hudson@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Luisa",
                            LastName = "Hudson",
                            LockoutEnabled = false,
                            NormalizedEmail = "LUISA_HUDSON@GMAIL.COM",
                            NormalizedUserName = "LUISA21",
                            PasswordHash = "AQAAAAIAAYagAAAAENk0ZUBu3zQjHImC+4dBclGHDT8KotFXK0GC0OgcYZOUXoOUClRIpKKZ5yR3IgdqHA==",
                            PhoneNumber = "849-556-7254",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/980.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Luisa21"
                        },
                        new
                        {
                            Id = 40,
                            AccessFailedCount = 0,
                            Address = "6107 Reginald Pass, South Demarcusside, Liberia",
                            ConcurrencyStamp = "6fab7d06-6285-4297-81ea-63f0e90b6be7",
                            CreatedAt = new DateTime(2024, 5, 3, 6, 26, 48, 110, DateTimeKind.Utc).AddTicks(3105),
                            Email = "Einar_Boyer73@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Einar",
                            LastName = "Boyer",
                            LockoutEnabled = false,
                            NormalizedEmail = "EINAR_BOYER73@HOTMAIL.COM",
                            NormalizedUserName = "EINAR92",
                            PasswordHash = "AQAAAAIAAYagAAAAEP+rKGVmu1ssKD+OuBxPNHqae4bIgYWFnYz2g5bKpfj6qbhicErEXB3rrttukwFq4g==",
                            PhoneNumber = "253-275-3500",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/893.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Einar92"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Address", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.User", "User")
                        .WithMany("Addresses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.BannerDetail", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Banner", "Banner")
                        .WithMany("BannerDetails")
                        .HasForeignKey("BannerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManboShopAPI.Domain.Entities.Product", "Product")
                        .WithMany("BannerDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Banner");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Cart", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("User");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.CartItem", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Cart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManboShopAPI.Domain.Entities.Product", "Product")
                        .WithMany("CartItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.CouponCondition", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Coupon", "Coupon")
                        .WithMany("CouponConditions")
                        .HasForeignKey("CouponId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Coupon");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Favorite", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Product", "Product")
                        .WithMany("Favorites")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManboShopAPI.Domain.Entities.User", "User")
                        .WithMany("Favorites")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Feedback", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Product", "Product")
                        .WithMany("Feedbacks")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManboShopAPI.Domain.Entities.User", "User")
                        .WithMany("Feedbacks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.NewsDetail", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.News", "News")
                        .WithMany("NewsDetails")
                        .HasForeignKey("NewsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManboShopAPI.Domain.Entities.Product", "Product")
                        .WithMany("NewsDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("News");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Order", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Coupon", "Coupon")
                        .WithMany("Orders")
                        .HasForeignKey("CouponId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ManboShopAPI.Domain.Entities.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Coupon");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.OrderDetail", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Coupon", "Coupon")
                        .WithMany("OrderDetails")
                        .HasForeignKey("CouponId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ManboShopAPI.Domain.Entities.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManboShopAPI.Domain.Entities.Product", "Product")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Coupon");

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Product", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ManboShopAPI.Domain.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Brand");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.ProductImage", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Product", "Product")
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManboShopAPI.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Banner", b =>
                {
                    b.Navigation("BannerDetails");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Brand", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Cart", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Coupon", b =>
                {
                    b.Navigation("CouponConditions");

                    b.Navigation("OrderDetails");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.News", b =>
                {
                    b.Navigation("NewsDetails");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Product", b =>
                {
                    b.Navigation("BannerDetails");

                    b.Navigation("CartItems");

                    b.Navigation("Favorites");

                    b.Navigation("Feedbacks");

                    b.Navigation("NewsDetails");

                    b.Navigation("OrderDetails");

                    b.Navigation("ProductImages");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.User", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Favorites");

                    b.Navigation("Feedbacks");

                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
