// <auto-generated />
using System;
using ManboShopAPI.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ManboShopAPI.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250114204659_update-categories-table")]
    partial class updatecategoriestable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AreaOrColonyOrStreetOrSectorOrVillage")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("BuildingOrCompanyOrApartment")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FlatOrHouse")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PinCode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Attributes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Attributes");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Banner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Banners");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.BannerDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BannerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BannerId");

                    b.HasIndex("ProductId");

                    b.ToTable("BannerDetails");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Brands");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 1, 14, 20, 46, 58, 580, DateTimeKind.Utc).AddTicks(3574),
                            ImageUrl = "https://example.com/images/nike.jpg",
                            Name = "Nike"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 1, 14, 20, 46, 58, 580, DateTimeKind.Utc).AddTicks(4065),
                            ImageUrl = "https://example.com/images/adidas.jpg",
                            Name = "Adidas"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 1, 14, 20, 46, 58, 580, DateTimeKind.Utc).AddTicks(4068),
                            ImageUrl = "https://example.com/images/gucci.jpg",
                            Name = "Gucci"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 1, 14, 20, 46, 58, 580, DateTimeKind.Utc).AddTicks(4071),
                            ImageUrl = "https://example.com/images/louis-vuitton.jpg",
                            Name = "Louis Vuitton"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2025, 1, 14, 20, 46, 58, 580, DateTimeKind.Utc).AddTicks(4072),
                            ImageUrl = "https://example.com/images/zara.jpg",
                            Name = "Zara"
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2025, 1, 14, 20, 46, 58, 580, DateTimeKind.Utc).AddTicks(4076),
                            ImageUrl = "https://example.com/images/h&m.jpg",
                            Name = "H&M"
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2025, 1, 14, 20, 46, 58, 580, DateTimeKind.Utc).AddTicks(4078),
                            ImageUrl = "https://example.com/images/chanel.jpg",
                            Name = "Chanel"
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2025, 1, 14, 20, 46, 58, 580, DateTimeKind.Utc).AddTicks(4078),
                            ImageUrl = "https://example.com/images/prada.jpg",
                            Name = "Prada"
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2025, 1, 14, 20, 46, 58, 580, DateTimeKind.Utc).AddTicks(4079),
                            ImageUrl = "https://example.com/images/versace.jpg",
                            Name = "Versace"
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2025, 1, 14, 20, 46, 58, 580, DateTimeKind.Utc).AddTicks(4081),
                            ImageUrl = "https://example.com/images/burberry.jpg",
                            Name = "Burberry"
                        },
                        new
                        {
                            Id = 11,
                            CreatedAt = new DateTime(2025, 1, 14, 20, 46, 58, 580, DateTimeKind.Utc).AddTicks(4082),
                            ImageUrl = "https://example.com/images/dior.jpg",
                            Name = "Dior"
                        },
                        new
                        {
                            Id = 12,
                            CreatedAt = new DateTime(2025, 1, 14, 20, 46, 58, 580, DateTimeKind.Utc).AddTicks(4083),
                            ImageUrl = "https://example.com/images/calvin-klein.jpg",
                            Name = "Calvin Klein"
                        },
                        new
                        {
                            Id = 13,
                            CreatedAt = new DateTime(2025, 1, 14, 20, 46, 58, 580, DateTimeKind.Utc).AddTicks(4084),
                            ImageUrl = "https://example.com/images/tommy-hilfiger.jpg",
                            Name = "Tommy Hilfiger"
                        },
                        new
                        {
                            Id = 14,
                            CreatedAt = new DateTime(2025, 1, 14, 20, 46, 58, 580, DateTimeKind.Utc).AddTicks(4084),
                            ImageUrl = "https://example.com/images/levis.jpg",
                            Name = "Levi's"
                        },
                        new
                        {
                            Id = 15,
                            CreatedAt = new DateTime(2025, 1, 14, 20, 46, 58, 580, DateTimeKind.Utc).AddTicks(4085),
                            ImageUrl = "https://example.com/images/uniqlo.jpg",
                            Name = "Uniqlo"
                        },
                        new
                        {
                            Id = 16,
                            CreatedAt = new DateTime(2025, 1, 14, 20, 46, 58, 580, DateTimeKind.Utc).AddTicks(4086),
                            ImageUrl = "https://example.com/images/lacoste.jpg",
                            Name = "Lacoste"
                        },
                        new
                        {
                            Id = 17,
                            CreatedAt = new DateTime(2025, 1, 14, 20, 46, 58, 580, DateTimeKind.Utc).AddTicks(4087),
                            ImageUrl = "https://example.com/images/the-north-face.jpg",
                            Name = "The North Face"
                        },
                        new
                        {
                            Id = 18,
                            CreatedAt = new DateTime(2025, 1, 14, 20, 46, 58, 580, DateTimeKind.Utc).AddTicks(4089),
                            ImageUrl = "https://example.com/images/ralph-lauren.jpg",
                            Name = "Ralph Lauren"
                        },
                        new
                        {
                            Id = 19,
                            CreatedAt = new DateTime(2025, 1, 14, 20, 46, 58, 580, DateTimeKind.Utc).AddTicks(4090),
                            ImageUrl = "https://example.com/images/puma.jpg",
                            Name = "Puma"
                        },
                        new
                        {
                            Id = 20,
                            CreatedAt = new DateTime(2025, 1, 14, 20, 46, 58, 580, DateTimeKind.Utc).AddTicks(4091),
                            ImageUrl = "https://example.com/images/hugo-boss.jpg",
                            Name = "Hugo Boss"
                        },
                        new
                        {
                            Id = 21,
                            CreatedAt = new DateTime(2025, 1, 14, 20, 46, 58, 580, DateTimeKind.Utc).AddTicks(4092),
                            ImageUrl = "https://example.com/images/armani.jpg",
                            Name = "Armani"
                        },
                        new
                        {
                            Id = 22,
                            CreatedAt = new DateTime(2025, 1, 14, 20, 46, 58, 580, DateTimeKind.Utc).AddTicks(4092),
                            ImageUrl = "https://example.com/images/balenciaga.jpg",
                            Name = "Balenciaga"
                        },
                        new
                        {
                            Id = 23,
                            CreatedAt = new DateTime(2025, 1, 14, 20, 46, 58, 580, DateTimeKind.Utc).AddTicks(4093),
                            ImageUrl = "https://example.com/images/fendi.jpg",
                            Name = "Fendi"
                        },
                        new
                        {
                            Id = 24,
                            CreatedAt = new DateTime(2025, 1, 14, 20, 46, 58, 580, DateTimeKind.Utc).AddTicks(4098),
                            ImageUrl = "https://example.com/images/givenchy.jpg",
                            Name = "Givenchy"
                        },
                        new
                        {
                            Id = 25,
                            CreatedAt = new DateTime(2025, 1, 14, 20, 46, 58, 580, DateTimeKind.Utc).AddTicks(4099),
                            ImageUrl = "https://example.com/images/hermes.jpg",
                            Name = "Hermès"
                        },
                        new
                        {
                            Id = 26,
                            CreatedAt = new DateTime(2025, 1, 14, 20, 46, 58, 580, DateTimeKind.Utc).AddTicks(4100),
                            ImageUrl = "https://example.com/images/salvatore-ferragamo.jpg",
                            Name = "Salvatore Ferragamo"
                        },
                        new
                        {
                            Id = 27,
                            CreatedAt = new DateTime(2025, 1, 14, 20, 46, 58, 580, DateTimeKind.Utc).AddTicks(4101),
                            ImageUrl = "https://example.com/images/valentino.jpg",
                            Name = "Valentino"
                        },
                        new
                        {
                            Id = 28,
                            CreatedAt = new DateTime(2025, 1, 14, 20, 46, 58, 580, DateTimeKind.Utc).AddTicks(4104),
                            ImageUrl = "https://example.com/images/dolce-gabbana.jpg",
                            Name = "Dolce & Gabbana"
                        },
                        new
                        {
                            Id = 29,
                            CreatedAt = new DateTime(2025, 1, 14, 20, 46, 58, 580, DateTimeKind.Utc).AddTicks(4105),
                            ImageUrl = "https://example.com/images/gap.jpg",
                            Name = "Gap"
                        },
                        new
                        {
                            Id = 30,
                            CreatedAt = new DateTime(2025, 1, 14, 20, 46, 58, 580, DateTimeKind.Utc).AddTicks(4108),
                            ImageUrl = "https://example.com/images/forever21.jpg",
                            Name = "Forever 21"
                        },
                        new
                        {
                            Id = 31,
                            CreatedAt = new DateTime(2025, 1, 14, 20, 46, 58, 580, DateTimeKind.Utc).AddTicks(4109),
                            ImageUrl = "https://example.com/images/new-balance.jpg",
                            Name = "New Balance"
                        },
                        new
                        {
                            Id = 32,
                            CreatedAt = new DateTime(2025, 1, 14, 20, 46, 58, 580, DateTimeKind.Utc).AddTicks(4109),
                            ImageUrl = "https://example.com/images/vans.jpg",
                            Name = "Vans"
                        },
                        new
                        {
                            Id = 33,
                            CreatedAt = new DateTime(2025, 1, 14, 20, 46, 58, 580, DateTimeKind.Utc).AddTicks(4110),
                            ImageUrl = "https://example.com/images/converse.jpg",
                            Name = "Converse"
                        },
                        new
                        {
                            Id = 34,
                            CreatedAt = new DateTime(2025, 1, 14, 20, 46, 58, 580, DateTimeKind.Utc).AddTicks(4112),
                            ImageUrl = "https://example.com/images/under-armour.jpg",
                            Name = "Under Armour"
                        },
                        new
                        {
                            Id = 35,
                            CreatedAt = new DateTime(2025, 1, 14, 20, 46, 58, 580, DateTimeKind.Utc).AddTicks(4113),
                            ImageUrl = "https://example.com/images/reebok.jpg",
                            Name = "Reebok"
                        },
                        new
                        {
                            Id = 36,
                            CreatedAt = new DateTime(2025, 1, 14, 20, 46, 58, 580, DateTimeKind.Utc).AddTicks(4114),
                            ImageUrl = "https://example.com/images/coach.jpg",
                            Name = "Coach"
                        },
                        new
                        {
                            Id = 37,
                            CreatedAt = new DateTime(2025, 1, 14, 20, 46, 58, 580, DateTimeKind.Utc).AddTicks(4115),
                            ImageUrl = "https://example.com/images/kate-spade.jpg",
                            Name = "Kate Spade"
                        },
                        new
                        {
                            Id = 38,
                            CreatedAt = new DateTime(2025, 1, 14, 20, 46, 58, 580, DateTimeKind.Utc).AddTicks(4115),
                            ImageUrl = "https://example.com/images/michael-kors.jpg",
                            Name = "Michael Kors"
                        },
                        new
                        {
                            Id = 39,
                            CreatedAt = new DateTime(2025, 1, 14, 20, 46, 58, 580, DateTimeKind.Utc).AddTicks(4116),
                            ImageUrl = "https://example.com/images/bally.jpg",
                            Name = "Bally"
                        },
                        new
                        {
                            Id = 40,
                            CreatedAt = new DateTime(2025, 1, 14, 20, 46, 58, 580, DateTimeKind.Utc).AddTicks(4117),
                            ImageUrl = "https://example.com/images/guess.jpg",
                            Name = "Guess"
                        });
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.CartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("ProductId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("ParentCategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ParentCategoryId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Coupon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CurrentUsages")
                        .HasColumnType("int");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("MaxUsages")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Coupons");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.CouponCondition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Attribute")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("CouponId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DiscountAmount")
                        .HasColumnType("int");

                    b.Property<string>("Operator")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Value")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CouponId");

                    b.ToTable("CouponConditions");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Favorite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Favorites");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Star")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.News", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("News");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.NewsDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("NewsId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("NewsId");

                    b.HasIndex("ProductId");

                    b.ToTable("NewsDetails");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CouponId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("SessionId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CouponId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.OrderDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CouponId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CouponId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BrandId")
                        .HasColumnType("int");

                    b.Property<int>("BuyTurn")
                        .HasColumnType("int");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("OldPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("Specification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.ProductAttributeValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AttributeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AttributeId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductAttributeValues");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.ProductImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductImages");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.ProductVariantValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("OldPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("Sku")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductVariantValues");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfilePictureUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("VerificationCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("VerificationCodeExpiryTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            Address = "4767 Smitham Gateway, Murazikmouth, Guernsey",
                            ConcurrencyStamp = "cbb70c4f-6e96-4598-bef7-0e672b000b2c",
                            CreatedAt = new DateTime(2024, 4, 21, 20, 46, 56, 777, DateTimeKind.Utc).AddTicks(4043),
                            Email = "Karlie_Watsica46@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Karlie",
                            LastName = "Watsica",
                            LockoutEnabled = false,
                            NormalizedEmail = "KARLIE_WATSICA46@GMAIL.COM",
                            NormalizedUserName = "KARLIE_WATSICA",
                            PasswordHash = "AQAAAAIAAYagAAAAEGTZ4PDXk7CqTTJoOzdoQQQ4+UjiIqNMGR5AQeYbeJmj84Ht/ZsisXaONeA/L297SA==",
                            PhoneNumber = "933-271-5858",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/1009.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Karlie_Watsica"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            Address = "8008 Joannie Causeway, Murrayshire, Somalia",
                            ConcurrencyStamp = "486ea800-1e06-48b7-9c1a-773779cfc96b",
                            CreatedAt = new DateTime(2024, 7, 6, 20, 46, 56, 778, DateTimeKind.Utc).AddTicks(8483),
                            Email = "Derrick_Ullrich37@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Derrick",
                            LastName = "Ullrich",
                            LockoutEnabled = false,
                            NormalizedEmail = "DERRICK_ULLRICH37@GMAIL.COM",
                            NormalizedUserName = "DERRICK_ULLRICH",
                            PasswordHash = "AQAAAAIAAYagAAAAEBdyqPCth1ThPznWMorgyRjmMRYMBCn3oekvOv7Cl1EU8pVrNslb3reFLUEZzXBgxQ==",
                            PhoneNumber = "195-273-2173",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/672.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Derrick_Ullrich"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            Address = "90868 Reichert Keys, Port Brauliotown, Finland",
                            ConcurrencyStamp = "02c87541-3705-4621-baca-6490e9e8030e",
                            CreatedAt = new DateTime(2024, 3, 29, 20, 46, 56, 778, DateTimeKind.Utc).AddTicks(9058),
                            Email = "Urban.Hudson@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Urban",
                            LastName = "Hudson",
                            LockoutEnabled = false,
                            NormalizedEmail = "URBAN.HUDSON@YAHOO.COM",
                            NormalizedUserName = "URBAN81",
                            PasswordHash = "AQAAAAIAAYagAAAAECe4zk5SxjzqDC6YIeNImGW9a7VAlBeWrE96l9STXM/cfMmM6XmCoeTplgLHRhikeg==",
                            PhoneNumber = "470-209-6954",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/870.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Urban81"
                        },
                        new
                        {
                            Id = 4,
                            AccessFailedCount = 0,
                            Address = "89556 Enos Fields, North Vincenzachester, Grenada",
                            ConcurrencyStamp = "ac0548fe-9a8c-46a8-989c-938b91ca5851",
                            CreatedAt = new DateTime(2024, 4, 4, 20, 46, 56, 778, DateTimeKind.Utc).AddTicks(9314),
                            Email = "Levi_Rolfson13@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Levi",
                            LastName = "Rolfson",
                            LockoutEnabled = false,
                            NormalizedEmail = "LEVI_ROLFSON13@GMAIL.COM",
                            NormalizedUserName = "LEVI.ROLFSON",
                            PasswordHash = "AQAAAAIAAYagAAAAECwRW5kNw985beAwcK8hF2oGVGmMzXVwpo4/wmXF4iVWU2ZxXd4G5p3JAM5ECKY8Mw==",
                            PhoneNumber = "401-743-4981",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/782.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Levi.Rolfson"
                        },
                        new
                        {
                            Id = 5,
                            AccessFailedCount = 0,
                            Address = "094 Fanny Keys, Albertville, Samoa",
                            ConcurrencyStamp = "e387f8fe-ad79-49d4-abf5-a5e2cbda5eef",
                            CreatedAt = new DateTime(2024, 3, 3, 20, 46, 56, 778, DateTimeKind.Utc).AddTicks(9505),
                            Email = "Mallory_Kuhn42@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Mallory",
                            LastName = "Kuhn",
                            LockoutEnabled = false,
                            NormalizedEmail = "MALLORY_KUHN42@YAHOO.COM",
                            NormalizedUserName = "MALLORY9",
                            PasswordHash = "AQAAAAIAAYagAAAAEO7PlcTvxTxr5M78d2B+YRVeiED1ZD5gVhtMJs7X4ddN3A1c8KJNrk/hFhdJM5RlGw==",
                            PhoneNumber = "143-297-6361",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/884.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Mallory9"
                        },
                        new
                        {
                            Id = 6,
                            AccessFailedCount = 0,
                            Address = "79038 Veum Extensions, Lake Eulah, Guam",
                            ConcurrencyStamp = "2058d21c-5b82-4a69-8e95-fd4121b59309",
                            CreatedAt = new DateTime(2024, 11, 11, 20, 46, 56, 778, DateTimeKind.Utc).AddTicks(9736),
                            Email = "Marcelina.Wintheiser48@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Marcelina",
                            LastName = "Wintheiser",
                            LockoutEnabled = false,
                            NormalizedEmail = "MARCELINA.WINTHEISER48@YAHOO.COM",
                            NormalizedUserName = "MARCELINA79",
                            PasswordHash = "AQAAAAIAAYagAAAAED6VnJ9iptMDYBV+SbpFsJ/Oyu6KLRCbfoSoypmTiV6ZFWK1ldBf/ysrKNR6Y6BM8A==",
                            PhoneNumber = "049-138-8846",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/731.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Marcelina79"
                        },
                        new
                        {
                            Id = 7,
                            AccessFailedCount = 0,
                            Address = "65527 Aliza Lights, Macejkovicville, Chile",
                            ConcurrencyStamp = "75c56e73-1fcc-46d1-8229-1cdb9a711106",
                            CreatedAt = new DateTime(2024, 6, 1, 20, 46, 56, 778, DateTimeKind.Utc).AddTicks(9944),
                            Email = "Duane_Tremblay64@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Duane",
                            LastName = "Tremblay",
                            LockoutEnabled = false,
                            NormalizedEmail = "DUANE_TREMBLAY64@YAHOO.COM",
                            NormalizedUserName = "DUANE_TREMBLAY30",
                            PasswordHash = "AQAAAAIAAYagAAAAEJZekVDZ+8JnBFPm+uU8kHfjKHFmbRMqDNN32kca/X0UQQg6AwfqZpv2+kx+pZre+A==",
                            PhoneNumber = "731-190-1386",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/336.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Duane_Tremblay30"
                        },
                        new
                        {
                            Id = 8,
                            AccessFailedCount = 0,
                            Address = "899 Kemmer Landing, Lake Breanne, Wallis and Futuna",
                            ConcurrencyStamp = "3af5ee4b-d5a8-4422-812d-f4c7a62fbff4",
                            CreatedAt = new DateTime(2024, 12, 22, 20, 46, 56, 779, DateTimeKind.Utc).AddTicks(164),
                            Email = "Rosemary_White@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Rosemary",
                            LastName = "White",
                            LockoutEnabled = false,
                            NormalizedEmail = "ROSEMARY_WHITE@GMAIL.COM",
                            NormalizedUserName = "ROSEMARY25",
                            PasswordHash = "AQAAAAIAAYagAAAAECPnF8AZouaxA3E+eDyMzWRlFRiHuxFbm4owiM8gZME+18xJDs+wpNWnO2BD/XonoA==",
                            PhoneNumber = "419-469-3016",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/963.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Rosemary25"
                        },
                        new
                        {
                            Id = 9,
                            AccessFailedCount = 0,
                            Address = "134 Braeden Manor, Lake Beverlyshire, Honduras",
                            ConcurrencyStamp = "2b9d7645-9dfa-41d4-856d-fc846cf2011f",
                            CreatedAt = new DateTime(2024, 3, 11, 20, 46, 56, 779, DateTimeKind.Utc).AddTicks(372),
                            Email = "Emmalee40@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Emmalee",
                            LastName = "Hodkiewicz",
                            LockoutEnabled = false,
                            NormalizedEmail = "EMMALEE40@GMAIL.COM",
                            NormalizedUserName = "EMMALEE_HODKIEWICZ",
                            PasswordHash = "AQAAAAIAAYagAAAAEOPBsZMBF7ze7dJCUz6zAuuUnQeY7S2vDDrxXkldEGqegICde2B8/wbPp0tL8d/9iA==",
                            PhoneNumber = "997-737-9718",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/219.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Emmalee_Hodkiewicz"
                        },
                        new
                        {
                            Id = 10,
                            AccessFailedCount = 0,
                            Address = "05293 Ellie Passage, Derektown, New Zealand",
                            ConcurrencyStamp = "568912ae-f5e0-48f5-a910-e3aa0ef7ede3",
                            CreatedAt = new DateTime(2024, 3, 22, 20, 46, 56, 779, DateTimeKind.Utc).AddTicks(586),
                            Email = "Stefan.Dickens23@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Stefan",
                            LastName = "Dickens",
                            LockoutEnabled = false,
                            NormalizedEmail = "STEFAN.DICKENS23@YAHOO.COM",
                            NormalizedUserName = "STEFAN.DICKENS",
                            PasswordHash = "AQAAAAIAAYagAAAAEBy50Gmriw8jCM522SEvjDFOMiElnldRwe3456DAZwa/NaIM0fqLpzYnKBa6tSzgjA==",
                            PhoneNumber = "847-204-1218",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/633.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Stefan.Dickens"
                        },
                        new
                        {
                            Id = 11,
                            AccessFailedCount = 0,
                            Address = "59207 Tromp Lane, New Jaydonstad, Macedonia",
                            ConcurrencyStamp = "823a3d48-b921-418a-8602-856e0f372f23",
                            CreatedAt = new DateTime(2024, 3, 4, 20, 46, 56, 779, DateTimeKind.Utc).AddTicks(773),
                            Email = "Ole.Heaney@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Ole",
                            LastName = "Heaney",
                            LockoutEnabled = false,
                            NormalizedEmail = "OLE.HEANEY@GMAIL.COM",
                            NormalizedUserName = "OLE_HEANEY86",
                            PasswordHash = "AQAAAAIAAYagAAAAEA9pMxbAnJuOPrvSDWuSZMmZwExSh4mgXxKOR0E+PmAmIxfJXEqiChuev0RPspPDaQ==",
                            PhoneNumber = "580-061-1390",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/398.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Ole_Heaney86"
                        },
                        new
                        {
                            Id = 12,
                            AccessFailedCount = 0,
                            Address = "311 Considine Lodge, Johnathanland, Nicaragua",
                            ConcurrencyStamp = "8a395060-ff77-4f97-9222-8262dd6726e4",
                            CreatedAt = new DateTime(2024, 4, 23, 20, 46, 56, 779, DateTimeKind.Utc).AddTicks(983),
                            Email = "Rosario_Rippin24@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Rosario",
                            LastName = "Rippin",
                            LockoutEnabled = false,
                            NormalizedEmail = "ROSARIO_RIPPIN24@GMAIL.COM",
                            NormalizedUserName = "ROSARIO.RIPPIN",
                            PasswordHash = "AQAAAAIAAYagAAAAELuG0bPJ2tK8wDPQgL1pTIWY0NJJ3sq1UjMPrKCszK6g63BrNY4p+WTfDr5KUnJO1A==",
                            PhoneNumber = "155-000-5739",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/771.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Rosario.Rippin"
                        },
                        new
                        {
                            Id = 13,
                            AccessFailedCount = 0,
                            Address = "506 Gottlieb Route, Maudieton, Rwanda",
                            ConcurrencyStamp = "0ae28bb7-7bd7-4caf-9e84-74964c5776b2",
                            CreatedAt = new DateTime(2024, 5, 13, 20, 46, 56, 779, DateTimeKind.Utc).AddTicks(1190),
                            Email = "Elsie75@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Elsie",
                            LastName = "Johns",
                            LockoutEnabled = false,
                            NormalizedEmail = "ELSIE75@GMAIL.COM",
                            NormalizedUserName = "ELSIE.JOHNS",
                            PasswordHash = "AQAAAAIAAYagAAAAEOd81xfKNk8hF9uuo9xUBmaQEzX4n0CLJav32dHlS27rUv0bS0a0KH/zrwfGUL/Mdw==",
                            PhoneNumber = "512-943-9498",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/1144.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Elsie.Johns"
                        },
                        new
                        {
                            Id = 14,
                            AccessFailedCount = 0,
                            Address = "54244 Sauer Branch, Jadafurt, Uzbekistan",
                            ConcurrencyStamp = "7ca9c423-d9ef-4254-9208-8a48d42ca285",
                            CreatedAt = new DateTime(2024, 2, 29, 20, 46, 56, 779, DateTimeKind.Utc).AddTicks(1404),
                            Email = "Leslie.Leannon@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Leslie",
                            LastName = "Leannon",
                            LockoutEnabled = false,
                            NormalizedEmail = "LESLIE.LEANNON@HOTMAIL.COM",
                            NormalizedUserName = "LESLIE_LEANNON",
                            PasswordHash = "AQAAAAIAAYagAAAAEIwAzCe7P8yjQcPQIoCHeW4j76QDWbE1EUOY9NcLjwra9osPOGZ58z+vnAZ26Lpn0A==",
                            PhoneNumber = "591-401-1781",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/1156.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Leslie_Leannon"
                        },
                        new
                        {
                            Id = 15,
                            AccessFailedCount = 0,
                            Address = "530 Charity Overpass, Gretatown, Macedonia",
                            ConcurrencyStamp = "329b6e6e-a2ad-4be3-955d-1fdbcfef5e41",
                            CreatedAt = new DateTime(2024, 2, 2, 20, 46, 56, 779, DateTimeKind.Utc).AddTicks(1590),
                            Email = "Jerel79@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Jerel",
                            LastName = "Baumbach",
                            LockoutEnabled = false,
                            NormalizedEmail = "JEREL79@YAHOO.COM",
                            NormalizedUserName = "JEREL_BAUMBACH15",
                            PasswordHash = "AQAAAAIAAYagAAAAEAOsgRg/jQDswv/hJcX0OLt3Riy1j+2LUMb0d3CTo1Ym8C1rby0ykY7oJ0FN7YFc5A==",
                            PhoneNumber = "551-270-3116",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/617.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Jerel_Baumbach15"
                        },
                        new
                        {
                            Id = 16,
                            AccessFailedCount = 0,
                            Address = "2511 Breanne Ridges, Hoegerborough, United Kingdom",
                            ConcurrencyStamp = "16b946b4-70d0-44bf-b72a-afbae352fc6c",
                            CreatedAt = new DateTime(2025, 1, 10, 20, 46, 56, 779, DateTimeKind.Utc).AddTicks(1793),
                            Email = "Shakira.Brakus@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Shakira",
                            LastName = "Brakus",
                            LockoutEnabled = false,
                            NormalizedEmail = "SHAKIRA.BRAKUS@HOTMAIL.COM",
                            NormalizedUserName = "SHAKIRA78",
                            PasswordHash = "AQAAAAIAAYagAAAAECwKZk25Pq4303KUyt5QyKfWuZC7lTOR6tXLmsombu5bssmPXim32QA4mOrlRM1Cdg==",
                            PhoneNumber = "627-237-3915",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/205.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Shakira78"
                        },
                        new
                        {
                            Id = 17,
                            AccessFailedCount = 0,
                            Address = "004 Ruthie Lock, East Roryberg, Cote d'Ivoire",
                            ConcurrencyStamp = "289ee855-839c-4455-b5d0-1ce4027677e4",
                            CreatedAt = new DateTime(2024, 9, 21, 20, 46, 56, 779, DateTimeKind.Utc).AddTicks(1967),
                            Email = "Katelin.Dicki21@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Katelin",
                            LastName = "Dicki",
                            LockoutEnabled = false,
                            NormalizedEmail = "KATELIN.DICKI21@HOTMAIL.COM",
                            NormalizedUserName = "KATELIN56",
                            PasswordHash = "AQAAAAIAAYagAAAAEFi1Pd0c8jBRlIP072U3OUze2fhHiNyyHyS1fP4QiYmuzeBZF6005FXmqZ+xjHNHXg==",
                            PhoneNumber = "620-423-2424",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/853.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Katelin56"
                        },
                        new
                        {
                            Id = 18,
                            AccessFailedCount = 0,
                            Address = "2812 Iliana Mission, East Rupertstad, Tonga",
                            ConcurrencyStamp = "957a8d6b-776e-4501-af3b-a859ba9dc6e6",
                            CreatedAt = new DateTime(2024, 4, 18, 20, 46, 56, 779, DateTimeKind.Utc).AddTicks(2188),
                            Email = "Shaina.Watsica@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Shaina",
                            LastName = "Watsica",
                            LockoutEnabled = false,
                            NormalizedEmail = "SHAINA.WATSICA@GMAIL.COM",
                            NormalizedUserName = "SHAINA81",
                            PasswordHash = "AQAAAAIAAYagAAAAEHnX9ibUEguhEcoHQToi0gGKtD+1AUVlSoZE4mDdrSqPcQLAAXquSSzJL/saUMSdNw==",
                            PhoneNumber = "909-863-5117",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/1100.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Shaina81"
                        },
                        new
                        {
                            Id = 19,
                            AccessFailedCount = 0,
                            Address = "434 Baumbach Garden, West Danika, India",
                            ConcurrencyStamp = "9bf972ab-465f-44eb-b9a1-9b7fea9b2cbe",
                            CreatedAt = new DateTime(2024, 12, 29, 20, 46, 56, 779, DateTimeKind.Utc).AddTicks(2369),
                            Email = "Gabriella_Mohr88@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Gabriella",
                            LastName = "Mohr",
                            LockoutEnabled = false,
                            NormalizedEmail = "GABRIELLA_MOHR88@HOTMAIL.COM",
                            NormalizedUserName = "GABRIELLA50",
                            PasswordHash = "AQAAAAIAAYagAAAAEA1pV8oBwC6oa4m57mc9wLcKp8t7qt2WfSCVa3SOI0z07iacz2MiSLVm7DSPuuAGrw==",
                            PhoneNumber = "322-672-6189",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/1070.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Gabriella50"
                        },
                        new
                        {
                            Id = 20,
                            AccessFailedCount = 0,
                            Address = "2356 Williamson Lodge, Carliechester, South Africa",
                            ConcurrencyStamp = "f730eaf4-d6e8-4e67-88a8-1c83576a399e",
                            CreatedAt = new DateTime(2024, 12, 28, 20, 46, 56, 779, DateTimeKind.Utc).AddTicks(2562),
                            Email = "Macy86@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Macy",
                            LastName = "Nader",
                            LockoutEnabled = false,
                            NormalizedEmail = "MACY86@YAHOO.COM",
                            NormalizedUserName = "MACY.NADER",
                            PasswordHash = "AQAAAAIAAYagAAAAEEzvgdHJOeGidAZFHJkrbzXg/jMsB3ZtRURdpDzoSAQHkWVYV0mwm9jGFKnoKSMVmw==",
                            PhoneNumber = "431-179-7915",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/339.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Macy.Nader"
                        },
                        new
                        {
                            Id = 21,
                            AccessFailedCount = 0,
                            Address = "1651 Loy Hill, Lake Jessbury, Switzerland",
                            ConcurrencyStamp = "3e98f40a-40cd-46f1-bbbe-bdb15b143d4d",
                            CreatedAt = new DateTime(2024, 5, 15, 20, 46, 56, 779, DateTimeKind.Utc).AddTicks(2762),
                            Email = "Nora_Abshire62@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Nora",
                            LastName = "Abshire",
                            LockoutEnabled = false,
                            NormalizedEmail = "NORA_ABSHIRE62@YAHOO.COM",
                            NormalizedUserName = "NORA.ABSHIRE",
                            PasswordHash = "AQAAAAIAAYagAAAAEEvp/nu10d4kCzXL68ftD9GVfBuQ4zpKiiJGeVpKdu3mGUQSWmL7ms9e4Ste9/qr4A==",
                            PhoneNumber = "047-776-8869",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/548.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Nora.Abshire"
                        },
                        new
                        {
                            Id = 22,
                            AccessFailedCount = 0,
                            Address = "9649 Beier Walk, Strackeport, Saint Pierre and Miquelon",
                            ConcurrencyStamp = "092ca5b9-1f9d-4df7-97b2-253bccb7c9aa",
                            CreatedAt = new DateTime(2024, 1, 25, 20, 46, 56, 779, DateTimeKind.Utc).AddTicks(2979),
                            Email = "Ubaldo_Farrell40@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Ubaldo",
                            LastName = "Farrell",
                            LockoutEnabled = false,
                            NormalizedEmail = "UBALDO_FARRELL40@HOTMAIL.COM",
                            NormalizedUserName = "UBALDO.FARRELL34",
                            PasswordHash = "AQAAAAIAAYagAAAAEMXV/NwC43LsJ4l2dLE8Y5drJF+dd4eOQ3FZKzywG7KxWPWSvpRa3nkosM4GpJ1lMA==",
                            PhoneNumber = "196-079-0962",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/16.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Ubaldo.Farrell34"
                        },
                        new
                        {
                            Id = 23,
                            AccessFailedCount = 0,
                            Address = "33638 Therese Harbors, McKenziebury, Paraguay",
                            ConcurrencyStamp = "133599ea-9dda-4414-b05a-4d7b09891b14",
                            CreatedAt = new DateTime(2024, 3, 27, 20, 46, 56, 779, DateTimeKind.Utc).AddTicks(3154),
                            Email = "Bethel_Schaden@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Bethel",
                            LastName = "Schaden",
                            LockoutEnabled = false,
                            NormalizedEmail = "BETHEL_SCHADEN@GMAIL.COM",
                            NormalizedUserName = "BETHEL95",
                            PasswordHash = "AQAAAAIAAYagAAAAEFCztgqx2pIy+76XDWpJdKVki1O7rc1xp7wiBex1pfzuhc/VzfDa0g7AlzHjmJ1ybQ==",
                            PhoneNumber = "032-068-7919",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/96.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Bethel95"
                        },
                        new
                        {
                            Id = 24,
                            AccessFailedCount = 0,
                            Address = "6648 Antonietta Crest, Danielmouth, Turks and Caicos Islands",
                            ConcurrencyStamp = "ef4df2b8-c892-44f1-bfbe-9f421328e615",
                            CreatedAt = new DateTime(2024, 6, 14, 20, 46, 56, 779, DateTimeKind.Utc).AddTicks(3356),
                            Email = "Soledad_Shields@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Soledad",
                            LastName = "Shields",
                            LockoutEnabled = false,
                            NormalizedEmail = "SOLEDAD_SHIELDS@YAHOO.COM",
                            NormalizedUserName = "SOLEDAD.SHIELDS",
                            PasswordHash = "AQAAAAIAAYagAAAAEAtt5Slx7w/zXcOnarhou1Bn56Z4s/gNcczgZrBZC/L14/+gQtflLlyp4diwnQVpIg==",
                            PhoneNumber = "862-849-8764",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/542.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Soledad.Shields"
                        },
                        new
                        {
                            Id = 25,
                            AccessFailedCount = 0,
                            Address = "24688 Hayes Vista, Lake Katarinaburgh, Montenegro",
                            ConcurrencyStamp = "fa662cbc-11be-4edf-9fc4-a4bcc3bb2f35",
                            CreatedAt = new DateTime(2024, 7, 2, 20, 46, 56, 779, DateTimeKind.Utc).AddTicks(3529),
                            Email = "Lloyd72@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Lloyd",
                            LastName = "Wolff",
                            LockoutEnabled = false,
                            NormalizedEmail = "LLOYD72@HOTMAIL.COM",
                            NormalizedUserName = "LLOYD.WOLFF",
                            PasswordHash = "AQAAAAIAAYagAAAAEMUcvBCM40UtT1ajVPCaJWTwolkj85DPW7tbKDPsffDicCqPUFWq+4yr9ruj5xshfg==",
                            PhoneNumber = "498-656-8417",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/223.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Lloyd.Wolff"
                        },
                        new
                        {
                            Id = 26,
                            AccessFailedCount = 0,
                            Address = "80228 Magdalena Ranch, New Americoville, Martinique",
                            ConcurrencyStamp = "615493b9-4a2f-4dcc-a687-06d9947e0e16",
                            CreatedAt = new DateTime(2024, 4, 20, 20, 46, 56, 779, DateTimeKind.Utc).AddTicks(3753),
                            Email = "Donald.Gottlieb@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Donald",
                            LastName = "Gottlieb",
                            LockoutEnabled = false,
                            NormalizedEmail = "DONALD.GOTTLIEB@GMAIL.COM",
                            NormalizedUserName = "DONALD_GOTTLIEB",
                            PasswordHash = "AQAAAAIAAYagAAAAEN4d4EJtlAGGiOafekFHvaPwdRuUQptmC0k7rALQtijmF8j+hwplldXtu4DaOkQVSA==",
                            PhoneNumber = "593-934-1199",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/1197.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Donald_Gottlieb"
                        },
                        new
                        {
                            Id = 27,
                            AccessFailedCount = 0,
                            Address = "3862 Robert Prairie, South Jeffrychester, Pitcairn Islands",
                            ConcurrencyStamp = "9a101e4f-dac2-41a7-b291-24216b69118d",
                            CreatedAt = new DateTime(2024, 12, 22, 20, 46, 56, 779, DateTimeKind.Utc).AddTicks(3989),
                            Email = "Bernadine.Dietrich27@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Bernadine",
                            LastName = "Dietrich",
                            LockoutEnabled = false,
                            NormalizedEmail = "BERNADINE.DIETRICH27@GMAIL.COM",
                            NormalizedUserName = "BERNADINE84",
                            PasswordHash = "AQAAAAIAAYagAAAAECtcJ19T9eu0GIX9Rm2zjjChU+NibFIo6tBaHKv9YBjxTc8BjV3YGF2AIljcm1yRaw==",
                            PhoneNumber = "081-516-8086",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/501.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Bernadine84"
                        },
                        new
                        {
                            Id = 28,
                            AccessFailedCount = 0,
                            Address = "9438 Klein Mill, Meggieland, Turkmenistan",
                            ConcurrencyStamp = "8eba0201-09fd-40b4-ba25-43572fdbac62",
                            CreatedAt = new DateTime(2024, 8, 14, 20, 46, 56, 779, DateTimeKind.Utc).AddTicks(4173),
                            Email = "Hanna_Rutherford60@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Hanna",
                            LastName = "Rutherford",
                            LockoutEnabled = false,
                            NormalizedEmail = "HANNA_RUTHERFORD60@GMAIL.COM",
                            NormalizedUserName = "HANNA89",
                            PasswordHash = "AQAAAAIAAYagAAAAEF44Uc3bRWNRhbtWgVgJho7SJ2Stzm/rkb9xw0jprYrgZA1SR7QEq1+C1lsOuU1ABg==",
                            PhoneNumber = "920-155-0572",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/118.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Hanna89"
                        },
                        new
                        {
                            Id = 29,
                            AccessFailedCount = 0,
                            Address = "214 Metz Forest, West Deloresstad, New Caledonia",
                            ConcurrencyStamp = "a2ffc6cd-ba71-4836-bcef-19036a792ef1",
                            CreatedAt = new DateTime(2024, 5, 20, 20, 46, 56, 779, DateTimeKind.Utc).AddTicks(4378),
                            Email = "Camron.Stroman@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Camron",
                            LastName = "Stroman",
                            LockoutEnabled = false,
                            NormalizedEmail = "CAMRON.STROMAN@GMAIL.COM",
                            NormalizedUserName = "CAMRON.STROMAN",
                            PasswordHash = "AQAAAAIAAYagAAAAED/zdZK7wOitd/2nuyUMurc+AqldV5xKoYyjonQ85mwwuLyl+Ga9QfSvtjJ6Di7+9g==",
                            PhoneNumber = "104-606-7450",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/24.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Camron.Stroman"
                        },
                        new
                        {
                            Id = 30,
                            AccessFailedCount = 0,
                            Address = "2211 Cole Plain, Eileenside, Chile",
                            ConcurrencyStamp = "516614d3-259f-4564-a1ad-91bec1f1451b",
                            CreatedAt = new DateTime(2024, 5, 9, 20, 46, 56, 779, DateTimeKind.Utc).AddTicks(4555),
                            Email = "Zackary.Schultz@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Zackary",
                            LastName = "Schultz",
                            LockoutEnabled = false,
                            NormalizedEmail = "ZACKARY.SCHULTZ@HOTMAIL.COM",
                            NormalizedUserName = "ZACKARY.SCHULTZ4",
                            PasswordHash = "AQAAAAIAAYagAAAAEJqjeL5gVGJu08blGaezIK1kVdk9u9k0iBTKOiJZ1iZIUsr8vTruyZ8aLTdVHbh5mg==",
                            PhoneNumber = "273-787-2089",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/1213.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Zackary.Schultz4"
                        },
                        new
                        {
                            Id = 31,
                            AccessFailedCount = 0,
                            Address = "0449 Ullrich Prairie, Lake Fridamouth, Andorra",
                            ConcurrencyStamp = "ba6e7b32-3f3e-40eb-814a-ffcd0bf80154",
                            CreatedAt = new DateTime(2024, 2, 10, 20, 46, 56, 779, DateTimeKind.Utc).AddTicks(4748),
                            Email = "Lenora8@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Lenora",
                            LastName = "Schumm",
                            LockoutEnabled = false,
                            NormalizedEmail = "LENORA8@GMAIL.COM",
                            NormalizedUserName = "LENORA.SCHUMM",
                            PasswordHash = "AQAAAAIAAYagAAAAEMvHBsFK4m8TdTCBvKIyMyn9k8JaYvMR+ww4xeHd5rw2bariPEZCim5fDJ+OqSR8DA==",
                            PhoneNumber = "945-128-2668",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/595.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Lenora.Schumm"
                        },
                        new
                        {
                            Id = 32,
                            AccessFailedCount = 0,
                            Address = "0261 Alden Courts, North Marcelo, Saint Barthelemy",
                            ConcurrencyStamp = "486c6a71-8b1e-4bbb-8de9-f7665fa8302d",
                            CreatedAt = new DateTime(2024, 8, 11, 20, 46, 56, 779, DateTimeKind.Utc).AddTicks(4928),
                            Email = "Olen26@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Olen",
                            LastName = "Jakubowski",
                            LockoutEnabled = false,
                            NormalizedEmail = "OLEN26@YAHOO.COM",
                            NormalizedUserName = "OLEN.JAKUBOWSKI",
                            PasswordHash = "AQAAAAIAAYagAAAAEMl8TJjekR4xIUdoQlidqQl/YUiLw43zrysVMG37XWzb3wEjeprHsawNW/CZWIx/gg==",
                            PhoneNumber = "367-655-4264",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/905.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Olen.Jakubowski"
                        },
                        new
                        {
                            Id = 33,
                            AccessFailedCount = 0,
                            Address = "917 Kohler Coves, Lilianachester, Azerbaijan",
                            ConcurrencyStamp = "9fe5009c-0fca-4aab-816c-6f6d8ff3badc",
                            CreatedAt = new DateTime(2024, 2, 12, 20, 46, 56, 779, DateTimeKind.Utc).AddTicks(5206),
                            Email = "Delphine_Cruickshank53@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Delphine",
                            LastName = "Cruickshank",
                            LockoutEnabled = false,
                            NormalizedEmail = "DELPHINE_CRUICKSHANK53@HOTMAIL.COM",
                            NormalizedUserName = "DELPHINE.CRUICKSHANK",
                            PasswordHash = "AQAAAAIAAYagAAAAECROLxMADNghB+XgRVye5Bw65fPV6R+LFuT0+ih70Az2oWIsuTYiY+JMqaeBRwZbuQ==",
                            PhoneNumber = "365-606-6091",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/143.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Delphine.Cruickshank"
                        },
                        new
                        {
                            Id = 34,
                            AccessFailedCount = 0,
                            Address = "412 Bayer Plaza, West Stanford, Botswana",
                            ConcurrencyStamp = "4dec5a5f-1798-40f1-8c6f-b27c8764e743",
                            CreatedAt = new DateTime(2025, 1, 14, 20, 46, 56, 779, DateTimeKind.Utc).AddTicks(5362),
                            Email = "Saul62@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Saul",
                            LastName = "Metz",
                            LockoutEnabled = false,
                            NormalizedEmail = "SAUL62@GMAIL.COM",
                            NormalizedUserName = "SAUL.METZ",
                            PasswordHash = "AQAAAAIAAYagAAAAEIaZLpkzxRPXxfgtioqAe2r4BV+CjQmHQn7yIBCkyUJzBXyQ5Xu/mDZqrf+ibqkv1w==",
                            PhoneNumber = "312-914-3502",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/249.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Saul.Metz"
                        },
                        new
                        {
                            Id = 35,
                            AccessFailedCount = 0,
                            Address = "37771 Hills Walk, North Oswald, Timor-Leste",
                            ConcurrencyStamp = "71a70c36-a9eb-43b2-93c7-a4404895f5ad",
                            CreatedAt = new DateTime(2024, 7, 12, 20, 46, 56, 779, DateTimeKind.Utc).AddTicks(5553),
                            Email = "Celestino.Klocko@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Celestino",
                            LastName = "Klocko",
                            LockoutEnabled = false,
                            NormalizedEmail = "CELESTINO.KLOCKO@YAHOO.COM",
                            NormalizedUserName = "CELESTINO1",
                            PasswordHash = "AQAAAAIAAYagAAAAEJ0pz6RK00gBR/H2arlQLNiFirlRHZHuEK/W138aG6YQHfuhtXR/k1wc4LyRqqnyvQ==",
                            PhoneNumber = "732-721-8948",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/994.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Celestino1"
                        },
                        new
                        {
                            Id = 36,
                            AccessFailedCount = 0,
                            Address = "96170 Smitham Station, Ratkeland, Paraguay",
                            ConcurrencyStamp = "00e78fcf-4a8d-49d3-88e7-fd04429db594",
                            CreatedAt = new DateTime(2024, 6, 17, 20, 46, 56, 779, DateTimeKind.Utc).AddTicks(5725),
                            Email = "Dasia.Bergnaum@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Dasia",
                            LastName = "Bergnaum",
                            LockoutEnabled = false,
                            NormalizedEmail = "DASIA.BERGNAUM@GMAIL.COM",
                            NormalizedUserName = "DASIA_BERGNAUM",
                            PasswordHash = "AQAAAAIAAYagAAAAECJK5n1AHh/evSxctkW+9+6lN/SbaxsxbQ3DZmJK/vYwCqQT1R5UZKz4gGVT5H5yTA==",
                            PhoneNumber = "930-180-9281",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/1017.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Dasia_Bergnaum"
                        },
                        new
                        {
                            Id = 37,
                            AccessFailedCount = 0,
                            Address = "9214 Frami Turnpike, Port Bruceborough, Malaysia",
                            ConcurrencyStamp = "b10e543b-9787-4c6c-b416-8a84444af1e1",
                            CreatedAt = new DateTime(2024, 8, 20, 20, 46, 56, 779, DateTimeKind.Utc).AddTicks(5929),
                            Email = "Greyson19@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Greyson",
                            LastName = "Will",
                            LockoutEnabled = false,
                            NormalizedEmail = "GREYSON19@GMAIL.COM",
                            NormalizedUserName = "GREYSON.WILL",
                            PasswordHash = "AQAAAAIAAYagAAAAEMARpwa4w5iqdj1+4dWkpHal37KaislxrHbDlApHngsocqfOKjf74pBOGDC9A65BSg==",
                            PhoneNumber = "371-160-0399",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/1196.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Greyson.Will"
                        },
                        new
                        {
                            Id = 38,
                            AccessFailedCount = 0,
                            Address = "8953 Durgan Mission, New Mortonborough, Taiwan",
                            ConcurrencyStamp = "34079b36-2ece-4af0-b0e9-f9ba335573a1",
                            CreatedAt = new DateTime(2024, 3, 21, 20, 46, 56, 779, DateTimeKind.Utc).AddTicks(6108),
                            Email = "Alta.Dach57@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Alta",
                            LastName = "Dach",
                            LockoutEnabled = false,
                            NormalizedEmail = "ALTA.DACH57@YAHOO.COM",
                            NormalizedUserName = "ALTA.DACH",
                            PasswordHash = "AQAAAAIAAYagAAAAENgNKkP0/xWlCLW59hMBpsmANSO/9g8QFWjS4ZibDMmcu1arMUCuw+uvconNpSzGIw==",
                            PhoneNumber = "084-447-0976",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/953.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Alta.Dach"
                        },
                        new
                        {
                            Id = 39,
                            AccessFailedCount = 0,
                            Address = "620 Gislason Mountain, Loybury, Guinea",
                            ConcurrencyStamp = "038a9137-3209-48a4-9eaf-65e35100090a",
                            CreatedAt = new DateTime(2024, 2, 14, 20, 46, 56, 779, DateTimeKind.Utc).AddTicks(6301),
                            Email = "Kobe28@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Kobe",
                            LastName = "Collins",
                            LockoutEnabled = false,
                            NormalizedEmail = "KOBE28@YAHOO.COM",
                            NormalizedUserName = "KOBE.COLLINS",
                            PasswordHash = "AQAAAAIAAYagAAAAEBK2tcreEuryqVPYywoZu6ekI8sK+XvrqsSSpKEB6LjHPsUQi2kfZgRGV/lqfaCdEw==",
                            PhoneNumber = "697-043-2700",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/499.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Kobe.Collins"
                        },
                        new
                        {
                            Id = 40,
                            AccessFailedCount = 0,
                            Address = "018 Eldred Locks, Jeffmouth, Guadeloupe",
                            ConcurrencyStamp = "66d2269e-6821-432a-872d-0c62317e9135",
                            CreatedAt = new DateTime(2024, 11, 3, 20, 46, 56, 779, DateTimeKind.Utc).AddTicks(6479),
                            Email = "Nickolas59@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Nickolas",
                            LastName = "Maggio",
                            LockoutEnabled = false,
                            NormalizedEmail = "NICKOLAS59@YAHOO.COM",
                            NormalizedUserName = "NICKOLAS_MAGGIO39",
                            PasswordHash = "AQAAAAIAAYagAAAAEOJVrAoMgHBI4f5oxJ2AE+UGOiud2HKueWHXfOs5FchWgoMpa6uMuYlRGM1lX8Cemw==",
                            PhoneNumber = "194-106-3371",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/307.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Nickolas_Maggio39"
                        });
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Variant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Variants");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.VariantValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VariantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VariantId");

                    b.ToTable("VariantValues");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Address", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.User", "User")
                        .WithMany("Addresses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.BannerDetail", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Banner", "Banner")
                        .WithMany("BannerDetails")
                        .HasForeignKey("BannerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManboShopAPI.Domain.Entities.Product", "Product")
                        .WithMany("BannerDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Banner");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Cart", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("User");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.CartItem", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Cart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManboShopAPI.Domain.Entities.Product", "Product")
                        .WithMany("CartItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Category", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Category", "ParentCategory")
                        .WithMany("SubCategories")
                        .HasForeignKey("ParentCategoryId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.CouponCondition", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Coupon", "Coupon")
                        .WithMany("CouponConditions")
                        .HasForeignKey("CouponId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Coupon");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Favorite", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Product", "Product")
                        .WithMany("Favorites")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManboShopAPI.Domain.Entities.User", "User")
                        .WithMany("Favorites")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Feedback", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Product", "Product")
                        .WithMany("Feedbacks")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManboShopAPI.Domain.Entities.User", "User")
                        .WithMany("Feedbacks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.NewsDetail", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.News", "News")
                        .WithMany("NewsDetails")
                        .HasForeignKey("NewsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManboShopAPI.Domain.Entities.Product", "Product")
                        .WithMany("NewsDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("News");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Order", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Coupon", "Coupon")
                        .WithMany("Orders")
                        .HasForeignKey("CouponId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ManboShopAPI.Domain.Entities.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Coupon");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.OrderDetail", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Coupon", "Coupon")
                        .WithMany("OrderDetails")
                        .HasForeignKey("CouponId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ManboShopAPI.Domain.Entities.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManboShopAPI.Domain.Entities.Product", "Product")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Coupon");

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Product", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ManboShopAPI.Domain.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Brand");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.ProductAttributeValue", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Attributes", "Attribute")
                        .WithMany("ProductAttributeValues")
                        .HasForeignKey("AttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManboShopAPI.Domain.Entities.Product", "Product")
                        .WithMany("ProductAttributeValues")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attribute");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.ProductImage", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Product", "Product")
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.ProductVariantValue", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Product", "Product")
                        .WithMany("ProductVariantValues")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.VariantValue", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Variant", "Variant")
                        .WithMany("VariantValues")
                        .HasForeignKey("VariantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Variant");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManboShopAPI.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Attributes", b =>
                {
                    b.Navigation("ProductAttributeValues");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Banner", b =>
                {
                    b.Navigation("BannerDetails");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Brand", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Cart", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Category", b =>
                {
                    b.Navigation("Products");

                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Coupon", b =>
                {
                    b.Navigation("CouponConditions");

                    b.Navigation("OrderDetails");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.News", b =>
                {
                    b.Navigation("NewsDetails");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Product", b =>
                {
                    b.Navigation("BannerDetails");

                    b.Navigation("CartItems");

                    b.Navigation("Favorites");

                    b.Navigation("Feedbacks");

                    b.Navigation("NewsDetails");

                    b.Navigation("OrderDetails");

                    b.Navigation("ProductAttributeValues");

                    b.Navigation("ProductImages");

                    b.Navigation("ProductVariantValues");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.User", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Favorites");

                    b.Navigation("Feedbacks");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Variant", b =>
                {
                    b.Navigation("VariantValues");
                });
#pragma warning restore 612, 618
        }
    }
}
