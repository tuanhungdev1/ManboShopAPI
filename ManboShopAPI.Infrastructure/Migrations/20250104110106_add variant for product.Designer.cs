// <auto-generated />
using System;
using ManboShopAPI.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ManboShopAPI.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250104110106_add variant for product")]
    partial class addvariantforproduct
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AreaOrColonyOrStreetOrSectorOrVillage")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("BuildingOrCompanyOrApartment")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FlatOrHouse")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PinCode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Attributes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Attributes");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Banner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Banners");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.BannerDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BannerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BannerId");

                    b.HasIndex("ProductId");

                    b.ToTable("BannerDetails");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Brands");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 1, 4, 11, 1, 5, 667, DateTimeKind.Utc).AddTicks(3178),
                            ImageUrl = "https://example.com/images/nike.jpg",
                            Name = "Nike"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 1, 4, 11, 1, 5, 667, DateTimeKind.Utc).AddTicks(3534),
                            ImageUrl = "https://example.com/images/adidas.jpg",
                            Name = "Adidas"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 1, 4, 11, 1, 5, 667, DateTimeKind.Utc).AddTicks(3537),
                            ImageUrl = "https://example.com/images/gucci.jpg",
                            Name = "Gucci"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 1, 4, 11, 1, 5, 667, DateTimeKind.Utc).AddTicks(3538),
                            ImageUrl = "https://example.com/images/louis-vuitton.jpg",
                            Name = "Louis Vuitton"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2025, 1, 4, 11, 1, 5, 667, DateTimeKind.Utc).AddTicks(3539),
                            ImageUrl = "https://example.com/images/zara.jpg",
                            Name = "Zara"
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2025, 1, 4, 11, 1, 5, 667, DateTimeKind.Utc).AddTicks(3547),
                            ImageUrl = "https://example.com/images/h&m.jpg",
                            Name = "H&M"
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2025, 1, 4, 11, 1, 5, 667, DateTimeKind.Utc).AddTicks(3548),
                            ImageUrl = "https://example.com/images/chanel.jpg",
                            Name = "Chanel"
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2025, 1, 4, 11, 1, 5, 667, DateTimeKind.Utc).AddTicks(3549),
                            ImageUrl = "https://example.com/images/prada.jpg",
                            Name = "Prada"
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2025, 1, 4, 11, 1, 5, 667, DateTimeKind.Utc).AddTicks(3550),
                            ImageUrl = "https://example.com/images/versace.jpg",
                            Name = "Versace"
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2025, 1, 4, 11, 1, 5, 667, DateTimeKind.Utc).AddTicks(3551),
                            ImageUrl = "https://example.com/images/burberry.jpg",
                            Name = "Burberry"
                        },
                        new
                        {
                            Id = 11,
                            CreatedAt = new DateTime(2025, 1, 4, 11, 1, 5, 667, DateTimeKind.Utc).AddTicks(3552),
                            ImageUrl = "https://example.com/images/dior.jpg",
                            Name = "Dior"
                        },
                        new
                        {
                            Id = 12,
                            CreatedAt = new DateTime(2025, 1, 4, 11, 1, 5, 667, DateTimeKind.Utc).AddTicks(3553),
                            ImageUrl = "https://example.com/images/calvin-klein.jpg",
                            Name = "Calvin Klein"
                        },
                        new
                        {
                            Id = 13,
                            CreatedAt = new DateTime(2025, 1, 4, 11, 1, 5, 667, DateTimeKind.Utc).AddTicks(3554),
                            ImageUrl = "https://example.com/images/tommy-hilfiger.jpg",
                            Name = "Tommy Hilfiger"
                        },
                        new
                        {
                            Id = 14,
                            CreatedAt = new DateTime(2025, 1, 4, 11, 1, 5, 667, DateTimeKind.Utc).AddTicks(3555),
                            ImageUrl = "https://example.com/images/levis.jpg",
                            Name = "Levi's"
                        },
                        new
                        {
                            Id = 15,
                            CreatedAt = new DateTime(2025, 1, 4, 11, 1, 5, 667, DateTimeKind.Utc).AddTicks(3555),
                            ImageUrl = "https://example.com/images/uniqlo.jpg",
                            Name = "Uniqlo"
                        },
                        new
                        {
                            Id = 16,
                            CreatedAt = new DateTime(2025, 1, 4, 11, 1, 5, 667, DateTimeKind.Utc).AddTicks(3556),
                            ImageUrl = "https://example.com/images/lacoste.jpg",
                            Name = "Lacoste"
                        },
                        new
                        {
                            Id = 17,
                            CreatedAt = new DateTime(2025, 1, 4, 11, 1, 5, 667, DateTimeKind.Utc).AddTicks(3557),
                            ImageUrl = "https://example.com/images/the-north-face.jpg",
                            Name = "The North Face"
                        },
                        new
                        {
                            Id = 18,
                            CreatedAt = new DateTime(2025, 1, 4, 11, 1, 5, 667, DateTimeKind.Utc).AddTicks(3558),
                            ImageUrl = "https://example.com/images/ralph-lauren.jpg",
                            Name = "Ralph Lauren"
                        },
                        new
                        {
                            Id = 19,
                            CreatedAt = new DateTime(2025, 1, 4, 11, 1, 5, 667, DateTimeKind.Utc).AddTicks(3559),
                            ImageUrl = "https://example.com/images/puma.jpg",
                            Name = "Puma"
                        },
                        new
                        {
                            Id = 20,
                            CreatedAt = new DateTime(2025, 1, 4, 11, 1, 5, 667, DateTimeKind.Utc).AddTicks(3560),
                            ImageUrl = "https://example.com/images/hugo-boss.jpg",
                            Name = "Hugo Boss"
                        },
                        new
                        {
                            Id = 21,
                            CreatedAt = new DateTime(2025, 1, 4, 11, 1, 5, 667, DateTimeKind.Utc).AddTicks(3561),
                            ImageUrl = "https://example.com/images/armani.jpg",
                            Name = "Armani"
                        },
                        new
                        {
                            Id = 22,
                            CreatedAt = new DateTime(2025, 1, 4, 11, 1, 5, 667, DateTimeKind.Utc).AddTicks(3562),
                            ImageUrl = "https://example.com/images/balenciaga.jpg",
                            Name = "Balenciaga"
                        },
                        new
                        {
                            Id = 23,
                            CreatedAt = new DateTime(2025, 1, 4, 11, 1, 5, 667, DateTimeKind.Utc).AddTicks(3563),
                            ImageUrl = "https://example.com/images/fendi.jpg",
                            Name = "Fendi"
                        },
                        new
                        {
                            Id = 24,
                            CreatedAt = new DateTime(2025, 1, 4, 11, 1, 5, 667, DateTimeKind.Utc).AddTicks(3564),
                            ImageUrl = "https://example.com/images/givenchy.jpg",
                            Name = "Givenchy"
                        },
                        new
                        {
                            Id = 25,
                            CreatedAt = new DateTime(2025, 1, 4, 11, 1, 5, 667, DateTimeKind.Utc).AddTicks(3565),
                            ImageUrl = "https://example.com/images/hermes.jpg",
                            Name = "Hermès"
                        },
                        new
                        {
                            Id = 26,
                            CreatedAt = new DateTime(2025, 1, 4, 11, 1, 5, 667, DateTimeKind.Utc).AddTicks(3565),
                            ImageUrl = "https://example.com/images/salvatore-ferragamo.jpg",
                            Name = "Salvatore Ferragamo"
                        },
                        new
                        {
                            Id = 27,
                            CreatedAt = new DateTime(2025, 1, 4, 11, 1, 5, 667, DateTimeKind.Utc).AddTicks(3566),
                            ImageUrl = "https://example.com/images/valentino.jpg",
                            Name = "Valentino"
                        },
                        new
                        {
                            Id = 28,
                            CreatedAt = new DateTime(2025, 1, 4, 11, 1, 5, 667, DateTimeKind.Utc).AddTicks(3628),
                            ImageUrl = "https://example.com/images/dolce-gabbana.jpg",
                            Name = "Dolce & Gabbana"
                        },
                        new
                        {
                            Id = 29,
                            CreatedAt = new DateTime(2025, 1, 4, 11, 1, 5, 667, DateTimeKind.Utc).AddTicks(3629),
                            ImageUrl = "https://example.com/images/gap.jpg",
                            Name = "Gap"
                        },
                        new
                        {
                            Id = 30,
                            CreatedAt = new DateTime(2025, 1, 4, 11, 1, 5, 667, DateTimeKind.Utc).AddTicks(3638),
                            ImageUrl = "https://example.com/images/forever21.jpg",
                            Name = "Forever 21"
                        },
                        new
                        {
                            Id = 31,
                            CreatedAt = new DateTime(2025, 1, 4, 11, 1, 5, 667, DateTimeKind.Utc).AddTicks(3639),
                            ImageUrl = "https://example.com/images/new-balance.jpg",
                            Name = "New Balance"
                        },
                        new
                        {
                            Id = 32,
                            CreatedAt = new DateTime(2025, 1, 4, 11, 1, 5, 667, DateTimeKind.Utc).AddTicks(3640),
                            ImageUrl = "https://example.com/images/vans.jpg",
                            Name = "Vans"
                        },
                        new
                        {
                            Id = 33,
                            CreatedAt = new DateTime(2025, 1, 4, 11, 1, 5, 667, DateTimeKind.Utc).AddTicks(3640),
                            ImageUrl = "https://example.com/images/converse.jpg",
                            Name = "Converse"
                        },
                        new
                        {
                            Id = 34,
                            CreatedAt = new DateTime(2025, 1, 4, 11, 1, 5, 667, DateTimeKind.Utc).AddTicks(3642),
                            ImageUrl = "https://example.com/images/under-armour.jpg",
                            Name = "Under Armour"
                        },
                        new
                        {
                            Id = 35,
                            CreatedAt = new DateTime(2025, 1, 4, 11, 1, 5, 667, DateTimeKind.Utc).AddTicks(3643),
                            ImageUrl = "https://example.com/images/reebok.jpg",
                            Name = "Reebok"
                        },
                        new
                        {
                            Id = 36,
                            CreatedAt = new DateTime(2025, 1, 4, 11, 1, 5, 667, DateTimeKind.Utc).AddTicks(3644),
                            ImageUrl = "https://example.com/images/coach.jpg",
                            Name = "Coach"
                        },
                        new
                        {
                            Id = 37,
                            CreatedAt = new DateTime(2025, 1, 4, 11, 1, 5, 667, DateTimeKind.Utc).AddTicks(3645),
                            ImageUrl = "https://example.com/images/kate-spade.jpg",
                            Name = "Kate Spade"
                        },
                        new
                        {
                            Id = 38,
                            CreatedAt = new DateTime(2025, 1, 4, 11, 1, 5, 667, DateTimeKind.Utc).AddTicks(3646),
                            ImageUrl = "https://example.com/images/michael-kors.jpg",
                            Name = "Michael Kors"
                        },
                        new
                        {
                            Id = 39,
                            CreatedAt = new DateTime(2025, 1, 4, 11, 1, 5, 667, DateTimeKind.Utc).AddTicks(3646),
                            ImageUrl = "https://example.com/images/bally.jpg",
                            Name = "Bally"
                        },
                        new
                        {
                            Id = 40,
                            CreatedAt = new DateTime(2025, 1, 4, 11, 1, 5, 667, DateTimeKind.Utc).AddTicks(3647),
                            ImageUrl = "https://example.com/images/guess.jpg",
                            Name = "Guess"
                        });
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.CartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("ProductId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 1, 4, 11, 1, 3, 562, DateTimeKind.Utc).AddTicks(3012),
                            ImageUrl = "https://example.com/images/men-clothing.jpg",
                            Name = "Men's Clothing"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 1, 4, 11, 1, 3, 562, DateTimeKind.Utc).AddTicks(3484),
                            ImageUrl = "https://example.com/images/women-clothing.jpg",
                            Name = "Women's Clothing"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 1, 4, 11, 1, 3, 562, DateTimeKind.Utc).AddTicks(3485),
                            ImageUrl = "https://example.com/images/children-clothing.jpg",
                            Name = "Children's Clothing"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 1, 4, 11, 1, 3, 562, DateTimeKind.Utc).AddTicks(3487),
                            ImageUrl = "https://example.com/images/shoes.jpg",
                            Name = "Shoes"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2025, 1, 4, 11, 1, 3, 562, DateTimeKind.Utc).AddTicks(3488),
                            ImageUrl = "https://example.com/images/bags.jpg",
                            Name = "Bags"
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2025, 1, 4, 11, 1, 3, 562, DateTimeKind.Utc).AddTicks(3490),
                            ImageUrl = "https://example.com/images/accessories.jpg",
                            Name = "Accessories"
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2025, 1, 4, 11, 1, 3, 562, DateTimeKind.Utc).AddTicks(3491),
                            ImageUrl = "https://example.com/images/watches.jpg",
                            Name = "Watches"
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2025, 1, 4, 11, 1, 3, 562, DateTimeKind.Utc).AddTicks(3492),
                            ImageUrl = "https://example.com/images/sportswear.jpg",
                            Name = "Sportswear"
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2025, 1, 4, 11, 1, 3, 562, DateTimeKind.Utc).AddTicks(3493),
                            ImageUrl = "https://example.com/images/swimwear.jpg",
                            Name = "Swimwear"
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2025, 1, 4, 11, 1, 3, 562, DateTimeKind.Utc).AddTicks(3494),
                            ImageUrl = "https://example.com/images/formal-wear.jpg",
                            Name = "Formal Wear"
                        },
                        new
                        {
                            Id = 11,
                            CreatedAt = new DateTime(2025, 1, 4, 11, 1, 3, 562, DateTimeKind.Utc).AddTicks(3495),
                            ImageUrl = "https://example.com/images/casual-wear.jpg",
                            Name = "Casual Wear"
                        },
                        new
                        {
                            Id = 12,
                            CreatedAt = new DateTime(2025, 1, 4, 11, 1, 3, 562, DateTimeKind.Utc).AddTicks(3496),
                            ImageUrl = "https://example.com/images/t-shirts.jpg",
                            Name = "T-Shirts"
                        },
                        new
                        {
                            Id = 13,
                            CreatedAt = new DateTime(2025, 1, 4, 11, 1, 3, 562, DateTimeKind.Utc).AddTicks(3497),
                            ImageUrl = "https://example.com/images/jeans.jpg",
                            Name = "Jeans"
                        },
                        new
                        {
                            Id = 14,
                            CreatedAt = new DateTime(2025, 1, 4, 11, 1, 3, 562, DateTimeKind.Utc).AddTicks(3498),
                            ImageUrl = "https://example.com/images/jackets-coats.jpg",
                            Name = "Jackets & Coats"
                        },
                        new
                        {
                            Id = 15,
                            CreatedAt = new DateTime(2025, 1, 4, 11, 1, 3, 562, DateTimeKind.Utc).AddTicks(3499),
                            ImageUrl = "https://example.com/images/hats-caps.jpg",
                            Name = "Hats & Caps"
                        },
                        new
                        {
                            Id = 16,
                            CreatedAt = new DateTime(2025, 1, 4, 11, 1, 3, 562, DateTimeKind.Utc).AddTicks(3500),
                            ImageUrl = "https://example.com/images/scarves.jpg",
                            Name = "Scarves"
                        },
                        new
                        {
                            Id = 17,
                            CreatedAt = new DateTime(2025, 1, 4, 11, 1, 3, 562, DateTimeKind.Utc).AddTicks(3501),
                            ImageUrl = "https://example.com/images/sunglasses.jpg",
                            Name = "Sunglasses"
                        },
                        new
                        {
                            Id = 18,
                            CreatedAt = new DateTime(2025, 1, 4, 11, 1, 3, 562, DateTimeKind.Utc).AddTicks(3502),
                            ImageUrl = "https://example.com/images/belts.jpg",
                            Name = "Belts"
                        },
                        new
                        {
                            Id = 19,
                            CreatedAt = new DateTime(2025, 1, 4, 11, 1, 3, 562, DateTimeKind.Utc).AddTicks(3503),
                            ImageUrl = "https://example.com/images/undergarments.jpg",
                            Name = "Undergarments"
                        },
                        new
                        {
                            Id = 20,
                            CreatedAt = new DateTime(2025, 1, 4, 11, 1, 3, 562, DateTimeKind.Utc).AddTicks(3504),
                            ImageUrl = "https://example.com/images/sports-shoes.jpg",
                            Name = "Sports Shoes"
                        },
                        new
                        {
                            Id = 21,
                            CreatedAt = new DateTime(2025, 1, 4, 11, 1, 3, 562, DateTimeKind.Utc).AddTicks(3505),
                            ImageUrl = "https://example.com/images/boots.jpg",
                            Name = "Boots"
                        },
                        new
                        {
                            Id = 22,
                            CreatedAt = new DateTime(2025, 1, 4, 11, 1, 3, 562, DateTimeKind.Utc).AddTicks(3506),
                            ImageUrl = "https://example.com/images/high-heels.jpg",
                            Name = "High Heels"
                        },
                        new
                        {
                            Id = 23,
                            CreatedAt = new DateTime(2025, 1, 4, 11, 1, 3, 562, DateTimeKind.Utc).AddTicks(3507),
                            ImageUrl = "https://example.com/images/sneakers.jpg",
                            Name = "Sneakers"
                        },
                        new
                        {
                            Id = 24,
                            CreatedAt = new DateTime(2025, 1, 4, 11, 1, 3, 562, DateTimeKind.Utc).AddTicks(3508),
                            ImageUrl = "https://example.com/images/suits.jpg",
                            Name = "Suits"
                        },
                        new
                        {
                            Id = 25,
                            CreatedAt = new DateTime(2025, 1, 4, 11, 1, 3, 562, DateTimeKind.Utc).AddTicks(3508),
                            ImageUrl = "https://example.com/images/dresses.jpg",
                            Name = "Dresses"
                        },
                        new
                        {
                            Id = 26,
                            CreatedAt = new DateTime(2025, 1, 4, 11, 1, 3, 562, DateTimeKind.Utc).AddTicks(3509),
                            ImageUrl = "https://example.com/images/blouses.jpg",
                            Name = "Blouses"
                        },
                        new
                        {
                            Id = 27,
                            CreatedAt = new DateTime(2025, 1, 4, 11, 1, 3, 562, DateTimeKind.Utc).AddTicks(3510),
                            ImageUrl = "https://example.com/images/skirts.jpg",
                            Name = "Skirts"
                        },
                        new
                        {
                            Id = 28,
                            CreatedAt = new DateTime(2025, 1, 4, 11, 1, 3, 562, DateTimeKind.Utc).AddTicks(3511),
                            ImageUrl = "https://example.com/images/shorts.jpg",
                            Name = "Shorts"
                        },
                        new
                        {
                            Id = 29,
                            CreatedAt = new DateTime(2025, 1, 4, 11, 1, 3, 562, DateTimeKind.Utc).AddTicks(3512),
                            ImageUrl = "https://example.com/images/pajamas.jpg",
                            Name = "Pajamas"
                        },
                        new
                        {
                            Id = 30,
                            CreatedAt = new DateTime(2025, 1, 4, 11, 1, 3, 562, DateTimeKind.Utc).AddTicks(3513),
                            ImageUrl = "https://example.com/images/outerwear.jpg",
                            Name = "Outerwear"
                        },
                        new
                        {
                            Id = 31,
                            CreatedAt = new DateTime(2025, 1, 4, 11, 1, 3, 562, DateTimeKind.Utc).AddTicks(3514),
                            ImageUrl = "https://example.com/images/activewear.jpg",
                            Name = "Activewear"
                        },
                        new
                        {
                            Id = 32,
                            CreatedAt = new DateTime(2025, 1, 4, 11, 1, 3, 562, DateTimeKind.Utc).AddTicks(3515),
                            ImageUrl = "https://example.com/images/raincoats.jpg",
                            Name = "Raincoats"
                        },
                        new
                        {
                            Id = 33,
                            CreatedAt = new DateTime(2025, 1, 4, 11, 1, 3, 562, DateTimeKind.Utc).AddTicks(3516),
                            ImageUrl = "https://example.com/images/cardigans.jpg",
                            Name = "Cardigans"
                        },
                        new
                        {
                            Id = 34,
                            CreatedAt = new DateTime(2025, 1, 4, 11, 1, 3, 562, DateTimeKind.Utc).AddTicks(3517),
                            ImageUrl = "https://example.com/images/sweaters.jpg",
                            Name = "Sweaters"
                        },
                        new
                        {
                            Id = 35,
                            CreatedAt = new DateTime(2025, 1, 4, 11, 1, 3, 562, DateTimeKind.Utc).AddTicks(3518),
                            ImageUrl = "https://example.com/images/leggings.jpg",
                            Name = "Leggings"
                        },
                        new
                        {
                            Id = 36,
                            CreatedAt = new DateTime(2025, 1, 4, 11, 1, 3, 562, DateTimeKind.Utc).AddTicks(3519),
                            ImageUrl = "https://example.com/images/tracksuits.jpg",
                            Name = "Tracksuits"
                        },
                        new
                        {
                            Id = 37,
                            CreatedAt = new DateTime(2025, 1, 4, 11, 1, 3, 562, DateTimeKind.Utc).AddTicks(3520),
                            ImageUrl = "https://example.com/images/gloves.jpg",
                            Name = "Gloves"
                        },
                        new
                        {
                            Id = 38,
                            CreatedAt = new DateTime(2025, 1, 4, 11, 1, 3, 562, DateTimeKind.Utc).AddTicks(3521),
                            ImageUrl = "https://example.com/images/socks.jpg",
                            Name = "Socks"
                        },
                        new
                        {
                            Id = 39,
                            CreatedAt = new DateTime(2025, 1, 4, 11, 1, 3, 562, DateTimeKind.Utc).AddTicks(3522),
                            ImageUrl = "https://example.com/images/loungewear.jpg",
                            Name = "Loungewear"
                        },
                        new
                        {
                            Id = 40,
                            CreatedAt = new DateTime(2025, 1, 4, 11, 1, 3, 562, DateTimeKind.Utc).AddTicks(3523),
                            ImageUrl = "https://example.com/images/winter-wear.jpg",
                            Name = "Winter Wear"
                        });
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Coupon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CurrentUsages")
                        .HasColumnType("int");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("MaxUsages")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Coupons");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.CouponCondition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Attribute")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("CouponId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DiscountAmount")
                        .HasColumnType("int");

                    b.Property<string>("Operator")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Value")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CouponId");

                    b.ToTable("CouponConditions");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Favorite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Favorites");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Star")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.News", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("News");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.NewsDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("NewsId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("NewsId");

                    b.HasIndex("ProductId");

                    b.ToTable("NewsDetails");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CouponId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("SessionId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CouponId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.OrderDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CouponId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CouponId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BrandId")
                        .HasColumnType("int");

                    b.Property<int>("BuyTurn")
                        .HasColumnType("int");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("OldPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("Specification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.ProductAttributeValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AttributeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AttributeId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductAttributeValues");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.ProductImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductImages");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.ProductVariantValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("OldPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("Sku")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductVariantValues");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfilePictureUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("VerificationCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("VerificationCodeExpiryTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            Address = "74378 Mayert Mission, East Alvaberg, Mauritania",
                            ConcurrencyStamp = "58f33fa7-a7d8-4541-abc4-43077fb894bf",
                            CreatedAt = new DateTime(2024, 11, 17, 11, 1, 3, 835, DateTimeKind.Utc).AddTicks(7711),
                            Email = "America.Hoeger39@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "America",
                            LastName = "Hoeger",
                            LockoutEnabled = false,
                            NormalizedEmail = "AMERICA.HOEGER39@GMAIL.COM",
                            NormalizedUserName = "AMERICA_HOEGER",
                            PasswordHash = "AQAAAAIAAYagAAAAEGyX/uueOhzpn1HIp9fD3ohZGjzXMXyoj/UYk8XFWWFEA/bp+U/G1enQc6VUqdDBog==",
                            PhoneNumber = "159-106-6129",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/412.jpg",
                            TwoFactorEnabled = false,
                            UserName = "America_Hoeger"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            Address = "179 Batz Junctions, Monroeborough, Suriname",
                            ConcurrencyStamp = "22eb3d65-19dd-4ecf-a5d2-f724c08b0531",
                            CreatedAt = new DateTime(2024, 8, 28, 11, 1, 3, 837, DateTimeKind.Utc).AddTicks(2731),
                            Email = "Van.Goyette@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Van",
                            LastName = "Goyette",
                            LockoutEnabled = false,
                            NormalizedEmail = "VAN.GOYETTE@YAHOO.COM",
                            NormalizedUserName = "VAN67",
                            PasswordHash = "AQAAAAIAAYagAAAAEPnvCf640Cz7UHB9fdGzbtfyB7q6GsPK8LNOmXTa2wiDhhqC8YQvSf90n23mqClJdA==",
                            PhoneNumber = "453-986-2588",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/291.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Van67"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            Address = "891 Josianne Meadow, North Lon, Cocos (Keeling) Islands",
                            ConcurrencyStamp = "03ad9578-df1c-441e-9635-8ca8c77d13c0",
                            CreatedAt = new DateTime(2024, 4, 15, 11, 1, 3, 837, DateTimeKind.Utc).AddTicks(3082),
                            Email = "Watson_Sawayn91@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Watson",
                            LastName = "Sawayn",
                            LockoutEnabled = false,
                            NormalizedEmail = "WATSON_SAWAYN91@YAHOO.COM",
                            NormalizedUserName = "WATSON.SAWAYN76",
                            PasswordHash = "AQAAAAIAAYagAAAAEJys4pl5NMC2BQB0EodJDOpN+tA6gTyX055nq+0UTulU4FOR08VdZmcSDKCzo1DpuQ==",
                            PhoneNumber = "017-039-2095",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/1025.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Watson.Sawayn76"
                        },
                        new
                        {
                            Id = 4,
                            AccessFailedCount = 0,
                            Address = "5248 Jess Curve, Torphyview, Barbados",
                            ConcurrencyStamp = "b5bbaa0b-b66c-4652-96dc-03b1755e025e",
                            CreatedAt = new DateTime(2024, 12, 29, 11, 1, 3, 837, DateTimeKind.Utc).AddTicks(3414),
                            Email = "Greg_Breitenberg@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Greg",
                            LastName = "Breitenberg",
                            LockoutEnabled = false,
                            NormalizedEmail = "GREG_BREITENBERG@HOTMAIL.COM",
                            NormalizedUserName = "GREG97",
                            PasswordHash = "AQAAAAIAAYagAAAAEMad3g2MrZmvhQWSA4pg/eWor2jalsRVhgwm8MWactMzpS3fyzJRwZQiMqzhLvgSpQ==",
                            PhoneNumber = "420-103-1460",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/789.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Greg97"
                        },
                        new
                        {
                            Id = 5,
                            AccessFailedCount = 0,
                            Address = "552 Richard Fields, South Elzahaven, India",
                            ConcurrencyStamp = "689d77b5-83e1-4fba-8173-933f46034cfa",
                            CreatedAt = new DateTime(2024, 12, 11, 11, 1, 3, 837, DateTimeKind.Utc).AddTicks(3697),
                            Email = "Euna.Hilll22@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Euna",
                            LastName = "Hilll",
                            LockoutEnabled = false,
                            NormalizedEmail = "EUNA.HILLL22@HOTMAIL.COM",
                            NormalizedUserName = "EUNA72",
                            PasswordHash = "AQAAAAIAAYagAAAAEJsDg0Wg8gogvG+pY/nfkNloWo9AEUHp3FLkTDVv50B6DQF1gS4CLRGnDbwgfaPayQ==",
                            PhoneNumber = "419-886-2337",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/868.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Euna72"
                        },
                        new
                        {
                            Id = 6,
                            AccessFailedCount = 0,
                            Address = "4815 Kuphal Crest, Patsyport, French Southern Territories",
                            ConcurrencyStamp = "0325efd9-6424-4acc-a600-3582b45f836b",
                            CreatedAt = new DateTime(2024, 11, 16, 11, 1, 3, 837, DateTimeKind.Utc).AddTicks(5052),
                            Email = "Jonatan_Langosh32@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Jonatan",
                            LastName = "Langosh",
                            LockoutEnabled = false,
                            NormalizedEmail = "JONATAN_LANGOSH32@YAHOO.COM",
                            NormalizedUserName = "JONATAN69",
                            PasswordHash = "AQAAAAIAAYagAAAAEDzeWnFLRPXq4Q8aTAnGLMiZyLA7Z7fzooc2vmXL8gzNFMlNBqqq0CsjmIEMR3bDsw==",
                            PhoneNumber = "091-393-9381",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/460.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Jonatan69"
                        },
                        new
                        {
                            Id = 7,
                            AccessFailedCount = 0,
                            Address = "34465 MacGyver Shore, North Virgie, Greece",
                            ConcurrencyStamp = "5bf109cf-d9ff-4954-aa28-1837add8b86b",
                            CreatedAt = new DateTime(2024, 10, 5, 11, 1, 3, 837, DateTimeKind.Utc).AddTicks(5430),
                            Email = "Alivia15@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Alivia",
                            LastName = "Kozey",
                            LockoutEnabled = false,
                            NormalizedEmail = "ALIVIA15@YAHOO.COM",
                            NormalizedUserName = "ALIVIA86",
                            PasswordHash = "AQAAAAIAAYagAAAAED1MwbJ3elDe/pVRiZAVkXxaJ12z8AU+fK/3xXI7K6fPNzzXEVFG3zB7peEw0A/Wwg==",
                            PhoneNumber = "038-833-3428",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/335.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Alivia86"
                        },
                        new
                        {
                            Id = 8,
                            AccessFailedCount = 0,
                            Address = "388 Alphonso Valley, Goyettebury, Chile",
                            ConcurrencyStamp = "f76c173e-1222-4df4-a9b9-f967aa4e1e8f",
                            CreatedAt = new DateTime(2024, 3, 19, 11, 1, 3, 837, DateTimeKind.Utc).AddTicks(5749),
                            Email = "Ophelia.Cummings@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Ophelia",
                            LastName = "Cummings",
                            LockoutEnabled = false,
                            NormalizedEmail = "OPHELIA.CUMMINGS@GMAIL.COM",
                            NormalizedUserName = "OPHELIA_CUMMINGS36",
                            PasswordHash = "AQAAAAIAAYagAAAAECCDb8vCqZTWEj8rIDoYk/SNQUtoVU83b8H8hVbRSJFNNrflnwv/AuSNC4bCsL/aIg==",
                            PhoneNumber = "186-778-3564",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/527.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Ophelia_Cummings36"
                        },
                        new
                        {
                            Id = 9,
                            AccessFailedCount = 0,
                            Address = "298 Pamela View, New Jewelfurt, United Arab Emirates",
                            ConcurrencyStamp = "ba7110e1-add8-4c32-afaf-7576fb1da911",
                            CreatedAt = new DateTime(2024, 11, 5, 11, 1, 3, 837, DateTimeKind.Utc).AddTicks(6006),
                            Email = "Okey_Spencer36@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Okey",
                            LastName = "Spencer",
                            LockoutEnabled = false,
                            NormalizedEmail = "OKEY_SPENCER36@YAHOO.COM",
                            NormalizedUserName = "OKEY25",
                            PasswordHash = "AQAAAAIAAYagAAAAEFgukEZY2kPwQzTjXQJ7Kh3n6z1UiKRTw5ND7LTzGLr4NbiPon0EVekHAEtJHuLhoQ==",
                            PhoneNumber = "920-422-6403",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/571.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Okey25"
                        },
                        new
                        {
                            Id = 10,
                            AccessFailedCount = 0,
                            Address = "4319 O'Reilly Manors, West Dangelo, Argentina",
                            ConcurrencyStamp = "4b71a0aa-8571-4f96-8676-c566cde22176",
                            CreatedAt = new DateTime(2024, 7, 18, 11, 1, 3, 837, DateTimeKind.Utc).AddTicks(6284),
                            Email = "Hubert_Gerhold91@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Hubert",
                            LastName = "Gerhold",
                            LockoutEnabled = false,
                            NormalizedEmail = "HUBERT_GERHOLD91@YAHOO.COM",
                            NormalizedUserName = "HUBERT.GERHOLD29",
                            PasswordHash = "AQAAAAIAAYagAAAAEBtbAehefkHmCHtmt5jo2fBOJC/0lj1ZKmcrSGC4VOyG8w5GuSzcyYPxn857JhIaIA==",
                            PhoneNumber = "560-710-7441",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/586.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Hubert.Gerhold29"
                        },
                        new
                        {
                            Id = 11,
                            AccessFailedCount = 0,
                            Address = "1057 Abernathy Court, Juniusmouth, Panama",
                            ConcurrencyStamp = "327c6250-8624-4218-8256-bb28ca098396",
                            CreatedAt = new DateTime(2024, 10, 14, 11, 1, 3, 837, DateTimeKind.Utc).AddTicks(6519),
                            Email = "Tony.Fahey@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Tony",
                            LastName = "Fahey",
                            LockoutEnabled = false,
                            NormalizedEmail = "TONY.FAHEY@YAHOO.COM",
                            NormalizedUserName = "TONY_FAHEY",
                            PasswordHash = "AQAAAAIAAYagAAAAEDm6ou8eX2s+Z/G/LvA1HBidlnM0HqwnK2i7u5YYzeJAQ00pyaxAosaqjWl4kDReQQ==",
                            PhoneNumber = "031-296-4568",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/1127.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Tony_Fahey"
                        },
                        new
                        {
                            Id = 12,
                            AccessFailedCount = 0,
                            Address = "08567 Enid Stravenue, South Lorenton, Russian Federation",
                            ConcurrencyStamp = "b124d6c8-7de5-442c-bc58-bcd4c30bc570",
                            CreatedAt = new DateTime(2024, 4, 17, 11, 1, 3, 837, DateTimeKind.Utc).AddTicks(6799),
                            Email = "Ian12@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Ian",
                            LastName = "Nolan",
                            LockoutEnabled = false,
                            NormalizedEmail = "IAN12@YAHOO.COM",
                            NormalizedUserName = "IAN_NOLAN48",
                            PasswordHash = "AQAAAAIAAYagAAAAEMfoiCPnsbnrSvwzJ6wyrbUqMWuYhKZb2FdQO9dfRDru28GN5QOAyXs6CHDCYNfz8A==",
                            PhoneNumber = "470-609-6289",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/737.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Ian_Nolan48"
                        },
                        new
                        {
                            Id = 13,
                            AccessFailedCount = 0,
                            Address = "058 Harrison Brooks, West Rylee, French Polynesia",
                            ConcurrencyStamp = "aff2e763-f9c1-4840-9738-c569b5dc33ff",
                            CreatedAt = new DateTime(2024, 6, 16, 11, 1, 3, 837, DateTimeKind.Utc).AddTicks(7050),
                            Email = "Jakob14@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Jakob",
                            LastName = "Murray",
                            LockoutEnabled = false,
                            NormalizedEmail = "JAKOB14@GMAIL.COM",
                            NormalizedUserName = "JAKOB65",
                            PasswordHash = "AQAAAAIAAYagAAAAELj3lT9IB3tHUKpOXg9GSc0yg0N2UGWONzvVL50cg79hn0JKdjyvEOKzSvplLGzVxg==",
                            PhoneNumber = "031-888-3799",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/1096.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Jakob65"
                        },
                        new
                        {
                            Id = 14,
                            AccessFailedCount = 0,
                            Address = "39925 Michaela Inlet, Busterport, Tokelau",
                            ConcurrencyStamp = "fa1a2055-1aec-4281-bc1b-5ea80245f00a",
                            CreatedAt = new DateTime(2024, 2, 19, 11, 1, 3, 837, DateTimeKind.Utc).AddTicks(7342),
                            Email = "Della.Flatley@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Della",
                            LastName = "Flatley",
                            LockoutEnabled = false,
                            NormalizedEmail = "DELLA.FLATLEY@HOTMAIL.COM",
                            NormalizedUserName = "DELLA_FLATLEY54",
                            PasswordHash = "AQAAAAIAAYagAAAAEL71e4emWIlFwp0iUfcxQX7Tie9SNN0GS6nNN1JANfUih2LycXOCeL8oaT2a8h4ufQ==",
                            PhoneNumber = "160-808-5647",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/387.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Della_Flatley54"
                        },
                        new
                        {
                            Id = 15,
                            AccessFailedCount = 0,
                            Address = "6216 Mann Radial, East Treport, Peru",
                            ConcurrencyStamp = "256fdc31-fe10-41ce-ba0f-9b760fe753f2",
                            CreatedAt = new DateTime(2024, 7, 17, 11, 1, 3, 837, DateTimeKind.Utc).AddTicks(7617),
                            Email = "Heloise6@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Heloise",
                            LastName = "Heidenreich",
                            LockoutEnabled = false,
                            NormalizedEmail = "HELOISE6@GMAIL.COM",
                            NormalizedUserName = "HELOISE_HEIDENREICH10",
                            PasswordHash = "AQAAAAIAAYagAAAAELXIL0vuWF9woan/fSvT2WZo8gqM2n4nZ1IJoiXz5ZeRYV2Ri8ZOaI1NBWQ3TvHZCA==",
                            PhoneNumber = "547-910-9305",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/1248.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Heloise_Heidenreich10"
                        },
                        new
                        {
                            Id = 16,
                            AccessFailedCount = 0,
                            Address = "23439 Rippin Turnpike, Murphyport, Suriname",
                            ConcurrencyStamp = "4798be86-2fc6-484c-9770-8b6dfd414beb",
                            CreatedAt = new DateTime(2024, 10, 7, 11, 1, 3, 837, DateTimeKind.Utc).AddTicks(7858),
                            Email = "Johanna_Jerde@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Johanna",
                            LastName = "Jerde",
                            LockoutEnabled = false,
                            NormalizedEmail = "JOHANNA_JERDE@YAHOO.COM",
                            NormalizedUserName = "JOHANNA5",
                            PasswordHash = "AQAAAAIAAYagAAAAEJrkbOH3b3fDudiKHg+aJuNvD3v1HZNuxKHoiI4BA/y1jY1lDLtW4QlB1j24D7maBw==",
                            PhoneNumber = "164-233-5894",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/1046.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Johanna5"
                        },
                        new
                        {
                            Id = 17,
                            AccessFailedCount = 0,
                            Address = "084 Salvador Walks, West Lethashire, Palau",
                            ConcurrencyStamp = "dae67923-466c-4091-8bb3-8d7f57d19f3c",
                            CreatedAt = new DateTime(2024, 3, 5, 11, 1, 3, 837, DateTimeKind.Utc).AddTicks(8108),
                            Email = "Noemy32@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Noemy",
                            LastName = "Borer",
                            LockoutEnabled = false,
                            NormalizedEmail = "NOEMY32@YAHOO.COM",
                            NormalizedUserName = "NOEMY_BORER36",
                            PasswordHash = "AQAAAAIAAYagAAAAEAPkbizQq6AVJ3ESDRa310nUMIMGwS7dOPOey0aoQr01VTCYg0w6HDMsS6ppb/mMXw==",
                            PhoneNumber = "174-136-3489",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/67.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Noemy_Borer36"
                        },
                        new
                        {
                            Id = 18,
                            AccessFailedCount = 0,
                            Address = "876 Upton Heights, Schneidertown, San Marino",
                            ConcurrencyStamp = "80bc0676-4039-4a51-a808-11b22a4aa2d3",
                            CreatedAt = new DateTime(2024, 10, 21, 11, 1, 3, 837, DateTimeKind.Utc).AddTicks(8380),
                            Email = "Torrance_Boyle@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Torrance",
                            LastName = "Boyle",
                            LockoutEnabled = false,
                            NormalizedEmail = "TORRANCE_BOYLE@YAHOO.COM",
                            NormalizedUserName = "TORRANCE.BOYLE15",
                            PasswordHash = "AQAAAAIAAYagAAAAEDZBcv3NWsTwtojwuXPcoEuoacYTtoXhI4vNVOQgkzf0bgi4eU/tnfpZDqMr2xOe7w==",
                            PhoneNumber = "624-709-7376",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/311.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Torrance.Boyle15"
                        },
                        new
                        {
                            Id = 19,
                            AccessFailedCount = 0,
                            Address = "89293 Dameon Oval, East Murlton, Northern Mariana Islands",
                            ConcurrencyStamp = "b23b0f2a-4881-4595-bc85-8157acc8cb37",
                            CreatedAt = new DateTime(2024, 5, 26, 11, 1, 3, 837, DateTimeKind.Utc).AddTicks(8688),
                            Email = "Lon80@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Lon",
                            LastName = "Cummerata",
                            LockoutEnabled = false,
                            NormalizedEmail = "LON80@YAHOO.COM",
                            NormalizedUserName = "LON.CUMMERATA67",
                            PasswordHash = "AQAAAAIAAYagAAAAEFN26nPjgpRSu2n2qV4CDh6Mnvoe7CWZ86DB5irEI9OusDTji9R7+zkXcidK2AuK5A==",
                            PhoneNumber = "459-726-0107",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/436.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Lon.Cummerata67"
                        },
                        new
                        {
                            Id = 20,
                            AccessFailedCount = 0,
                            Address = "413 Braun Flat, Schowalterfurt, Mauritania",
                            ConcurrencyStamp = "7d4064a4-fd0c-446b-b873-09a25a5247e3",
                            CreatedAt = new DateTime(2024, 7, 3, 11, 1, 3, 837, DateTimeKind.Utc).AddTicks(8913),
                            Email = "Edwardo.Kozey@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Edwardo",
                            LastName = "Kozey",
                            LockoutEnabled = false,
                            NormalizedEmail = "EDWARDO.KOZEY@HOTMAIL.COM",
                            NormalizedUserName = "EDWARDO87",
                            PasswordHash = "AQAAAAIAAYagAAAAEJzC1w8dzhOofgDwyZHnUQDOfW+jBI9UjJ7xSKYGh+PzejCF77k5+wiqA4DE6DLaww==",
                            PhoneNumber = "323-911-8132",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/1226.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Edwardo87"
                        },
                        new
                        {
                            Id = 21,
                            AccessFailedCount = 0,
                            Address = "95505 Marks Route, Lake Fleta, Cayman Islands",
                            ConcurrencyStamp = "b227dd2a-bd28-4b25-bf81-a9645da71db7",
                            CreatedAt = new DateTime(2024, 9, 30, 11, 1, 3, 837, DateTimeKind.Utc).AddTicks(9168),
                            Email = "Abigail_Koss@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Abigail",
                            LastName = "Koss",
                            LockoutEnabled = false,
                            NormalizedEmail = "ABIGAIL_KOSS@GMAIL.COM",
                            NormalizedUserName = "ABIGAIL_KOSS93",
                            PasswordHash = "AQAAAAIAAYagAAAAELEHSRt5WvQ50ZVhb0bqM5Iw6q54NHGSo1AH9RpJ5UZStUaz9GDzLVVtpogR+3Eh7Q==",
                            PhoneNumber = "363-593-9316",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/607.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Abigail_Koss93"
                        },
                        new
                        {
                            Id = 22,
                            AccessFailedCount = 0,
                            Address = "169 Hayes Lake, Turnerton, Japan",
                            ConcurrencyStamp = "8ac3aa37-db07-44ed-b2ea-2def3c45e4a6",
                            CreatedAt = new DateTime(2024, 3, 9, 11, 1, 3, 837, DateTimeKind.Utc).AddTicks(9450),
                            Email = "Madyson.Wyman19@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Madyson",
                            LastName = "Wyman",
                            LockoutEnabled = false,
                            NormalizedEmail = "MADYSON.WYMAN19@GMAIL.COM",
                            NormalizedUserName = "MADYSON_WYMAN70",
                            PasswordHash = "AQAAAAIAAYagAAAAEKUjcqhqTNzR+yvKwNH2aCML0KzBWARGbZPoxBKk2llDPNNYfLPRmkGUbONLP7j30A==",
                            PhoneNumber = "780-117-3534",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/176.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Madyson_Wyman70"
                        },
                        new
                        {
                            Id = 23,
                            AccessFailedCount = 0,
                            Address = "3249 Witting Circle, Corneliusburgh, Vanuatu",
                            ConcurrencyStamp = "55b1760e-a2f7-447f-b8cc-bb6e1d5552ac",
                            CreatedAt = new DateTime(2024, 11, 25, 11, 1, 3, 837, DateTimeKind.Utc).AddTicks(9704),
                            Email = "Braeden51@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Braeden",
                            LastName = "Hilll",
                            LockoutEnabled = false,
                            NormalizedEmail = "BRAEDEN51@HOTMAIL.COM",
                            NormalizedUserName = "BRAEDEN34",
                            PasswordHash = "AQAAAAIAAYagAAAAELQNOmgdJLzwUidg44lCg1JIu6FezElSjMc0ZXcbNmjp9K/iZ1RFhQyfRWU1H+s8Yw==",
                            PhoneNumber = "639-826-2947",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/315.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Braeden34"
                        },
                        new
                        {
                            Id = 24,
                            AccessFailedCount = 0,
                            Address = "8851 Stephon Fork, Port Juliafort, Honduras",
                            ConcurrencyStamp = "77450636-6659-4d62-af4a-6e38fe2ae193",
                            CreatedAt = new DateTime(2024, 9, 22, 11, 1, 3, 837, DateTimeKind.Utc).AddTicks(9985),
                            Email = "Johnson97@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Johnson",
                            LastName = "Brekke",
                            LockoutEnabled = false,
                            NormalizedEmail = "JOHNSON97@YAHOO.COM",
                            NormalizedUserName = "JOHNSON.BREKKE54",
                            PasswordHash = "AQAAAAIAAYagAAAAEAVD+azjeM3zID0wt1KGYeyQhEu1Q4cKTx/TIfZVU4PR/OkuEIkEaml0G62t4R9m0w==",
                            PhoneNumber = "558-766-6005",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/247.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Johnson.Brekke54"
                        },
                        new
                        {
                            Id = 25,
                            AccessFailedCount = 0,
                            Address = "892 Harvey Pines, East Ritastad, Republic of Korea",
                            ConcurrencyStamp = "bcece5cf-1351-4835-83a9-a31bdb8d4bb2",
                            CreatedAt = new DateTime(2024, 5, 25, 11, 1, 3, 838, DateTimeKind.Utc).AddTicks(279),
                            Email = "Rosario.Morissette20@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Rosario",
                            LastName = "Morissette",
                            LockoutEnabled = false,
                            NormalizedEmail = "ROSARIO.MORISSETTE20@YAHOO.COM",
                            NormalizedUserName = "ROSARIO.MORISSETTE42",
                            PasswordHash = "AQAAAAIAAYagAAAAEDCuAtusCS/t6KlQJwakxJSKNKcwwQwMk4JxPya+BnQbzfgdELWWQcchoIHqFsjp2A==",
                            PhoneNumber = "301-516-0692",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/694.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Rosario.Morissette42"
                        },
                        new
                        {
                            Id = 26,
                            AccessFailedCount = 0,
                            Address = "66652 Torphy Ridge, New Cullen, Germany",
                            ConcurrencyStamp = "6100813f-5cc1-41ba-90a9-bcc4898b430f",
                            CreatedAt = new DateTime(2024, 10, 8, 11, 1, 3, 838, DateTimeKind.Utc).AddTicks(534),
                            Email = "Hosea.Kunze29@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Hosea",
                            LastName = "Kunze",
                            LockoutEnabled = false,
                            NormalizedEmail = "HOSEA.KUNZE29@GMAIL.COM",
                            NormalizedUserName = "HOSEA_KUNZE88",
                            PasswordHash = "AQAAAAIAAYagAAAAEKyDBddZI+74KjE1yHNAWvYvclMGqfPwSgl3TpuVkonxW7weY+xsdYKUo4+d5wn2xg==",
                            PhoneNumber = "266-101-6562",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/1036.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Hosea_Kunze88"
                        },
                        new
                        {
                            Id = 27,
                            AccessFailedCount = 0,
                            Address = "6986 Georgiana Plains, Verniceville, Angola",
                            ConcurrencyStamp = "261edace-8481-49c0-a7ac-7b8e6636ba82",
                            CreatedAt = new DateTime(2024, 12, 14, 11, 1, 3, 838, DateTimeKind.Utc).AddTicks(798),
                            Email = "Keira41@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Keira",
                            LastName = "Hane",
                            LockoutEnabled = false,
                            NormalizedEmail = "KEIRA41@HOTMAIL.COM",
                            NormalizedUserName = "KEIRA_HANE76",
                            PasswordHash = "AQAAAAIAAYagAAAAEArgrXXXPxYxKj6Enb1T2Ai+ZAJ4ddtbHqvjr5O89kvrPftyx519GP0Ltj1WUUH3vQ==",
                            PhoneNumber = "936-316-8631",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/853.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Keira_Hane76"
                        },
                        new
                        {
                            Id = 28,
                            AccessFailedCount = 0,
                            Address = "31893 Arlie Haven, Masonshire, British Indian Ocean Territory (Chagos Archipelago)",
                            ConcurrencyStamp = "9455e84f-6c48-4ebd-bb5f-4d4466734b54",
                            CreatedAt = new DateTime(2024, 8, 11, 11, 1, 3, 838, DateTimeKind.Utc).AddTicks(1064),
                            Email = "Scotty_Bartoletti@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Scotty",
                            LastName = "Bartoletti",
                            LockoutEnabled = false,
                            NormalizedEmail = "SCOTTY_BARTOLETTI@GMAIL.COM",
                            NormalizedUserName = "SCOTTY_BARTOLETTI58",
                            PasswordHash = "AQAAAAIAAYagAAAAEKDP6e+gzoghvSfGEgLTntEERFlVmbqz+cjQM8p/dOEYqUjHVyJ5VPLSav6jpZjxNg==",
                            PhoneNumber = "395-578-7221",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/893.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Scotty_Bartoletti58"
                        },
                        new
                        {
                            Id = 29,
                            AccessFailedCount = 0,
                            Address = "2399 Antonette Loaf, Gunnermouth, Malta",
                            ConcurrencyStamp = "2bed5da4-3ab4-4070-a522-68ceaaf30fff",
                            CreatedAt = new DateTime(2024, 5, 9, 11, 1, 3, 838, DateTimeKind.Utc).AddTicks(1327),
                            Email = "Cicero_Trantow@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Cicero",
                            LastName = "Trantow",
                            LockoutEnabled = false,
                            NormalizedEmail = "CICERO_TRANTOW@GMAIL.COM",
                            NormalizedUserName = "CICERO.TRANTOW",
                            PasswordHash = "AQAAAAIAAYagAAAAENcXFg1BFQngVcpD01n7An74b3mrhfCYltdp+Kg+LNOE6boLtIbk/O7kQ6l8DnxxLg==",
                            PhoneNumber = "998-497-3517",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/182.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Cicero.Trantow"
                        },
                        new
                        {
                            Id = 30,
                            AccessFailedCount = 0,
                            Address = "829 Aniyah Stream, South Henryburgh, Angola",
                            ConcurrencyStamp = "e85472a7-b909-4e0d-8ac6-f6508728a976",
                            CreatedAt = new DateTime(2024, 11, 2, 11, 1, 3, 838, DateTimeKind.Utc).AddTicks(1582),
                            Email = "Wilburn_Erdman@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Wilburn",
                            LastName = "Erdman",
                            LockoutEnabled = false,
                            NormalizedEmail = "WILBURN_ERDMAN@GMAIL.COM",
                            NormalizedUserName = "WILBURN96",
                            PasswordHash = "AQAAAAIAAYagAAAAEGQaMj8mNkjeUIaB/f3VaapVRwuuenmFVU39+N7tvDH0sS3xQ+f7NMVhJYr5/AnxCw==",
                            PhoneNumber = "260-789-4277",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/368.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Wilburn96"
                        },
                        new
                        {
                            Id = 31,
                            AccessFailedCount = 0,
                            Address = "15410 Little Groves, New Theresabury, Syrian Arab Republic",
                            ConcurrencyStamp = "6e359777-9c41-4cd2-8d48-5d7b2b180bdb",
                            CreatedAt = new DateTime(2024, 9, 9, 11, 1, 3, 838, DateTimeKind.Utc).AddTicks(1856),
                            Email = "Herman87@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Herman",
                            LastName = "Ritchie",
                            LockoutEnabled = false,
                            NormalizedEmail = "HERMAN87@GMAIL.COM",
                            NormalizedUserName = "HERMAN.RITCHIE61",
                            PasswordHash = "AQAAAAIAAYagAAAAENiOU8c9V37J2MWzn/hKxxys4nrxLD513s167UYbAd/Az9CcfU21RFkQoQR32thuoQ==",
                            PhoneNumber = "795-027-0287",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/1133.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Herman.Ritchie61"
                        },
                        new
                        {
                            Id = 32,
                            AccessFailedCount = 0,
                            Address = "990 Earnest Divide, Williamsonland, Dominica",
                            ConcurrencyStamp = "4cc3ab55-8331-47e9-af48-a90dbf28bc82",
                            CreatedAt = new DateTime(2024, 8, 31, 11, 1, 3, 838, DateTimeKind.Utc).AddTicks(2088),
                            Email = "Rhea.Moen51@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Rhea",
                            LastName = "Moen",
                            LockoutEnabled = false,
                            NormalizedEmail = "RHEA.MOEN51@HOTMAIL.COM",
                            NormalizedUserName = "RHEA.MOEN13",
                            PasswordHash = "AQAAAAIAAYagAAAAEP03U51lVu1hQGKzMhxzLtE0N6WogNRlyAFoPGbQUMusd7jKlE+lZaNCpnNEtOeIwA==",
                            PhoneNumber = "008-975-2505",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/1205.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Rhea.Moen13"
                        },
                        new
                        {
                            Id = 33,
                            AccessFailedCount = 0,
                            Address = "088 Kuphal Orchard, Lake Vadaberg, Cyprus",
                            ConcurrencyStamp = "0dea20f0-3614-456c-8c50-367ac46ca73a",
                            CreatedAt = new DateTime(2024, 11, 11, 11, 1, 3, 838, DateTimeKind.Utc).AddTicks(2363),
                            Email = "Melba64@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Melba",
                            LastName = "Homenick",
                            LockoutEnabled = false,
                            NormalizedEmail = "MELBA64@HOTMAIL.COM",
                            NormalizedUserName = "MELBA35",
                            PasswordHash = "AQAAAAIAAYagAAAAEJoSwZlkjnxfAayDl9ErTJJJ7DJtqrTW02sECqLVEFxc/n5QvMVcfEcHqO7BjySM3A==",
                            PhoneNumber = "895-631-9940",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/360.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Melba35"
                        },
                        new
                        {
                            Id = 34,
                            AccessFailedCount = 0,
                            Address = "02968 Maria Lane, Keaganstad, Mauritania",
                            ConcurrencyStamp = "5b15c52b-f2bc-4844-a2ca-c160aa33a6b7",
                            CreatedAt = new DateTime(2024, 2, 15, 11, 1, 3, 838, DateTimeKind.Utc).AddTicks(2585),
                            Email = "Rosina_Crona20@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Rosina",
                            LastName = "Crona",
                            LockoutEnabled = false,
                            NormalizedEmail = "ROSINA_CRONA20@HOTMAIL.COM",
                            NormalizedUserName = "ROSINA_CRONA22",
                            PasswordHash = "AQAAAAIAAYagAAAAEEmlne46QZwXHCVVjy08BuUifKqJsd8CmxfV6mj56jd23F2KKG5C/YlQbh9Emnrr9A==",
                            PhoneNumber = "795-743-0766",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/920.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Rosina_Crona22"
                        },
                        new
                        {
                            Id = 35,
                            AccessFailedCount = 0,
                            Address = "135 Schaden Crescent, South Eleanore, Belgium",
                            ConcurrencyStamp = "7d3a06f4-30fd-48aa-ad57-f1a74979acdf",
                            CreatedAt = new DateTime(2024, 6, 22, 11, 1, 3, 838, DateTimeKind.Utc).AddTicks(2833),
                            Email = "Trudie7@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Trudie",
                            LastName = "Pagac",
                            LockoutEnabled = false,
                            NormalizedEmail = "TRUDIE7@GMAIL.COM",
                            NormalizedUserName = "TRUDIE.PAGAC",
                            PasswordHash = "AQAAAAIAAYagAAAAEEKb7DaFroDkDUef+10T1cv8QLxITHWYwI++q9p3QE9G+xQYDqBYvaHw75fY7KXShQ==",
                            PhoneNumber = "594-401-5051",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/253.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Trudie.Pagac"
                        },
                        new
                        {
                            Id = 36,
                            AccessFailedCount = 0,
                            Address = "727 Schultz Walks, North Cristinaport, Falkland Islands (Malvinas)",
                            ConcurrencyStamp = "7d9571ac-6a44-4c13-90df-91fef66e91ba",
                            CreatedAt = new DateTime(2024, 4, 9, 11, 1, 3, 838, DateTimeKind.Utc).AddTicks(3064),
                            Email = "Carolanne_Mante@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Carolanne",
                            LastName = "Mante",
                            LockoutEnabled = false,
                            NormalizedEmail = "CAROLANNE_MANTE@GMAIL.COM",
                            NormalizedUserName = "CAROLANNE5",
                            PasswordHash = "AQAAAAIAAYagAAAAECLpT/k//RIPqZhhMMF4E/VShRtwtYCzbIPM4Eu4OdxX34l1mm1cu+IuqhF2Lh6/3A==",
                            PhoneNumber = "713-969-9287",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/885.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Carolanne5"
                        },
                        new
                        {
                            Id = 37,
                            AccessFailedCount = 0,
                            Address = "81964 Mraz Row, West Friedrichmouth, Belize",
                            ConcurrencyStamp = "c82a8186-5ce0-4fe4-963d-f827e53a2020",
                            CreatedAt = new DateTime(2024, 4, 8, 11, 1, 3, 838, DateTimeKind.Utc).AddTicks(3358),
                            Email = "Herminio_Kulas@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Herminio",
                            LastName = "Kulas",
                            LockoutEnabled = false,
                            NormalizedEmail = "HERMINIO_KULAS@HOTMAIL.COM",
                            NormalizedUserName = "HERMINIO10",
                            PasswordHash = "AQAAAAIAAYagAAAAEDHveM0AMYWBe3wjUGQDq29/LnVfO++DjpHZ5AvmtNv7Jl3FIARFnGwYg0MBrIvvIQ==",
                            PhoneNumber = "465-710-6462",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/566.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Herminio10"
                        },
                        new
                        {
                            Id = 38,
                            AccessFailedCount = 0,
                            Address = "9620 Homenick Fall, West Schuyler, United States Minor Outlying Islands",
                            ConcurrencyStamp = "665491ae-597e-4cb3-95ac-01247870743f",
                            CreatedAt = new DateTime(2024, 10, 10, 11, 1, 3, 838, DateTimeKind.Utc).AddTicks(3576),
                            Email = "Tyson.Larson@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Tyson",
                            LastName = "Larson",
                            LockoutEnabled = false,
                            NormalizedEmail = "TYSON.LARSON@YAHOO.COM",
                            NormalizedUserName = "TYSON_LARSON",
                            PasswordHash = "AQAAAAIAAYagAAAAEFQ4c0UhnLskJ3kvrdElDucf9xA/gMPG5JKNsCUQBn6vKDccvPxTnSdHLacsDTKczw==",
                            PhoneNumber = "157-621-7011",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/284.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Tyson_Larson"
                        },
                        new
                        {
                            Id = 39,
                            AccessFailedCount = 0,
                            Address = "9538 Bergstrom Estate, Donaldshire, American Samoa",
                            ConcurrencyStamp = "ba12ace5-e914-4296-a8a0-640ee4c5fcab",
                            CreatedAt = new DateTime(2024, 12, 17, 11, 1, 3, 838, DateTimeKind.Utc).AddTicks(3834),
                            Email = "Thalia_Casper11@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Thalia",
                            LastName = "Casper",
                            LockoutEnabled = false,
                            NormalizedEmail = "THALIA_CASPER11@YAHOO.COM",
                            NormalizedUserName = "THALIA86",
                            PasswordHash = "AQAAAAIAAYagAAAAECIrKegJaLVvzKOQRQS2VuA+BfQ2b+Q+g4MzRYVCz2E5BKLiF4U+iXuwRwsy/xb4Lw==",
                            PhoneNumber = "982-895-8509",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/1223.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Thalia86"
                        },
                        new
                        {
                            Id = 40,
                            AccessFailedCount = 0,
                            Address = "6836 Jovani Walks, Efrenfort, Uzbekistan",
                            ConcurrencyStamp = "42f2d0dc-a680-47e8-9359-17a21718151d",
                            CreatedAt = new DateTime(2024, 8, 6, 11, 1, 3, 838, DateTimeKind.Utc).AddTicks(4085),
                            Email = "Scottie.Johnston41@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Scottie",
                            LastName = "Johnston",
                            LockoutEnabled = false,
                            NormalizedEmail = "SCOTTIE.JOHNSTON41@GMAIL.COM",
                            NormalizedUserName = "SCOTTIE.JOHNSTON",
                            PasswordHash = "AQAAAAIAAYagAAAAEIzZ3I4Skwl475OBNg5LlfwEedKcX3iBkq+SconwSzK2cITm/oj8ElbcycjFVnzeJA==",
                            PhoneNumber = "812-215-3122",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/782.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Scottie.Johnston"
                        });
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Variant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Variants");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.VariantValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VariantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VariantId");

                    b.ToTable("VariantValues");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Address", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.User", "User")
                        .WithMany("Addresses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.BannerDetail", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Banner", "Banner")
                        .WithMany("BannerDetails")
                        .HasForeignKey("BannerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManboShopAPI.Domain.Entities.Product", "Product")
                        .WithMany("BannerDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Banner");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Cart", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("User");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.CartItem", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Cart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManboShopAPI.Domain.Entities.Product", "Product")
                        .WithMany("CartItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.CouponCondition", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Coupon", "Coupon")
                        .WithMany("CouponConditions")
                        .HasForeignKey("CouponId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Coupon");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Favorite", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Product", "Product")
                        .WithMany("Favorites")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManboShopAPI.Domain.Entities.User", "User")
                        .WithMany("Favorites")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Feedback", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Product", "Product")
                        .WithMany("Feedbacks")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManboShopAPI.Domain.Entities.User", "User")
                        .WithMany("Feedbacks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.NewsDetail", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.News", "News")
                        .WithMany("NewsDetails")
                        .HasForeignKey("NewsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManboShopAPI.Domain.Entities.Product", "Product")
                        .WithMany("NewsDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("News");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Order", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Coupon", "Coupon")
                        .WithMany("Orders")
                        .HasForeignKey("CouponId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ManboShopAPI.Domain.Entities.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Coupon");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.OrderDetail", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Coupon", "Coupon")
                        .WithMany("OrderDetails")
                        .HasForeignKey("CouponId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ManboShopAPI.Domain.Entities.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManboShopAPI.Domain.Entities.Product", "Product")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Coupon");

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Product", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ManboShopAPI.Domain.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Brand");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.ProductAttributeValue", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Attributes", "Attribute")
                        .WithMany("ProductAttributeValues")
                        .HasForeignKey("AttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManboShopAPI.Domain.Entities.Product", "Product")
                        .WithMany("ProductAttributeValues")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attribute");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.ProductImage", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Product", "Product")
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.ProductVariantValue", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Product", "Product")
                        .WithMany("ProductVariantValues")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.VariantValue", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Variant", "Variant")
                        .WithMany("VariantValues")
                        .HasForeignKey("VariantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Variant");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManboShopAPI.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Attributes", b =>
                {
                    b.Navigation("ProductAttributeValues");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Banner", b =>
                {
                    b.Navigation("BannerDetails");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Brand", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Cart", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Coupon", b =>
                {
                    b.Navigation("CouponConditions");

                    b.Navigation("OrderDetails");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.News", b =>
                {
                    b.Navigation("NewsDetails");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Product", b =>
                {
                    b.Navigation("BannerDetails");

                    b.Navigation("CartItems");

                    b.Navigation("Favorites");

                    b.Navigation("Feedbacks");

                    b.Navigation("NewsDetails");

                    b.Navigation("OrderDetails");

                    b.Navigation("ProductAttributeValues");

                    b.Navigation("ProductImages");

                    b.Navigation("ProductVariantValues");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.User", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Favorites");

                    b.Navigation("Feedbacks");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Variant", b =>
                {
                    b.Navigation("VariantValues");
                });
#pragma warning restore 612, 618
        }
    }
}
