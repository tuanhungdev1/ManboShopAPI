// <auto-generated />
using System;
using ManboShopAPI.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ManboShopAPI.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250116154733_remove fake data brand")]
    partial class removefakedatabrand
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AreaOrColonyOrStreetOrSectorOrVillage")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("BuildingOrCompanyOrApartment")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FlatOrHouse")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PinCode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Attributes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Attributes");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Banner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Banners");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.BannerDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BannerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BannerId");

                    b.HasIndex("ProductId");

                    b.ToTable("BannerDetails");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.CartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("ProductId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("ParentCategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ParentCategoryId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Coupon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CurrentUsages")
                        .HasColumnType("int");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("MaxUsages")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Coupons");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.CouponCondition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Attribute")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("CouponId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DiscountAmount")
                        .HasColumnType("int");

                    b.Property<string>("Operator")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Value")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CouponId");

                    b.ToTable("CouponConditions");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Favorite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Favorites");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Star")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.News", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("News");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.NewsDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("NewsId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("NewsId");

                    b.HasIndex("ProductId");

                    b.ToTable("NewsDetails");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CouponId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("SessionId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CouponId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.OrderDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CouponId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CouponId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BrandId")
                        .HasColumnType("int");

                    b.Property<int>("BuyTurn")
                        .HasColumnType("int");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("OldPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("Specification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.ProductAttributeValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AttributeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AttributeId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductAttributeValues");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.ProductImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductImages");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.ProductVariantValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("OldPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("Sku")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductVariantValues");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfilePictureUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("VerificationCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("VerificationCodeExpiryTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            Address = "256 Lockman Lakes, North Marilynefort, Monaco",
                            ConcurrencyStamp = "b8f79bc5-d3d4-4935-ab18-f7430fafe4cc",
                            CreatedAt = new DateTime(2024, 9, 2, 15, 47, 30, 860, DateTimeKind.Utc).AddTicks(3050),
                            Email = "Dameon.Hamill@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Dameon",
                            LastName = "Hamill",
                            LockoutEnabled = false,
                            NormalizedEmail = "DAMEON.HAMILL@GMAIL.COM",
                            NormalizedUserName = "DAMEON_HAMILL26",
                            PasswordHash = "AQAAAAIAAYagAAAAEGOfxvKr1GewFt468A3gte7lbIRhDRnoOJL7dmM4nge5Qhxew7yXccOsxwHZh7YxwA==",
                            PhoneNumber = "241-444-3122",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/962.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Dameon_Hamill26"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            Address = "3053 Predovic Stream, Dorothyhaven, Cyprus",
                            ConcurrencyStamp = "e666d7d1-cce3-4856-ae4f-9e99ed7f682c",
                            CreatedAt = new DateTime(2024, 7, 11, 15, 47, 30, 861, DateTimeKind.Utc).AddTicks(5912),
                            Email = "Amaya.Windler@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Amaya",
                            LastName = "Windler",
                            LockoutEnabled = false,
                            NormalizedEmail = "AMAYA.WINDLER@YAHOO.COM",
                            NormalizedUserName = "AMAYA8",
                            PasswordHash = "AQAAAAIAAYagAAAAEENfTxtGCe/St9oNlXQE4VINqVabbRgUnPMuklFokh27wd0mpScUvGngwyPifZ+WWQ==",
                            PhoneNumber = "897-053-3019",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/871.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Amaya8"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            Address = "11325 Kenneth Hollow, North Aliaburgh, Dominica",
                            ConcurrencyStamp = "36ce8c60-6884-4b02-8392-74cc89dec54e",
                            CreatedAt = new DateTime(2024, 3, 12, 15, 47, 30, 861, DateTimeKind.Utc).AddTicks(6282),
                            Email = "Lillian.Hyatt38@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Lillian",
                            LastName = "Hyatt",
                            LockoutEnabled = false,
                            NormalizedEmail = "LILLIAN.HYATT38@HOTMAIL.COM",
                            NormalizedUserName = "LILLIAN65",
                            PasswordHash = "AQAAAAIAAYagAAAAEFqUomeJkX0NBUItCQZe2wxtM5yNYvfUo0OgQbbjXwb2E1zcbUqO7luMuMRiScUf1w==",
                            PhoneNumber = "941-668-3845",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/854.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Lillian65"
                        },
                        new
                        {
                            Id = 4,
                            AccessFailedCount = 0,
                            Address = "6452 Kovacek Loop, Nikolauston, Montserrat",
                            ConcurrencyStamp = "7a25799c-c5ce-4b5c-9b70-295d51b5be7e",
                            CreatedAt = new DateTime(2024, 12, 31, 15, 47, 30, 861, DateTimeKind.Utc).AddTicks(6522),
                            Email = "Verda_Bahringer@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Verda",
                            LastName = "Bahringer",
                            LockoutEnabled = false,
                            NormalizedEmail = "VERDA_BAHRINGER@GMAIL.COM",
                            NormalizedUserName = "VERDA.BAHRINGER",
                            PasswordHash = "AQAAAAIAAYagAAAAEJ9AvueLiN+PBEjojOMg1DX7WlXXJpUql56W8OhM66eQhbo8ZmhldBB/83kvHAH2lQ==",
                            PhoneNumber = "684-005-1814",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/12.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Verda.Bahringer"
                        },
                        new
                        {
                            Id = 5,
                            AccessFailedCount = 0,
                            Address = "5849 Edgar Junctions, North Eveline, Argentina",
                            ConcurrencyStamp = "05c6c875-bc7f-497e-b681-abe68896cc6d",
                            CreatedAt = new DateTime(2024, 7, 10, 15, 47, 30, 861, DateTimeKind.Utc).AddTicks(6783),
                            Email = "Barney.Moore90@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Barney",
                            LastName = "Moore",
                            LockoutEnabled = false,
                            NormalizedEmail = "BARNEY.MOORE90@HOTMAIL.COM",
                            NormalizedUserName = "BARNEY_MOORE46",
                            PasswordHash = "AQAAAAIAAYagAAAAEIVwP+yR4R7y2mV28rMjOdC8p9bv3wk03qgztRHjjh9tcII4DmzyeGnJqOw//t/kBA==",
                            PhoneNumber = "353-136-7087",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/1114.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Barney_Moore46"
                        },
                        new
                        {
                            Id = 6,
                            AccessFailedCount = 0,
                            Address = "639 Hillard Dale, Duncanview, Eritrea",
                            ConcurrencyStamp = "882ee1bb-8409-426b-b7bd-e5bc69aa1a65",
                            CreatedAt = new DateTime(2024, 8, 20, 15, 47, 30, 861, DateTimeKind.Utc).AddTicks(7041),
                            Email = "Fidel.Muller@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Fidel",
                            LastName = "Muller",
                            LockoutEnabled = false,
                            NormalizedEmail = "FIDEL.MULLER@YAHOO.COM",
                            NormalizedUserName = "FIDEL.MULLER",
                            PasswordHash = "AQAAAAIAAYagAAAAEN0C+91OMY8cBLrF2ikkquw8+PBf+lu0Fw4W4hLKpBGEnrwyWyo4UGlf684lAaobhQ==",
                            PhoneNumber = "781-652-8243",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/211.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Fidel.Muller"
                        },
                        new
                        {
                            Id = 7,
                            AccessFailedCount = 0,
                            Address = "7005 Grant Road, Marcoborough, Norfolk Island",
                            ConcurrencyStamp = "58072bb7-7638-4bc9-aec5-ba9b6a6d2a26",
                            CreatedAt = new DateTime(2024, 8, 4, 15, 47, 30, 861, DateTimeKind.Utc).AddTicks(7313),
                            Email = "Lew_Heidenreich@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Lew",
                            LastName = "Heidenreich",
                            LockoutEnabled = false,
                            NormalizedEmail = "LEW_HEIDENREICH@GMAIL.COM",
                            NormalizedUserName = "LEW.HEIDENREICH",
                            PasswordHash = "AQAAAAIAAYagAAAAEJSNXeFZF8uccETrDjF5/Ta+FNYUrqq9ScBum2Cs07IPoGYnc4QidRFN2jr1+1U7HA==",
                            PhoneNumber = "126-891-5600",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/1238.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Lew.Heidenreich"
                        },
                        new
                        {
                            Id = 8,
                            AccessFailedCount = 0,
                            Address = "4227 Amie Manors, New Hazle, Nauru",
                            ConcurrencyStamp = "cb83d263-cd2a-4f44-911b-2c353da9810f",
                            CreatedAt = new DateTime(2024, 8, 26, 15, 47, 30, 863, DateTimeKind.Utc).AddTicks(5865),
                            Email = "Hortense_OKon1@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Hortense",
                            LastName = "O'Kon",
                            LockoutEnabled = false,
                            NormalizedEmail = "HORTENSE_OKON1@GMAIL.COM",
                            NormalizedUserName = "HORTENSE13",
                            PasswordHash = "AQAAAAIAAYagAAAAEByabxDC2Y+B9UEXL/pp5A6UNLQ9MwONhooBUTqv8n/CtCLPQrFfUSe1FmXobWjc9Q==",
                            PhoneNumber = "906-761-7586",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/780.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Hortense13"
                        },
                        new
                        {
                            Id = 9,
                            AccessFailedCount = 0,
                            Address = "59564 Alicia Islands, Port Rollin, Norway",
                            ConcurrencyStamp = "78fc140c-565d-4d60-895a-6993b71b5222",
                            CreatedAt = new DateTime(2024, 10, 13, 15, 47, 30, 863, DateTimeKind.Utc).AddTicks(7409),
                            Email = "Mattie.Gusikowski@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Mattie",
                            LastName = "Gusikowski",
                            LockoutEnabled = false,
                            NormalizedEmail = "MATTIE.GUSIKOWSKI@YAHOO.COM",
                            NormalizedUserName = "MATTIE_GUSIKOWSKI",
                            PasswordHash = "AQAAAAIAAYagAAAAEDB1KW0hMXMgRyAv+Chy/5DM8hcKubbjsAgd/ldsk8oYMyx/vg4SPUM9o41xHV6Sbw==",
                            PhoneNumber = "493-183-6512",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/267.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Mattie_Gusikowski"
                        },
                        new
                        {
                            Id = 10,
                            AccessFailedCount = 0,
                            Address = "9043 Reina Coves, Mayertberg, Micronesia",
                            ConcurrencyStamp = "be699446-cc44-4191-b97f-1087a708873f",
                            CreatedAt = new DateTime(2024, 5, 15, 15, 47, 30, 863, DateTimeKind.Utc).AddTicks(7681),
                            Email = "Myra_Abbott10@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Myra",
                            LastName = "Abbott",
                            LockoutEnabled = false,
                            NormalizedEmail = "MYRA_ABBOTT10@YAHOO.COM",
                            NormalizedUserName = "MYRA51",
                            PasswordHash = "AQAAAAIAAYagAAAAEE4tk9GzJSWTF+lAjJFbPxdsP3NQBN1pc9IF0pkkrhC3iKzO9fMK66ejf5wRNk2Z/g==",
                            PhoneNumber = "873-274-0967",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/1167.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Myra51"
                        },
                        new
                        {
                            Id = 11,
                            AccessFailedCount = 0,
                            Address = "669 Hyatt Glen, Lake Robbshire, Trinidad and Tobago",
                            ConcurrencyStamp = "17835c07-3420-4451-9b05-adedffa76278",
                            CreatedAt = new DateTime(2024, 10, 24, 15, 47, 30, 863, DateTimeKind.Utc).AddTicks(7970),
                            Email = "Elroy10@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Elroy",
                            LastName = "McKenzie",
                            LockoutEnabled = false,
                            NormalizedEmail = "ELROY10@GMAIL.COM",
                            NormalizedUserName = "ELROY_MCKENZIE",
                            PasswordHash = "AQAAAAIAAYagAAAAECaa2zDS3yiSm+M8eUCsqQcUf/gPs3Y/4CSLHABsP/Z4ZAGrtvBqu0HuW+UYEOWIKQ==",
                            PhoneNumber = "225-348-3195",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/1125.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Elroy_McKenzie"
                        },
                        new
                        {
                            Id = 12,
                            AccessFailedCount = 0,
                            Address = "34151 Smitham Locks, Donnellyshire, Finland",
                            ConcurrencyStamp = "daed5424-1787-4a2c-85fc-14b3b85cc67a",
                            CreatedAt = new DateTime(2024, 8, 28, 15, 47, 30, 863, DateTimeKind.Utc).AddTicks(8196),
                            Email = "Jena82@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Jena",
                            LastName = "Jacobi",
                            LockoutEnabled = false,
                            NormalizedEmail = "JENA82@YAHOO.COM",
                            NormalizedUserName = "JENA68",
                            PasswordHash = "AQAAAAIAAYagAAAAEHfy8IC5oQkK0nzcTHqOQAf4RC+kh20FWv2r/dsiUoelMNSbgHV6YA+zsp2cYQpjuQ==",
                            PhoneNumber = "519-759-2799",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/791.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Jena68"
                        },
                        new
                        {
                            Id = 13,
                            AccessFailedCount = 0,
                            Address = "9196 Amber Cliffs, Colemantown, Iran",
                            ConcurrencyStamp = "29e0f1df-a878-439a-ac30-df025e4a2e93",
                            CreatedAt = new DateTime(2024, 4, 1, 15, 47, 30, 863, DateTimeKind.Utc).AddTicks(8458),
                            Email = "Aiyana.Deckow@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Aiyana",
                            LastName = "Deckow",
                            LockoutEnabled = false,
                            NormalizedEmail = "AIYANA.DECKOW@GMAIL.COM",
                            NormalizedUserName = "AIYANA.DECKOW",
                            PasswordHash = "AQAAAAIAAYagAAAAEKVxG3dClwqMvWNB+gzosOhDuF0dKB3u2kiVv/vyaZytaNYuWlmR0dS7gYNQ9RQOnA==",
                            PhoneNumber = "898-076-0069",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/263.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Aiyana.Deckow"
                        },
                        new
                        {
                            Id = 14,
                            AccessFailedCount = 0,
                            Address = "412 Elenor Curve, Jacobsland, Gibraltar",
                            ConcurrencyStamp = "57d429e6-de7c-498c-b658-9b7762c0a801",
                            CreatedAt = new DateTime(2024, 10, 3, 15, 47, 30, 863, DateTimeKind.Utc).AddTicks(8660),
                            Email = "Kimberly85@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Kimberly",
                            LastName = "Ratke",
                            LockoutEnabled = false,
                            NormalizedEmail = "KIMBERLY85@YAHOO.COM",
                            NormalizedUserName = "KIMBERLY.RATKE",
                            PasswordHash = "AQAAAAIAAYagAAAAEABcSJQWL3TJtK8X9bfDy8CFlXeMDL42cnUYIfo36rGlfecFXTLhRv0BgB2oD8zTCw==",
                            PhoneNumber = "497-552-3882",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/1004.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Kimberly.Ratke"
                        },
                        new
                        {
                            Id = 15,
                            AccessFailedCount = 0,
                            Address = "96065 Lakin Crest, Hillaryland, Svalbard & Jan Mayen Islands",
                            ConcurrencyStamp = "1a90ebad-46d2-4b3c-8b20-863508f871c6",
                            CreatedAt = new DateTime(2024, 10, 25, 15, 47, 30, 863, DateTimeKind.Utc).AddTicks(8904),
                            Email = "Brisa_Halvorson@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Brisa",
                            LastName = "Halvorson",
                            LockoutEnabled = false,
                            NormalizedEmail = "BRISA_HALVORSON@HOTMAIL.COM",
                            NormalizedUserName = "BRISA.HALVORSON68",
                            PasswordHash = "AQAAAAIAAYagAAAAENY8vIEXSWVnLj9pxCN0+4x4of/4sJjOse+rEhXe80vliQcNNyJtWoGSccsrUB8DWQ==",
                            PhoneNumber = "413-585-8041",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/1095.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Brisa.Halvorson68"
                        },
                        new
                        {
                            Id = 16,
                            AccessFailedCount = 0,
                            Address = "93596 Miller Center, Watsonburgh, Nicaragua",
                            ConcurrencyStamp = "ef11bddb-691e-484f-b4ee-8bcf0bde25e1",
                            CreatedAt = new DateTime(2024, 4, 19, 15, 47, 30, 863, DateTimeKind.Utc).AddTicks(9676),
                            Email = "Adaline.Rath72@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Adaline",
                            LastName = "Rath",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADALINE.RATH72@YAHOO.COM",
                            NormalizedUserName = "ADALINE56",
                            PasswordHash = "AQAAAAIAAYagAAAAEEVwtyYMc4KwoLcTQ/61ae1vL/G3GfolOeEy/HQs5Zv79GiyM8904BVe43d1XKjxIg==",
                            PhoneNumber = "579-166-6218",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/499.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Adaline56"
                        },
                        new
                        {
                            Id = 17,
                            AccessFailedCount = 0,
                            Address = "8303 Muller Fork, Brakusport, Pakistan",
                            ConcurrencyStamp = "872aec42-1c47-4e68-948b-05b47465c3aa",
                            CreatedAt = new DateTime(2024, 3, 3, 15, 47, 30, 863, DateTimeKind.Utc).AddTicks(9982),
                            Email = "Benedict_Balistreri8@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Benedict",
                            LastName = "Balistreri",
                            LockoutEnabled = false,
                            NormalizedEmail = "BENEDICT_BALISTRERI8@YAHOO.COM",
                            NormalizedUserName = "BENEDICT_BALISTRERI72",
                            PasswordHash = "AQAAAAIAAYagAAAAEHkp9OymxYOhhKGt1x0ZWUlG7RIjz8uV2F8DXBh8JbfmYR4RSh6EzNuxO0wQ54S1uA==",
                            PhoneNumber = "375-414-7257",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/2.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Benedict_Balistreri72"
                        },
                        new
                        {
                            Id = 18,
                            AccessFailedCount = 0,
                            Address = "79010 Bettye Trail, New Maribelfurt, Bermuda",
                            ConcurrencyStamp = "697a7860-fbb3-42b2-ad7f-085f34373afc",
                            CreatedAt = new DateTime(2024, 10, 19, 15, 47, 30, 864, DateTimeKind.Utc).AddTicks(266),
                            Email = "Caterina_Ullrich37@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Caterina",
                            LastName = "Ullrich",
                            LockoutEnabled = false,
                            NormalizedEmail = "CATERINA_ULLRICH37@GMAIL.COM",
                            NormalizedUserName = "CATERINA.ULLRICH27",
                            PasswordHash = "AQAAAAIAAYagAAAAEFNcHFHriUU6Zl4oe/3+ycp0LB4ggX2oIpmDaoG6lm+olt88AwY1RbYxTWtIXT7snA==",
                            PhoneNumber = "362-126-1649",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/600.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Caterina.Ullrich27"
                        },
                        new
                        {
                            Id = 19,
                            AccessFailedCount = 0,
                            Address = "5727 Donnell Mount, Grahamton, Libyan Arab Jamahiriya",
                            ConcurrencyStamp = "e19c7dfd-fa84-4638-88a2-b242391937d8",
                            CreatedAt = new DateTime(2024, 9, 14, 15, 47, 30, 864, DateTimeKind.Utc).AddTicks(469),
                            Email = "Kip6@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Kip",
                            LastName = "McLaughlin",
                            LockoutEnabled = false,
                            NormalizedEmail = "KIP6@GMAIL.COM",
                            NormalizedUserName = "KIP13",
                            PasswordHash = "AQAAAAIAAYagAAAAEOyftkbpb+y/bvd9q7fwFCarN+LEvswmQGNNhIzDACORHELuLza1naO5ITHNOiKGTA==",
                            PhoneNumber = "172-868-0081",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/791.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Kip13"
                        },
                        new
                        {
                            Id = 20,
                            AccessFailedCount = 0,
                            Address = "672 Strosin Trafficway, New Maurineport, South Georgia and the South Sandwich Islands",
                            ConcurrencyStamp = "908fd160-d5ad-43c5-bfc4-909b77e9e78b",
                            CreatedAt = new DateTime(2025, 1, 2, 15, 47, 30, 864, DateTimeKind.Utc).AddTicks(713),
                            Email = "Madyson.Funk@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Madyson",
                            LastName = "Funk",
                            LockoutEnabled = false,
                            NormalizedEmail = "MADYSON.FUNK@GMAIL.COM",
                            NormalizedUserName = "MADYSON.FUNK",
                            PasswordHash = "AQAAAAIAAYagAAAAECPOhW7zzueZNAqsGIlIOUy8OluGcxrkvbcnWlK2vaUOd9tW+gHQcnxr0FqvMyDJjA==",
                            PhoneNumber = "833-941-2188",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/796.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Madyson.Funk"
                        },
                        new
                        {
                            Id = 21,
                            AccessFailedCount = 0,
                            Address = "75626 Koepp Cape, Port Rahsaanshire, Seychelles",
                            ConcurrencyStamp = "5a97298b-9496-4b32-b456-34c4e2007a04",
                            CreatedAt = new DateTime(2024, 2, 15, 15, 47, 30, 864, DateTimeKind.Utc).AddTicks(914),
                            Email = "Minerva.Smitham1@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Minerva",
                            LastName = "Smitham",
                            LockoutEnabled = false,
                            NormalizedEmail = "MINERVA.SMITHAM1@GMAIL.COM",
                            NormalizedUserName = "MINERVA_SMITHAM8",
                            PasswordHash = "AQAAAAIAAYagAAAAECthDA8S2IoObuQGR3+tfjWjVH9/xyjkV7Cn+zWMaTnED/LCdcVBqV9UVpYbR1YhxA==",
                            PhoneNumber = "464-630-4484",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/894.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Minerva_Smitham8"
                        },
                        new
                        {
                            Id = 22,
                            AccessFailedCount = 0,
                            Address = "312 Bins Common, Constantintown, Eritrea",
                            ConcurrencyStamp = "944ce807-9b91-4300-a995-26246f57808f",
                            CreatedAt = new DateTime(2024, 12, 29, 15, 47, 30, 864, DateTimeKind.Utc).AddTicks(1159),
                            Email = "Harold77@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Harold",
                            LastName = "White",
                            LockoutEnabled = false,
                            NormalizedEmail = "HAROLD77@HOTMAIL.COM",
                            NormalizedUserName = "HAROLD_WHITE",
                            PasswordHash = "AQAAAAIAAYagAAAAEAZmMvSGMq3QEwwvWQ/LKY0MDwCSSu5/OMKr0NvVI1OssbM48Rx9pyjzMn9n1JAGoA==",
                            PhoneNumber = "084-440-1056",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/1239.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Harold_White"
                        },
                        new
                        {
                            Id = 23,
                            AccessFailedCount = 0,
                            Address = "50480 Bruen Path, Kunzeburgh, Christmas Island",
                            ConcurrencyStamp = "1481968e-3b22-49dd-bf97-0f0da1efcd13",
                            CreatedAt = new DateTime(2024, 2, 7, 15, 47, 30, 864, DateTimeKind.Utc).AddTicks(1359),
                            Email = "Elenora_Barrows92@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Elenora",
                            LastName = "Barrows",
                            LockoutEnabled = false,
                            NormalizedEmail = "ELENORA_BARROWS92@HOTMAIL.COM",
                            NormalizedUserName = "ELENORA.BARROWS",
                            PasswordHash = "AQAAAAIAAYagAAAAEGCIDNii8ydX80PqVMq4jdwEn1MMNZe+IjedY92J6Cz6NPT8uvCWA2+sOg9+akxMpw==",
                            PhoneNumber = "638-310-2564",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/222.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Elenora.Barrows"
                        },
                        new
                        {
                            Id = 24,
                            AccessFailedCount = 0,
                            Address = "356 Beer Mills, Ramonburgh, Palau",
                            ConcurrencyStamp = "f3c99e15-97f6-49dd-96a7-28958c8f5d87",
                            CreatedAt = new DateTime(2024, 11, 12, 15, 47, 30, 864, DateTimeKind.Utc).AddTicks(1588),
                            Email = "Josefa38@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Josefa",
                            LastName = "Cassin",
                            LockoutEnabled = false,
                            NormalizedEmail = "JOSEFA38@GMAIL.COM",
                            NormalizedUserName = "JOSEFA72",
                            PasswordHash = "AQAAAAIAAYagAAAAED/zxqgt9W9vgwmzuIzrc/wbtPGY1uQjobgBy1ytwRkgrPhSguvCoUMbek944VqizA==",
                            PhoneNumber = "957-016-4151",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/1059.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Josefa72"
                        },
                        new
                        {
                            Id = 25,
                            AccessFailedCount = 0,
                            Address = "7488 DuBuque Ford, South Antonetta, Brazil",
                            ConcurrencyStamp = "48cd3e6e-d6d9-41f6-9691-7df83cdef29e",
                            CreatedAt = new DateTime(2024, 12, 26, 15, 47, 30, 864, DateTimeKind.Utc).AddTicks(1784),
                            Email = "Kenny.Rolfson90@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Kenny",
                            LastName = "Rolfson",
                            LockoutEnabled = false,
                            NormalizedEmail = "KENNY.ROLFSON90@GMAIL.COM",
                            NormalizedUserName = "KENNY_ROLFSON",
                            PasswordHash = "AQAAAAIAAYagAAAAEAL6lApf+9ZfkAFjl4tGc23HM3qTt6eISdBLPLtjn/AKqBFvnwr6Jkuh7X8mlYFy3w==",
                            PhoneNumber = "130-931-2471",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/60.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Kenny_Rolfson"
                        },
                        new
                        {
                            Id = 26,
                            AccessFailedCount = 0,
                            Address = "194 Ullrich Vista, West Providenci, French Polynesia",
                            ConcurrencyStamp = "ff5da249-a3b1-47fa-ab41-6f8680aeb752",
                            CreatedAt = new DateTime(2024, 8, 18, 15, 47, 30, 864, DateTimeKind.Utc).AddTicks(2031),
                            Email = "Annabel30@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Annabel",
                            LastName = "Mann",
                            LockoutEnabled = false,
                            NormalizedEmail = "ANNABEL30@GMAIL.COM",
                            NormalizedUserName = "ANNABEL.MANN45",
                            PasswordHash = "AQAAAAIAAYagAAAAEIarUHykQf+MKyv6oxlYJTUBGa8EbZdv+m5Oy0aIRVH7lZ6NDBTuoPZpzOc3tvMZHA==",
                            PhoneNumber = "893-180-7434",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/1145.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Annabel.Mann45"
                        },
                        new
                        {
                            Id = 27,
                            AccessFailedCount = 0,
                            Address = "309 Giles Wells, West Amyton, Armenia",
                            ConcurrencyStamp = "6b520254-a40e-4782-9562-3c518369b5b2",
                            CreatedAt = new DateTime(2024, 4, 25, 15, 47, 30, 864, DateTimeKind.Utc).AddTicks(2243),
                            Email = "Onie_Wilderman30@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Onie",
                            LastName = "Wilderman",
                            LockoutEnabled = false,
                            NormalizedEmail = "ONIE_WILDERMAN30@YAHOO.COM",
                            NormalizedUserName = "ONIE.WILDERMAN",
                            PasswordHash = "AQAAAAIAAYagAAAAEDXZo2GDTu5KpObl2dhce787Q03Q74BbX1Av82nyV68h+hHLAxrV15PMBnYWkSgpQw==",
                            PhoneNumber = "255-565-4473",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/1218.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Onie.Wilderman"
                        },
                        new
                        {
                            Id = 28,
                            AccessFailedCount = 0,
                            Address = "68185 Mason Neck, East Mercedes, Mongolia",
                            ConcurrencyStamp = "c0c96190-5702-46e1-9b08-7e993b8285cd",
                            CreatedAt = new DateTime(2024, 4, 14, 15, 47, 30, 864, DateTimeKind.Utc).AddTicks(2534),
                            Email = "Ibrahim_Lesch@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Ibrahim",
                            LastName = "Lesch",
                            LockoutEnabled = false,
                            NormalizedEmail = "IBRAHIM_LESCH@GMAIL.COM",
                            NormalizedUserName = "IBRAHIM_LESCH",
                            PasswordHash = "AQAAAAIAAYagAAAAEFV5FITihWD9iPIhXIFTaesANj9kcY5SnUIYDOSsclCpkaVNuKTsr+GoLrcoGVjAXQ==",
                            PhoneNumber = "736-931-7463",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/276.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Ibrahim_Lesch"
                        },
                        new
                        {
                            Id = 29,
                            AccessFailedCount = 0,
                            Address = "611 Itzel Gateway, Spencerstad, Sri Lanka",
                            ConcurrencyStamp = "13270dd2-497b-498c-a090-ffd224b03fdc",
                            CreatedAt = new DateTime(2024, 2, 23, 15, 47, 30, 864, DateTimeKind.Utc).AddTicks(2749),
                            Email = "Franz_Zulauf53@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Franz",
                            LastName = "Zulauf",
                            LockoutEnabled = false,
                            NormalizedEmail = "FRANZ_ZULAUF53@YAHOO.COM",
                            NormalizedUserName = "FRANZ_ZULAUF65",
                            PasswordHash = "AQAAAAIAAYagAAAAEAwsr9LaGxN0a17HQqNGGpivHJMHV+ZHh5QjbobmSPpUo8Mlromg03ZFSW3A+T/P0w==",
                            PhoneNumber = "104-805-7535",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/882.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Franz_Zulauf65"
                        },
                        new
                        {
                            Id = 30,
                            AccessFailedCount = 0,
                            Address = "87007 Zboncak Mews, West Ursula, Aruba",
                            ConcurrencyStamp = "6a840fe6-32ff-4455-a516-ab3e9013577e",
                            CreatedAt = new DateTime(2024, 4, 11, 15, 47, 30, 864, DateTimeKind.Utc).AddTicks(3002),
                            Email = "Johanna.Oberbrunner56@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Johanna",
                            LastName = "Oberbrunner",
                            LockoutEnabled = false,
                            NormalizedEmail = "JOHANNA.OBERBRUNNER56@HOTMAIL.COM",
                            NormalizedUserName = "JOHANNA.OBERBRUNNER13",
                            PasswordHash = "AQAAAAIAAYagAAAAEJfPKc+Sq5T80cuK+KeotyG2xeSQCZ+50AeUZE9ra0wkTMJ4InY1GZba/gV66+7cOA==",
                            PhoneNumber = "232-996-8296",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/429.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Johanna.Oberbrunner13"
                        },
                        new
                        {
                            Id = 31,
                            AccessFailedCount = 0,
                            Address = "9107 Kulas Tunnel, Lake Effie, Singapore",
                            ConcurrencyStamp = "d37da339-cbd1-44af-8f2a-beb0cf0effbb",
                            CreatedAt = new DateTime(2024, 1, 21, 15, 47, 30, 864, DateTimeKind.Utc).AddTicks(3197),
                            Email = "Rafael.Lindgren@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Rafael",
                            LastName = "Lindgren",
                            LockoutEnabled = false,
                            NormalizedEmail = "RAFAEL.LINDGREN@HOTMAIL.COM",
                            NormalizedUserName = "RAFAEL_LINDGREN",
                            PasswordHash = "AQAAAAIAAYagAAAAEB0NXiBaug5y0hOVAaziD3EH5/QiA72WQHqWf5E3eNb7vqWapNG4t7+tNIPAbhX4ig==",
                            PhoneNumber = "417-803-3184",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/0.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Rafael_Lindgren"
                        },
                        new
                        {
                            Id = 32,
                            AccessFailedCount = 0,
                            Address = "5857 Augusta Crest, Aufderharborough, United Kingdom",
                            ConcurrencyStamp = "8eda08ef-35e7-4eab-b4e3-1a462b44871a",
                            CreatedAt = new DateTime(2024, 11, 4, 15, 47, 30, 864, DateTimeKind.Utc).AddTicks(3434),
                            Email = "Dereck.Beatty21@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Dereck",
                            LastName = "Beatty",
                            LockoutEnabled = false,
                            NormalizedEmail = "DERECK.BEATTY21@HOTMAIL.COM",
                            NormalizedUserName = "DERECK98",
                            PasswordHash = "AQAAAAIAAYagAAAAEOobNw291pXj5sqponCLs7usSkFXBDJgXpbVUK7nPszkxwZauAEa/UmUDSTgdF41wA==",
                            PhoneNumber = "446-761-8349",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/368.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Dereck98"
                        },
                        new
                        {
                            Id = 33,
                            AccessFailedCount = 0,
                            Address = "681 Senger Station, Mackville, Fiji",
                            ConcurrencyStamp = "f7342a50-783e-4ea5-9af5-37860954341e",
                            CreatedAt = new DateTime(2024, 12, 5, 15, 47, 30, 864, DateTimeKind.Utc).AddTicks(3609),
                            Email = "Kyleigh91@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Kyleigh",
                            LastName = "Zulauf",
                            LockoutEnabled = false,
                            NormalizedEmail = "KYLEIGH91@HOTMAIL.COM",
                            NormalizedUserName = "KYLEIGH.ZULAUF3",
                            PasswordHash = "AQAAAAIAAYagAAAAEEgIVgpN6y3KnWL8bzowypEmLvKrtteLAy3SAU41YRVZGlvnnuZFOD0RBpYYFDIAhw==",
                            PhoneNumber = "315-344-9660",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/958.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Kyleigh.Zulauf3"
                        },
                        new
                        {
                            Id = 34,
                            AccessFailedCount = 0,
                            Address = "88380 Susan Bridge, Romaineside, Niue",
                            ConcurrencyStamp = "cc6ed160-81a9-4bd3-b3b8-414562cf8c83",
                            CreatedAt = new DateTime(2024, 8, 7, 15, 47, 30, 864, DateTimeKind.Utc).AddTicks(3868),
                            Email = "Antone_Bashirian56@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Antone",
                            LastName = "Bashirian",
                            LockoutEnabled = false,
                            NormalizedEmail = "ANTONE_BASHIRIAN56@GMAIL.COM",
                            NormalizedUserName = "ANTONE25",
                            PasswordHash = "AQAAAAIAAYagAAAAEE5f3r7snkToXKkN885/lH9HYkQykAB2wrn/y0bDu5k0sIqa5jLHfpk16c8HMASiFA==",
                            PhoneNumber = "743-000-8371",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/310.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Antone25"
                        },
                        new
                        {
                            Id = 35,
                            AccessFailedCount = 0,
                            Address = "00000 Llewellyn Prairie, Lake Camden, Luxembourg",
                            ConcurrencyStamp = "b8f4b54a-dfe4-4674-b008-6329a71cefc1",
                            CreatedAt = new DateTime(2024, 8, 11, 15, 47, 30, 864, DateTimeKind.Utc).AddTicks(4074),
                            Email = "Dolly_Gutmann@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Dolly",
                            LastName = "Gutmann",
                            LockoutEnabled = false,
                            NormalizedEmail = "DOLLY_GUTMANN@YAHOO.COM",
                            NormalizedUserName = "DOLLY.GUTMANN",
                            PasswordHash = "AQAAAAIAAYagAAAAEOYz71otyUh6xTL0JwEOHQe/bTMj3Y9EreNH+OikDri4g7TJWxWpwNoIsb+n30Oo1A==",
                            PhoneNumber = "775-478-9089",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/698.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Dolly.Gutmann"
                        },
                        new
                        {
                            Id = 36,
                            AccessFailedCount = 0,
                            Address = "508 Reilly Manor, Xzavierport, Swaziland",
                            ConcurrencyStamp = "a69136a8-d284-4012-9ec8-5e9afdf016c2",
                            CreatedAt = new DateTime(2024, 10, 12, 15, 47, 30, 864, DateTimeKind.Utc).AddTicks(4301),
                            Email = "Bruce.Pacocha@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Bruce",
                            LastName = "Pacocha",
                            LockoutEnabled = false,
                            NormalizedEmail = "BRUCE.PACOCHA@HOTMAIL.COM",
                            NormalizedUserName = "BRUCE.PACOCHA73",
                            PasswordHash = "AQAAAAIAAYagAAAAEMNjoNc468CE5IHY2W7VlmEhOKiU4gWu9WfkvByBsfWKNT8vya9nxkaSr0c49Zrmug==",
                            PhoneNumber = "267-074-4708",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/337.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Bruce.Pacocha73"
                        },
                        new
                        {
                            Id = 37,
                            AccessFailedCount = 0,
                            Address = "141 Horacio Walk, Port Sienna, Norway",
                            ConcurrencyStamp = "ae523196-5914-4acc-9cf8-140af3bc2094",
                            CreatedAt = new DateTime(2024, 11, 13, 15, 47, 30, 864, DateTimeKind.Utc).AddTicks(4503),
                            Email = "Rachelle.Swaniawski4@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Rachelle",
                            LastName = "Swaniawski",
                            LockoutEnabled = false,
                            NormalizedEmail = "RACHELLE.SWANIAWSKI4@GMAIL.COM",
                            NormalizedUserName = "RACHELLE.SWANIAWSKI",
                            PasswordHash = "AQAAAAIAAYagAAAAEKKxwglTf06dXJ53ennIvmb09gN1QaGbCKN3RA4BNg26p8HkBinAS+rAC8f7N+HMKA==",
                            PhoneNumber = "618-424-6217",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/260.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Rachelle.Swaniawski"
                        },
                        new
                        {
                            Id = 38,
                            AccessFailedCount = 0,
                            Address = "25644 Pagac Trafficway, North Albertofurt, Saudi Arabia",
                            ConcurrencyStamp = "73d9d26e-4660-41bf-82e9-ca2759363246",
                            CreatedAt = new DateTime(2024, 3, 7, 15, 47, 30, 864, DateTimeKind.Utc).AddTicks(4711),
                            Email = "Alda_Kihn50@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Alda",
                            LastName = "Kihn",
                            LockoutEnabled = false,
                            NormalizedEmail = "ALDA_KIHN50@GMAIL.COM",
                            NormalizedUserName = "ALDA.KIHN",
                            PasswordHash = "AQAAAAIAAYagAAAAELv76FDkwHRkn5kslVuHe6l52rJOp7CJkTDSIALV+TOA0lg7HgC2yYH0FKkyDWyl1w==",
                            PhoneNumber = "336-116-5082",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/77.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Alda.Kihn"
                        },
                        new
                        {
                            Id = 39,
                            AccessFailedCount = 0,
                            Address = "490 Nikolaus Motorway, West Keanufort, Burkina Faso",
                            ConcurrencyStamp = "d6c2d423-6cf2-4efd-92b1-489211043fab",
                            CreatedAt = new DateTime(2024, 12, 7, 15, 47, 30, 864, DateTimeKind.Utc).AddTicks(4964),
                            Email = "Luigi.Collins@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Luigi",
                            LastName = "Collins",
                            LockoutEnabled = false,
                            NormalizedEmail = "LUIGI.COLLINS@HOTMAIL.COM",
                            NormalizedUserName = "LUIGI_COLLINS",
                            PasswordHash = "AQAAAAIAAYagAAAAEJl+bSCivQxuQygacG65/JZk9uYHYruFz3v1+QHxsKM6Hgns8hIhiipFG2xRARteBA==",
                            PhoneNumber = "071-995-0372",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/695.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Luigi_Collins"
                        },
                        new
                        {
                            Id = 40,
                            AccessFailedCount = 0,
                            Address = "089 Eda Inlet, Jenkinsburgh, Cocos (Keeling) Islands",
                            ConcurrencyStamp = "7940cad3-ffba-43f2-9d76-9f7a3971f517",
                            CreatedAt = new DateTime(2024, 6, 7, 15, 47, 30, 864, DateTimeKind.Utc).AddTicks(5163),
                            Email = "Deon_Abernathy87@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Deon",
                            LastName = "Abernathy",
                            LockoutEnabled = false,
                            NormalizedEmail = "DEON_ABERNATHY87@GMAIL.COM",
                            NormalizedUserName = "DEON.ABERNATHY",
                            PasswordHash = "AQAAAAIAAYagAAAAEFHd7K1bpuNr6aYu26+O0efyY8c5oPVWXZKCN8m0ekbHs/I4/FYsab9KMYJb2LtB8Q==",
                            PhoneNumber = "615-127-8372",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/934.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Deon.Abernathy"
                        });
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Variant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Variants");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.VariantValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VariantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VariantId");

                    b.ToTable("VariantValues");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Address", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.User", "User")
                        .WithMany("Addresses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.BannerDetail", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Banner", "Banner")
                        .WithMany("BannerDetails")
                        .HasForeignKey("BannerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManboShopAPI.Domain.Entities.Product", "Product")
                        .WithMany("BannerDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Banner");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Cart", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("User");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.CartItem", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Cart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManboShopAPI.Domain.Entities.Product", "Product")
                        .WithMany("CartItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Category", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Category", "ParentCategory")
                        .WithMany("SubCategories")
                        .HasForeignKey("ParentCategoryId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.CouponCondition", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Coupon", "Coupon")
                        .WithMany("CouponConditions")
                        .HasForeignKey("CouponId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Coupon");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Favorite", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Product", "Product")
                        .WithMany("Favorites")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManboShopAPI.Domain.Entities.User", "User")
                        .WithMany("Favorites")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Feedback", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Product", "Product")
                        .WithMany("Feedbacks")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManboShopAPI.Domain.Entities.User", "User")
                        .WithMany("Feedbacks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.NewsDetail", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.News", "News")
                        .WithMany("NewsDetails")
                        .HasForeignKey("NewsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManboShopAPI.Domain.Entities.Product", "Product")
                        .WithMany("NewsDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("News");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Order", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Coupon", "Coupon")
                        .WithMany("Orders")
                        .HasForeignKey("CouponId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ManboShopAPI.Domain.Entities.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Coupon");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.OrderDetail", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Coupon", "Coupon")
                        .WithMany("OrderDetails")
                        .HasForeignKey("CouponId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ManboShopAPI.Domain.Entities.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManboShopAPI.Domain.Entities.Product", "Product")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Coupon");

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Product", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ManboShopAPI.Domain.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Brand");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.ProductAttributeValue", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Attributes", "Attribute")
                        .WithMany("ProductAttributeValues")
                        .HasForeignKey("AttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManboShopAPI.Domain.Entities.Product", "Product")
                        .WithMany("ProductAttributeValues")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attribute");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.ProductImage", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Product", "Product")
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.ProductVariantValue", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Product", "Product")
                        .WithMany("ProductVariantValues")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.VariantValue", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Variant", "Variant")
                        .WithMany("VariantValues")
                        .HasForeignKey("VariantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Variant");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManboShopAPI.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Attributes", b =>
                {
                    b.Navigation("ProductAttributeValues");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Banner", b =>
                {
                    b.Navigation("BannerDetails");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Brand", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Cart", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Category", b =>
                {
                    b.Navigation("Products");

                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Coupon", b =>
                {
                    b.Navigation("CouponConditions");

                    b.Navigation("OrderDetails");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.News", b =>
                {
                    b.Navigation("NewsDetails");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Product", b =>
                {
                    b.Navigation("BannerDetails");

                    b.Navigation("CartItems");

                    b.Navigation("Favorites");

                    b.Navigation("Feedbacks");

                    b.Navigation("NewsDetails");

                    b.Navigation("OrderDetails");

                    b.Navigation("ProductAttributeValues");

                    b.Navigation("ProductImages");

                    b.Navigation("ProductVariantValues");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.User", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Favorites");

                    b.Navigation("Feedbacks");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Variant", b =>
                {
                    b.Navigation("VariantValues");
                });
#pragma warning restore 612, 618
        }
    }
}
