// <auto-generated />
using System;
using ManboShopAPI.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ManboShopAPI.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250118120338_update variant product")]
    partial class updatevariantproduct
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AreaOrColonyOrStreetOrSectorOrVillage")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("BuildingOrCompanyOrApartment")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FlatOrHouse")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PinCode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Attributes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Attributes");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Banner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Banners");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.BannerDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BannerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BannerId");

                    b.HasIndex("ProductId");

                    b.ToTable("BannerDetails");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.CartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("ProductId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("ParentCategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ParentCategoryId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Coupon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CurrentUsages")
                        .HasColumnType("int");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("MaxUsages")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Coupons");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.CouponCondition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Attribute")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("CouponId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DiscountAmount")
                        .HasColumnType("int");

                    b.Property<string>("Operator")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Value")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CouponId");

                    b.ToTable("CouponConditions");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Favorite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Favorites");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Star")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.News", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("News");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.NewsDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("NewsId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("NewsId");

                    b.HasIndex("ProductId");

                    b.ToTable("NewsDetails");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CouponId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("SessionId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CouponId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.OrderDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CouponId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CouponId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BrandId")
                        .HasColumnType("int");

                    b.Property<int>("BuyTurn")
                        .HasColumnType("int");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("OldPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("Specification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.ProductAttributeValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AttributeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AttributeId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductAttributeValues");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.ProductImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductImages");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.ProductVariantValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("OldPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("Sku")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductVariantValues");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfilePictureUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("VerificationCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("VerificationCodeExpiryTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            Address = "5301 Fred Parkways, West Dereckshire, Turkey",
                            ConcurrencyStamp = "16fc99de-e622-43ea-af01-db7e82f42ad9",
                            CreatedAt = new DateTime(2024, 12, 21, 12, 3, 36, 328, DateTimeKind.Utc).AddTicks(6112),
                            Email = "May.Johns@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "May",
                            LastName = "Johns",
                            LockoutEnabled = false,
                            NormalizedEmail = "MAY.JOHNS@GMAIL.COM",
                            NormalizedUserName = "MAY53",
                            PasswordHash = "AQAAAAIAAYagAAAAEN0JYe3xzGRKzfWLvlYiasYkM9x2M87CJq7+ccAuB7zuJb4G/jgQrQxyEx2hXiGjfg==",
                            PhoneNumber = "391-105-8805",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/1112.jpg",
                            TwoFactorEnabled = false,
                            UserName = "May53"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            Address = "326 Runolfsdottir Course, Isaistad, Greece",
                            ConcurrencyStamp = "77766ba2-96f4-4bb3-b841-927d6a5b5207",
                            CreatedAt = new DateTime(2024, 10, 18, 12, 3, 36, 329, DateTimeKind.Utc).AddTicks(7724),
                            Email = "Lavonne.Wunsch@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Lavonne",
                            LastName = "Wunsch",
                            LockoutEnabled = false,
                            NormalizedEmail = "LAVONNE.WUNSCH@GMAIL.COM",
                            NormalizedUserName = "LAVONNE.WUNSCH53",
                            PasswordHash = "AQAAAAIAAYagAAAAEB9C9jv1s6EttxZYWiDqILEw9Zvb6wTgxMbDmtYaKjGKD8LOeMYwBD2XUHJWFUc3Dw==",
                            PhoneNumber = "299-100-6377",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/992.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Lavonne.Wunsch53"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            Address = "472 Pat Mount, Beahanmouth, Antigua and Barbuda",
                            ConcurrencyStamp = "8dade60e-1a1e-4126-bd89-3e29f866c943",
                            CreatedAt = new DateTime(2024, 6, 30, 12, 3, 36, 329, DateTimeKind.Utc).AddTicks(8054),
                            Email = "Kenneth94@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Kenneth",
                            LastName = "Mitchell",
                            LockoutEnabled = false,
                            NormalizedEmail = "KENNETH94@HOTMAIL.COM",
                            NormalizedUserName = "KENNETH30",
                            PasswordHash = "AQAAAAIAAYagAAAAELuAdp40KdW1ADnpF9vFr3xkna6LZ4BeAaMEApmIrbB1Y2jpHs/WA0/k0Ot1bKwfOg==",
                            PhoneNumber = "783-247-9714",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/652.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Kenneth30"
                        },
                        new
                        {
                            Id = 4,
                            AccessFailedCount = 0,
                            Address = "8073 Kub Branch, Immanuelchester, Jersey",
                            ConcurrencyStamp = "a52e46bd-1080-4ff1-8d3d-3d80f96d9321",
                            CreatedAt = new DateTime(2024, 4, 2, 12, 3, 36, 329, DateTimeKind.Utc).AddTicks(9376),
                            Email = "Sherman.Gerhold78@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Sherman",
                            LastName = "Gerhold",
                            LockoutEnabled = false,
                            NormalizedEmail = "SHERMAN.GERHOLD78@YAHOO.COM",
                            NormalizedUserName = "SHERMAN.GERHOLD11",
                            PasswordHash = "AQAAAAIAAYagAAAAECrjBIV+zTkZlwTXixaaHKmwlhdWidZ4DJ9lSGlHHdwiHEXEo8fl6V0KDKmAmg5M2w==",
                            PhoneNumber = "665-896-9651",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/144.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Sherman.Gerhold11"
                        },
                        new
                        {
                            Id = 5,
                            AccessFailedCount = 0,
                            Address = "841 Braun Square, Stokesfurt, Cuba",
                            ConcurrencyStamp = "98963c5e-e633-4ab8-860f-1cab21537720",
                            CreatedAt = new DateTime(2024, 6, 26, 12, 3, 36, 329, DateTimeKind.Utc).AddTicks(9676),
                            Email = "Dominic41@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Dominic",
                            LastName = "Daugherty",
                            LockoutEnabled = false,
                            NormalizedEmail = "DOMINIC41@YAHOO.COM",
                            NormalizedUserName = "DOMINIC_DAUGHERTY25",
                            PasswordHash = "AQAAAAIAAYagAAAAEC1W6Vba5pt4gByiG7k7SKdyjFK12w4oLEW0wf1SgbvJMhN2DbyYDukHZgOSUdH/jA==",
                            PhoneNumber = "894-155-8500",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/1077.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Dominic_Daugherty25"
                        },
                        new
                        {
                            Id = 6,
                            AccessFailedCount = 0,
                            Address = "7097 Jasmin Bypass, Port Tatyana, Heard Island and McDonald Islands",
                            ConcurrencyStamp = "96471df2-67df-4cc4-b659-e6c5f2326d47",
                            CreatedAt = new DateTime(2024, 6, 8, 12, 3, 36, 329, DateTimeKind.Utc).AddTicks(9892),
                            Email = "Paul_Kassulke@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Paul",
                            LastName = "Kassulke",
                            LockoutEnabled = false,
                            NormalizedEmail = "PAUL_KASSULKE@GMAIL.COM",
                            NormalizedUserName = "PAUL.KASSULKE",
                            PasswordHash = "AQAAAAIAAYagAAAAEGwTQvtmU5LwHZvpfJo9aK8SJGtLQS7fxlpPdf8cR9LPhs0EG+Du7B0+JgE/+xWzTg==",
                            PhoneNumber = "158-440-1755",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/1121.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Paul.Kassulke"
                        },
                        new
                        {
                            Id = 7,
                            AccessFailedCount = 0,
                            Address = "97446 Weimann Lodge, Kylafurt, Zambia",
                            ConcurrencyStamp = "c6278d99-49ca-4be3-8cb7-95ffb767e9b9",
                            CreatedAt = new DateTime(2024, 5, 17, 12, 3, 36, 330, DateTimeKind.Utc).AddTicks(112),
                            Email = "Laurel80@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Laurel",
                            LastName = "Fisher",
                            LockoutEnabled = false,
                            NormalizedEmail = "LAUREL80@YAHOO.COM",
                            NormalizedUserName = "LAUREL_FISHER33",
                            PasswordHash = "AQAAAAIAAYagAAAAEARY1sDh9wxC7V/Nx9bjWweW4OucdxYaU4yJeukvqL9FCu5zq4PCHrtSxdMej0HUMw==",
                            PhoneNumber = "046-400-7874",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/672.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Laurel_Fisher33"
                        },
                        new
                        {
                            Id = 8,
                            AccessFailedCount = 0,
                            Address = "70136 Jerald Row, Antwonbury, Morocco",
                            ConcurrencyStamp = "37f23843-b966-4bec-bc40-d68377e56051",
                            CreatedAt = new DateTime(2024, 6, 28, 12, 3, 36, 330, DateTimeKind.Utc).AddTicks(348),
                            Email = "Jaclyn_Torp@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Jaclyn",
                            LastName = "Torp",
                            LockoutEnabled = false,
                            NormalizedEmail = "JACLYN_TORP@GMAIL.COM",
                            NormalizedUserName = "JACLYN.TORP",
                            PasswordHash = "AQAAAAIAAYagAAAAEDyHqKf7rmseFGFcwXyfaWO4hP44wUlFT+bjnkoD4UYVCvyiHmr1B2trrfjNMGeJqw==",
                            PhoneNumber = "549-618-6052",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/1146.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Jaclyn.Torp"
                        },
                        new
                        {
                            Id = 9,
                            AccessFailedCount = 0,
                            Address = "180 Paucek Hill, Bartonmouth, Turkey",
                            ConcurrencyStamp = "60940cf5-566a-4813-838b-5a72532671d4",
                            CreatedAt = new DateTime(2024, 4, 12, 12, 3, 36, 330, DateTimeKind.Utc).AddTicks(576),
                            Email = "Jamal_Cruickshank27@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Jamal",
                            LastName = "Cruickshank",
                            LockoutEnabled = false,
                            NormalizedEmail = "JAMAL_CRUICKSHANK27@HOTMAIL.COM",
                            NormalizedUserName = "JAMAL72",
                            PasswordHash = "AQAAAAIAAYagAAAAEC0IwS3dN//frcHJckoYprTByz457cgd4oiY+pwz214gCJNKaoosp0FLCtTcTZZmBQ==",
                            PhoneNumber = "835-753-1725",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/526.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Jamal72"
                        },
                        new
                        {
                            Id = 10,
                            AccessFailedCount = 0,
                            Address = "0034 Marley Walk, Corashire, Puerto Rico",
                            ConcurrencyStamp = "fe9ba86c-20ad-4813-8776-071b2b726ef5",
                            CreatedAt = new DateTime(2024, 9, 26, 12, 3, 36, 330, DateTimeKind.Utc).AddTicks(822),
                            Email = "Karli_Koch68@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Karli",
                            LastName = "Koch",
                            LockoutEnabled = false,
                            NormalizedEmail = "KARLI_KOCH68@GMAIL.COM",
                            NormalizedUserName = "KARLI58",
                            PasswordHash = "AQAAAAIAAYagAAAAEISUTwCZPcK+IDJPI0m7XZ1QLk79Mha2bOhkbUNL9VZW5E7kAbHZfK0PcCsxn92Nuw==",
                            PhoneNumber = "875-051-6591",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/454.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Karli58"
                        },
                        new
                        {
                            Id = 11,
                            AccessFailedCount = 0,
                            Address = "22115 Brionna Court, Faheyborough, Bahamas",
                            ConcurrencyStamp = "25815ca3-d844-4ece-b661-3354db6e2a7a",
                            CreatedAt = new DateTime(2024, 1, 22, 12, 3, 36, 330, DateTimeKind.Utc).AddTicks(1025),
                            Email = "Sophie_Spinka@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Sophie",
                            LastName = "Spinka",
                            LockoutEnabled = false,
                            NormalizedEmail = "SOPHIE_SPINKA@GMAIL.COM",
                            NormalizedUserName = "SOPHIE76",
                            PasswordHash = "AQAAAAIAAYagAAAAEFtYbqTFBNpyb/vkWuu+kOt2YVdIeXQa3q10uJHnyWb8WMdFGZQQ82NbDrct6MAutw==",
                            PhoneNumber = "134-464-6342",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/884.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Sophie76"
                        },
                        new
                        {
                            Id = 12,
                            AccessFailedCount = 0,
                            Address = "174 Bradtke Burgs, North Godfrey, French Southern Territories",
                            ConcurrencyStamp = "cbe6b196-4a7a-40c6-9f11-76effda07123",
                            CreatedAt = new DateTime(2024, 6, 18, 12, 3, 36, 330, DateTimeKind.Utc).AddTicks(1265),
                            Email = "Kelton46@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Kelton",
                            LastName = "Hills",
                            LockoutEnabled = false,
                            NormalizedEmail = "KELTON46@YAHOO.COM",
                            NormalizedUserName = "KELTON11",
                            PasswordHash = "AQAAAAIAAYagAAAAELbrv28rSxVbSKGWZUKAia3YwcM6v9vhRp1OeU5n5E6tMVl7z9/X7QvQ8N00RhWgqQ==",
                            PhoneNumber = "358-850-9156",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/1166.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Kelton11"
                        },
                        new
                        {
                            Id = 13,
                            AccessFailedCount = 0,
                            Address = "0326 Morar Drives, Weimannchester, Tokelau",
                            ConcurrencyStamp = "d04db97e-03a4-46e5-b569-60ab6dfbf828",
                            CreatedAt = new DateTime(2024, 10, 14, 12, 3, 36, 330, DateTimeKind.Utc).AddTicks(1448),
                            Email = "Pearline.Volkman98@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Pearline",
                            LastName = "Volkman",
                            LockoutEnabled = false,
                            NormalizedEmail = "PEARLINE.VOLKMAN98@HOTMAIL.COM",
                            NormalizedUserName = "PEARLINE95",
                            PasswordHash = "AQAAAAIAAYagAAAAEBapE2XS0OuwlLMBGLB6owDJrETOA/Z5PXHzQH9UD0EvPCiV4GAMrormD5i4kExYIg==",
                            PhoneNumber = "810-348-3009",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/991.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Pearline95"
                        },
                        new
                        {
                            Id = 14,
                            AccessFailedCount = 0,
                            Address = "692 Berniece Plaza, Sageberg, Bhutan",
                            ConcurrencyStamp = "7a878c3d-12a1-4f10-9604-6f77aeadabb1",
                            CreatedAt = new DateTime(2024, 7, 27, 12, 3, 36, 330, DateTimeKind.Utc).AddTicks(1711),
                            Email = "Mia29@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Mia",
                            LastName = "Conroy",
                            LockoutEnabled = false,
                            NormalizedEmail = "MIA29@YAHOO.COM",
                            NormalizedUserName = "MIA87",
                            PasswordHash = "AQAAAAIAAYagAAAAENmHqzPV7f/NDOyIeCcARMMYerudQVcW3DdAaM3tj2R+g9B3hdIuuJbBHISaKjO7kQ==",
                            PhoneNumber = "362-542-5391",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/1171.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Mia87"
                        },
                        new
                        {
                            Id = 15,
                            AccessFailedCount = 0,
                            Address = "169 Ransom Drives, Rogahnmouth, Taiwan",
                            ConcurrencyStamp = "5c9725db-47a9-4a2d-88ee-efb734f883c9",
                            CreatedAt = new DateTime(2024, 10, 19, 12, 3, 36, 330, DateTimeKind.Utc).AddTicks(2466),
                            Email = "Ollie54@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Ollie",
                            LastName = "Gottlieb",
                            LockoutEnabled = false,
                            NormalizedEmail = "OLLIE54@HOTMAIL.COM",
                            NormalizedUserName = "OLLIE_GOTTLIEB",
                            PasswordHash = "AQAAAAIAAYagAAAAEL8P5pvzAV2bE/JAZGi2X4YUFYcNEvigQDSh5SgKzitHcSX3T1tDStDdk/sH9HwtpA==",
                            PhoneNumber = "361-490-3961",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/714.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Ollie_Gottlieb"
                        },
                        new
                        {
                            Id = 16,
                            AccessFailedCount = 0,
                            Address = "70810 Parker Valley, Lake Loyce, Venezuela",
                            ConcurrencyStamp = "69061b5d-5880-4d80-b33d-2524873d8178",
                            CreatedAt = new DateTime(2024, 4, 24, 12, 3, 36, 330, DateTimeKind.Utc).AddTicks(3343),
                            Email = "Dereck80@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Dereck",
                            LastName = "Nader",
                            LockoutEnabled = false,
                            NormalizedEmail = "DERECK80@GMAIL.COM",
                            NormalizedUserName = "DERECK85",
                            PasswordHash = "AQAAAAIAAYagAAAAED4y/BKRv1v54uKSH1BN5y//ppqEHDbCGXHd6rrVTCwQliTeCokDTWm3X8zX41B5+A==",
                            PhoneNumber = "097-861-7819",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/808.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Dereck85"
                        },
                        new
                        {
                            Id = 17,
                            AccessFailedCount = 0,
                            Address = "3980 Adams Throughway, Port Lelahmouth, Uganda",
                            ConcurrencyStamp = "4a6537ce-4741-429d-bc1d-8bab1a69ad34",
                            CreatedAt = new DateTime(2024, 11, 28, 12, 3, 36, 330, DateTimeKind.Utc).AddTicks(3596),
                            Email = "Jay_Wolf66@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Jay",
                            LastName = "Wolf",
                            LockoutEnabled = false,
                            NormalizedEmail = "JAY_WOLF66@YAHOO.COM",
                            NormalizedUserName = "JAY_WOLF",
                            PasswordHash = "AQAAAAIAAYagAAAAEC4ol4I6wZ9giigIIUXa+DP2ncfLNSan5bVihvGtR0cifPDoKmvjtspDy84UPUNdzA==",
                            PhoneNumber = "393-439-3642",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/381.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Jay_Wolf"
                        },
                        new
                        {
                            Id = 18,
                            AccessFailedCount = 0,
                            Address = "0263 Fadel Plains, Auerchester, Bangladesh",
                            ConcurrencyStamp = "8d9652ea-c43d-4bb4-8154-8f4b59195307",
                            CreatedAt = new DateTime(2024, 9, 23, 12, 3, 36, 330, DateTimeKind.Utc).AddTicks(3832),
                            Email = "Katheryn60@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Katheryn",
                            LastName = "Homenick",
                            LockoutEnabled = false,
                            NormalizedEmail = "KATHERYN60@YAHOO.COM",
                            NormalizedUserName = "KATHERYN.HOMENICK29",
                            PasswordHash = "AQAAAAIAAYagAAAAEB1Ijafzm1zKvCWLe/zquusXI1WW3VEKCAGDm7puSOAzfP4X8eVv/h2WJgjXS3qK5A==",
                            PhoneNumber = "748-640-3170",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/1100.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Katheryn.Homenick29"
                        },
                        new
                        {
                            Id = 19,
                            AccessFailedCount = 0,
                            Address = "410 Murazik Circle, Lake Marquiseside, Norway",
                            ConcurrencyStamp = "ee14ec57-b04a-4cc5-b3a8-c471d14c66d7",
                            CreatedAt = new DateTime(2024, 11, 8, 12, 3, 36, 330, DateTimeKind.Utc).AddTicks(4049),
                            Email = "Berry_Robel@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Berry",
                            LastName = "Robel",
                            LockoutEnabled = false,
                            NormalizedEmail = "BERRY_ROBEL@GMAIL.COM",
                            NormalizedUserName = "BERRY1",
                            PasswordHash = "AQAAAAIAAYagAAAAEK+XJPdjPPFJRQ+mfr10Kgv1b5HTSno/pxMEBmjJ9txWGdP0QlDAMbnhQCk8xFR9rg==",
                            PhoneNumber = "964-931-0511",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/690.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Berry1"
                        },
                        new
                        {
                            Id = 20,
                            AccessFailedCount = 0,
                            Address = "24123 Leland Glen, Briannefort, Dominican Republic",
                            ConcurrencyStamp = "97bb375d-93a2-4507-a46c-94e9edad2b01",
                            CreatedAt = new DateTime(2024, 3, 26, 12, 3, 36, 330, DateTimeKind.Utc).AddTicks(4322),
                            Email = "Erik.Schuppe53@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Erik",
                            LastName = "Schuppe",
                            LockoutEnabled = false,
                            NormalizedEmail = "ERIK.SCHUPPE53@YAHOO.COM",
                            NormalizedUserName = "ERIK_SCHUPPE",
                            PasswordHash = "AQAAAAIAAYagAAAAEGThVnzZOC5YGpyVnCAHPtGuPP7hibh2059nAmS3zFelXjtJeiuQxyzL4hFCnspDfA==",
                            PhoneNumber = "979-980-7456",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/209.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Erik_Schuppe"
                        },
                        new
                        {
                            Id = 21,
                            AccessFailedCount = 0,
                            Address = "6681 McCullough Groves, South Gayleview, Netherlands",
                            ConcurrencyStamp = "6337d7a6-a9f7-4454-944b-f28bd4b1225c",
                            CreatedAt = new DateTime(2025, 1, 8, 12, 3, 36, 330, DateTimeKind.Utc).AddTicks(4529),
                            Email = "Wilmer_McKenzie@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Wilmer",
                            LastName = "McKenzie",
                            LockoutEnabled = false,
                            NormalizedEmail = "WILMER_MCKENZIE@GMAIL.COM",
                            NormalizedUserName = "WILMER24",
                            PasswordHash = "AQAAAAIAAYagAAAAEK7wp6Sb2/XKxX5eVOkUmQleheOkqhHKrq4KiyVU5vp8ppK0uqijV+bl80iiG0P3rg==",
                            PhoneNumber = "752-313-2245",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/832.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Wilmer24"
                        },
                        new
                        {
                            Id = 22,
                            AccessFailedCount = 0,
                            Address = "5738 Hortense Fields, Port Doloresfurt, Albania",
                            ConcurrencyStamp = "c385d60d-40b1-4b0f-8e24-9fc5275257d4",
                            CreatedAt = new DateTime(2024, 2, 24, 12, 3, 36, 330, DateTimeKind.Utc).AddTicks(4973),
                            Email = "Ophelia.Johnson67@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Ophelia",
                            LastName = "Johnson",
                            LockoutEnabled = false,
                            NormalizedEmail = "OPHELIA.JOHNSON67@HOTMAIL.COM",
                            NormalizedUserName = "OPHELIA9",
                            PasswordHash = "AQAAAAIAAYagAAAAED/yIqZMzawQ6MKnyleKoERcLNAVThkXhGFjPKC8If/gOVRLpRFGMKBXkeAXcNEfwg==",
                            PhoneNumber = "835-684-2617",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/1246.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Ophelia9"
                        },
                        new
                        {
                            Id = 23,
                            AccessFailedCount = 0,
                            Address = "63397 Beverly Ford, South Dexterfort, Guinea",
                            ConcurrencyStamp = "8424a8cd-7eb5-4cb5-9a91-98f185edd1d4",
                            CreatedAt = new DateTime(2024, 11, 21, 12, 3, 36, 330, DateTimeKind.Utc).AddTicks(5274),
                            Email = "Cullen31@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Cullen",
                            LastName = "Kreiger",
                            LockoutEnabled = false,
                            NormalizedEmail = "CULLEN31@GMAIL.COM",
                            NormalizedUserName = "CULLEN.KREIGER",
                            PasswordHash = "AQAAAAIAAYagAAAAEKPrn/8DIAngzaZprLf5vnAtsdaDOprb5Sc2s6C4pDGGCsXFXFftMX/J0JsUXOq7bQ==",
                            PhoneNumber = "899-467-4198",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/1109.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Cullen.Kreiger"
                        },
                        new
                        {
                            Id = 24,
                            AccessFailedCount = 0,
                            Address = "57691 Reichert Via, Malcolmside, United States of America",
                            ConcurrencyStamp = "80b081a6-7f05-4e84-9e8a-118115ddd2bc",
                            CreatedAt = new DateTime(2024, 8, 10, 12, 3, 36, 330, DateTimeKind.Utc).AddTicks(5495),
                            Email = "Ruthie.Collier@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Ruthie",
                            LastName = "Collier",
                            LockoutEnabled = false,
                            NormalizedEmail = "RUTHIE.COLLIER@YAHOO.COM",
                            NormalizedUserName = "RUTHIE41",
                            PasswordHash = "AQAAAAIAAYagAAAAEJpbN5FjhKInERCRO//7z/1/rHGt6tUSMfvyQGTjDqxvHCSpLenPZRVUwRMad4Sbog==",
                            PhoneNumber = "596-780-8560",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/1009.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Ruthie41"
                        },
                        new
                        {
                            Id = 25,
                            AccessFailedCount = 0,
                            Address = "91869 Heloise Plaza, Adanton, Slovakia (Slovak Republic)",
                            ConcurrencyStamp = "1fe7c6f1-4d40-4575-bd55-a48dd425a9b4",
                            CreatedAt = new DateTime(2024, 10, 11, 12, 3, 36, 330, DateTimeKind.Utc).AddTicks(5726),
                            Email = "Blaise36@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Blaise",
                            LastName = "Russel",
                            LockoutEnabled = false,
                            NormalizedEmail = "BLAISE36@GMAIL.COM",
                            NormalizedUserName = "BLAISE.RUSSEL2",
                            PasswordHash = "AQAAAAIAAYagAAAAEIEyoVs6DkJBwrCQjmsqsqw5xhA3ttGR5VJeXS5+L++K6vl/eXAOAi7CtqFVdKSDJQ==",
                            PhoneNumber = "283-081-9155",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/1005.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Blaise.Russel2"
                        },
                        new
                        {
                            Id = 26,
                            AccessFailedCount = 0,
                            Address = "768 Leannon Lakes, Lake Alberthaside, San Marino",
                            ConcurrencyStamp = "8fb4d653-b6d9-4166-9b59-28492d410db4",
                            CreatedAt = new DateTime(2024, 10, 31, 12, 3, 36, 330, DateTimeKind.Utc).AddTicks(5970),
                            Email = "Tressie_MacGyver8@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Tressie",
                            LastName = "MacGyver",
                            LockoutEnabled = false,
                            NormalizedEmail = "TRESSIE_MACGYVER8@HOTMAIL.COM",
                            NormalizedUserName = "TRESSIE_MACGYVER86",
                            PasswordHash = "AQAAAAIAAYagAAAAEIxxMycfeQ+b6PHVr5s1ec2arpVHbgIwF66rzBO4nVLTnIr88rhQ92S5APbUI06Iuw==",
                            PhoneNumber = "663-367-9153",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/303.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Tressie_MacGyver86"
                        },
                        new
                        {
                            Id = 27,
                            AccessFailedCount = 0,
                            Address = "39412 Mante Mountains, Franciscashire, Seychelles",
                            ConcurrencyStamp = "2e5b6e26-92c7-44ab-875f-5f3910926d56",
                            CreatedAt = new DateTime(2024, 12, 1, 12, 3, 36, 330, DateTimeKind.Utc).AddTicks(7184),
                            Email = "Alexandro46@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Alexandro",
                            LastName = "Kshlerin",
                            LockoutEnabled = false,
                            NormalizedEmail = "ALEXANDRO46@HOTMAIL.COM",
                            NormalizedUserName = "ALEXANDRO63",
                            PasswordHash = "AQAAAAIAAYagAAAAEOC2DBeDlTiJFKOPIaAwWTgZkIy3P83jnMGtqfMsKo96/AigSHPjpi8DCTwj5jhOCw==",
                            PhoneNumber = "831-133-6141",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/310.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Alexandro63"
                        },
                        new
                        {
                            Id = 28,
                            AccessFailedCount = 0,
                            Address = "6266 Kali Camp, West Carlieshire, Papua New Guinea",
                            ConcurrencyStamp = "fd676e33-c627-4de0-8b1a-aa478904ec55",
                            CreatedAt = new DateTime(2024, 7, 26, 12, 3, 36, 330, DateTimeKind.Utc).AddTicks(7841),
                            Email = "Hassie87@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Hassie",
                            LastName = "Crist",
                            LockoutEnabled = false,
                            NormalizedEmail = "HASSIE87@GMAIL.COM",
                            NormalizedUserName = "HASSIE_CRIST",
                            PasswordHash = "AQAAAAIAAYagAAAAEGI8Ne6jDrs8OdWG1Yj6eevjBkJIToyagT1w+kJz5buTm2JvJEGDMnCUYqpoLcO7dA==",
                            PhoneNumber = "078-180-5681",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/138.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Hassie_Crist"
                        },
                        new
                        {
                            Id = 29,
                            AccessFailedCount = 0,
                            Address = "05790 Barrows Cape, Ankundingmouth, Thailand",
                            ConcurrencyStamp = "5a90d1f2-724f-4bd7-9b4f-a3dbaee42362",
                            CreatedAt = new DateTime(2024, 11, 25, 12, 3, 36, 331, DateTimeKind.Utc).AddTicks(229),
                            Email = "Oral.Crona@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Oral",
                            LastName = "Crona",
                            LockoutEnabled = false,
                            NormalizedEmail = "ORAL.CRONA@HOTMAIL.COM",
                            NormalizedUserName = "ORAL_CRONA",
                            PasswordHash = "AQAAAAIAAYagAAAAEFWRS5oZHMEfgNVhIETvmTzEuSGwO7dy25s7qCfQCgJx9c9l59NreHSmmltEC6fQBg==",
                            PhoneNumber = "494-447-3153",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/380.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Oral_Crona"
                        },
                        new
                        {
                            Id = 30,
                            AccessFailedCount = 0,
                            Address = "039 Rice River, Lockmanport, Aruba",
                            ConcurrencyStamp = "508f3507-924d-461d-a46f-51ea8ebcb621",
                            CreatedAt = new DateTime(2024, 3, 22, 12, 3, 36, 331, DateTimeKind.Utc).AddTicks(1249),
                            Email = "Marcelino.Schaden@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Marcelino",
                            LastName = "Schaden",
                            LockoutEnabled = false,
                            NormalizedEmail = "MARCELINO.SCHADEN@GMAIL.COM",
                            NormalizedUserName = "MARCELINO80",
                            PasswordHash = "AQAAAAIAAYagAAAAEC5lqu1pSPWbxaUHKU0ofrept3ZaD7ICdKrWGZCb7UO/1KPK+A8Yv/vWOEq/nl4RJw==",
                            PhoneNumber = "683-598-3733",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/745.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Marcelino80"
                        },
                        new
                        {
                            Id = 31,
                            AccessFailedCount = 0,
                            Address = "3051 Kessler Square, McCulloughview, Czech Republic",
                            ConcurrencyStamp = "e9b8e9cd-25c6-4fbb-922c-d2b37a24d5f8",
                            CreatedAt = new DateTime(2024, 4, 20, 12, 3, 36, 331, DateTimeKind.Utc).AddTicks(3135),
                            Email = "Justyn36@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Justyn",
                            LastName = "Robel",
                            LockoutEnabled = false,
                            NormalizedEmail = "JUSTYN36@HOTMAIL.COM",
                            NormalizedUserName = "JUSTYN34",
                            PasswordHash = "AQAAAAIAAYagAAAAEJSdlzgTQGWOQ5JQU6GlCTuOHtdWKV+ANnRccP9ANmFHeguCDJRW9sZzM0W3G2NgnQ==",
                            PhoneNumber = "278-554-7238",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/309.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Justyn34"
                        },
                        new
                        {
                            Id = 32,
                            AccessFailedCount = 0,
                            Address = "6433 Santos Bypass, North Marleymouth, Lithuania",
                            ConcurrencyStamp = "77c30dbb-0924-4172-895b-24bd64f782e1",
                            CreatedAt = new DateTime(2024, 4, 17, 12, 3, 36, 331, DateTimeKind.Utc).AddTicks(4349),
                            Email = "Louie.Collier50@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Louie",
                            LastName = "Collier",
                            LockoutEnabled = false,
                            NormalizedEmail = "LOUIE.COLLIER50@YAHOO.COM",
                            NormalizedUserName = "LOUIE_COLLIER44",
                            PasswordHash = "AQAAAAIAAYagAAAAEDW2KWbh2HvNoZNrY4kv4FxjjfRdmycUze06a0n1/eGyZN9SHsc7TNobvgEtnTJp6g==",
                            PhoneNumber = "639-412-8092",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/325.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Louie_Collier44"
                        },
                        new
                        {
                            Id = 33,
                            AccessFailedCount = 0,
                            Address = "9406 Kelly Shoal, West Corbinland, Norway",
                            ConcurrencyStamp = "1f44283d-38b2-44cc-9a12-2bbe5f76668b",
                            CreatedAt = new DateTime(2024, 7, 1, 12, 3, 36, 331, DateTimeKind.Utc).AddTicks(5868),
                            Email = "Jalen_Dooley@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Jalen",
                            LastName = "Dooley",
                            LockoutEnabled = false,
                            NormalizedEmail = "JALEN_DOOLEY@HOTMAIL.COM",
                            NormalizedUserName = "JALEN79",
                            PasswordHash = "AQAAAAIAAYagAAAAEHDbBFxiT7Ku1Z3mnpFRsa45EloIQ7Xtc3+6kErDga//a661ghzIi7dNvOut/8t36w==",
                            PhoneNumber = "647-684-3659",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/193.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Jalen79"
                        },
                        new
                        {
                            Id = 34,
                            AccessFailedCount = 0,
                            Address = "23174 Claudie Village, Fredaside, Barbados",
                            ConcurrencyStamp = "82b80cd5-78bd-43a5-ad6d-8ffa6aa36e09",
                            CreatedAt = new DateTime(2024, 1, 31, 12, 3, 36, 331, DateTimeKind.Utc).AddTicks(6942),
                            Email = "Lea_Kuphal@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Lea",
                            LastName = "Kuphal",
                            LockoutEnabled = false,
                            NormalizedEmail = "LEA_KUPHAL@GMAIL.COM",
                            NormalizedUserName = "LEA2",
                            PasswordHash = "AQAAAAIAAYagAAAAEAMv5GTOFSpenEIU9RdajQ2flSo+hlqsZvexJKehG1vj3Af5/d5U/sSa1wl5VROZcA==",
                            PhoneNumber = "660-735-2671",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/782.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Lea2"
                        },
                        new
                        {
                            Id = 35,
                            AccessFailedCount = 0,
                            Address = "2189 Pablo Manors, South Emmanuelberg, Christmas Island",
                            ConcurrencyStamp = "bd526f23-3dfe-417d-88d7-0a1c922f3a0a",
                            CreatedAt = new DateTime(2024, 7, 10, 12, 3, 36, 331, DateTimeKind.Utc).AddTicks(9220),
                            Email = "Sheridan_Jacobi@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Sheridan",
                            LastName = "Jacobi",
                            LockoutEnabled = false,
                            NormalizedEmail = "SHERIDAN_JACOBI@YAHOO.COM",
                            NormalizedUserName = "SHERIDAN_JACOBI",
                            PasswordHash = "AQAAAAIAAYagAAAAEN96iYEozEY3mGgzZoBpUUgFiDkJ8RdEXBQpE3VBYKdJaG0lTFMGojqOFa/PnUfcaw==",
                            PhoneNumber = "316-796-3148",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/859.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Sheridan_Jacobi"
                        },
                        new
                        {
                            Id = 36,
                            AccessFailedCount = 0,
                            Address = "060 Klein Rue, Port Barrettside, Angola",
                            ConcurrencyStamp = "814bee33-1939-4c10-ac80-158e85b57dac",
                            CreatedAt = new DateTime(2024, 2, 14, 12, 3, 36, 331, DateTimeKind.Utc).AddTicks(9469),
                            Email = "Consuelo.Blick@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Consuelo",
                            LastName = "Blick",
                            LockoutEnabled = false,
                            NormalizedEmail = "CONSUELO.BLICK@HOTMAIL.COM",
                            NormalizedUserName = "CONSUELO.BLICK89",
                            PasswordHash = "AQAAAAIAAYagAAAAEGkWhVKln3trCyTWIR/6zaQZRMQNFLaas/E2ZuuHF8Wq8n5d87EbnoEYcIzCs2g3rQ==",
                            PhoneNumber = "263-017-5544",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/734.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Consuelo.Blick89"
                        },
                        new
                        {
                            Id = 37,
                            AccessFailedCount = 0,
                            Address = "600 Jerald Landing, New Ferminland, British Indian Ocean Territory (Chagos Archipelago)",
                            ConcurrencyStamp = "46f86c2c-d68b-4d40-b18c-c6deaa1fc978",
                            CreatedAt = new DateTime(2024, 3, 18, 12, 3, 36, 331, DateTimeKind.Utc).AddTicks(9715),
                            Email = "Brenda.Witting@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Brenda",
                            LastName = "Witting",
                            LockoutEnabled = false,
                            NormalizedEmail = "BRENDA.WITTING@HOTMAIL.COM",
                            NormalizedUserName = "BRENDA.WITTING",
                            PasswordHash = "AQAAAAIAAYagAAAAEPPNP5XLNfj0F0mcB1wQQFjhc6sqwPbpcoeVhUTw9bx1Xv/WLSJ6wdBGjv69bMFRyQ==",
                            PhoneNumber = "277-926-4983",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/485.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Brenda.Witting"
                        },
                        new
                        {
                            Id = 38,
                            AccessFailedCount = 0,
                            Address = "40451 Hills Heights, Ardithview, New Zealand",
                            ConcurrencyStamp = "f7e90657-349f-461e-9e11-bb2a16c8ca44",
                            CreatedAt = new DateTime(2024, 2, 14, 12, 3, 36, 331, DateTimeKind.Utc).AddTicks(9907),
                            Email = "Zetta49@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Zetta",
                            LastName = "Hills",
                            LockoutEnabled = false,
                            NormalizedEmail = "ZETTA49@GMAIL.COM",
                            NormalizedUserName = "ZETTA.HILLS",
                            PasswordHash = "AQAAAAIAAYagAAAAEPL+3DT8Mmao06lIjT6+rRZfDZ0x4ogoOlBNw6XpvlsnY5SHfXDghZv8uaEr59cW8Q==",
                            PhoneNumber = "703-040-9272",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/775.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Zetta.Hills"
                        },
                        new
                        {
                            Id = 39,
                            AccessFailedCount = 0,
                            Address = "15190 Ora Plains, Deontaeburgh, Turks and Caicos Islands",
                            ConcurrencyStamp = "9795ed0a-25ad-49b1-8e8d-0212c6a600e7",
                            CreatedAt = new DateTime(2024, 3, 14, 12, 3, 36, 332, DateTimeKind.Utc).AddTicks(144),
                            Email = "Carrie25@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Carrie",
                            LastName = "Kiehn",
                            LockoutEnabled = false,
                            NormalizedEmail = "CARRIE25@HOTMAIL.COM",
                            NormalizedUserName = "CARRIE5",
                            PasswordHash = "AQAAAAIAAYagAAAAEL5DHU+5XOMym9usNkozRndaGZjKL0HXtEskgpJKAS0DIt9/2e30jii83RAyh1TSUQ==",
                            PhoneNumber = "538-985-1225",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/111.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Carrie5"
                        },
                        new
                        {
                            Id = 40,
                            AccessFailedCount = 0,
                            Address = "04583 Veda Loaf, Korystad, Saint Helena",
                            ConcurrencyStamp = "8679c9c0-be87-4904-bde5-2ad56e1e31e2",
                            CreatedAt = new DateTime(2024, 2, 1, 12, 3, 36, 332, DateTimeKind.Utc).AddTicks(348),
                            Email = "Ines.Keeling@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Ines",
                            LastName = "Keeling",
                            LockoutEnabled = false,
                            NormalizedEmail = "INES.KEELING@HOTMAIL.COM",
                            NormalizedUserName = "INES61",
                            PasswordHash = "AQAAAAIAAYagAAAAEBrjc2cnfDbIONWPHqwHhn/K0J1nZo6vy1f2ax/l9VNv15T0SeqpbG5wiQGeZ4aUlQ==",
                            PhoneNumber = "048-741-9810",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/912.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Ines61"
                        });
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Variant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Variants");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.VariantValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VariantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VariantId");

                    b.ToTable("VariantValues");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Address", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.User", "User")
                        .WithMany("Addresses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.BannerDetail", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Banner", "Banner")
                        .WithMany("BannerDetails")
                        .HasForeignKey("BannerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManboShopAPI.Domain.Entities.Product", "Product")
                        .WithMany("BannerDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Banner");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Cart", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("User");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.CartItem", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Cart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManboShopAPI.Domain.Entities.Product", "Product")
                        .WithMany("CartItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Category", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Category", "ParentCategory")
                        .WithMany("SubCategories")
                        .HasForeignKey("ParentCategoryId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.CouponCondition", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Coupon", "Coupon")
                        .WithMany("CouponConditions")
                        .HasForeignKey("CouponId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Coupon");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Favorite", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Product", "Product")
                        .WithMany("Favorites")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManboShopAPI.Domain.Entities.User", "User")
                        .WithMany("Favorites")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Feedback", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Product", "Product")
                        .WithMany("Feedbacks")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManboShopAPI.Domain.Entities.User", "User")
                        .WithMany("Feedbacks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.NewsDetail", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.News", "News")
                        .WithMany("NewsDetails")
                        .HasForeignKey("NewsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManboShopAPI.Domain.Entities.Product", "Product")
                        .WithMany("NewsDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("News");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Order", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Coupon", "Coupon")
                        .WithMany("Orders")
                        .HasForeignKey("CouponId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ManboShopAPI.Domain.Entities.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Coupon");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.OrderDetail", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Coupon", "Coupon")
                        .WithMany("OrderDetails")
                        .HasForeignKey("CouponId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ManboShopAPI.Domain.Entities.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManboShopAPI.Domain.Entities.Product", "Product")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Coupon");

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Product", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ManboShopAPI.Domain.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Brand");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.ProductAttributeValue", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Attributes", "Attribute")
                        .WithMany("ProductAttributeValues")
                        .HasForeignKey("AttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManboShopAPI.Domain.Entities.Product", "Product")
                        .WithMany("ProductAttributeValues")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attribute");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.ProductImage", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Product", "Product")
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.ProductVariantValue", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Product", "Product")
                        .WithMany("ProductVariantValues")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.VariantValue", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Variant", "Variant")
                        .WithMany("VariantValues")
                        .HasForeignKey("VariantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Variant");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManboShopAPI.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Attributes", b =>
                {
                    b.Navigation("ProductAttributeValues");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Banner", b =>
                {
                    b.Navigation("BannerDetails");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Brand", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Cart", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Category", b =>
                {
                    b.Navigation("Products");

                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Coupon", b =>
                {
                    b.Navigation("CouponConditions");

                    b.Navigation("OrderDetails");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.News", b =>
                {
                    b.Navigation("NewsDetails");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Product", b =>
                {
                    b.Navigation("BannerDetails");

                    b.Navigation("CartItems");

                    b.Navigation("Favorites");

                    b.Navigation("Feedbacks");

                    b.Navigation("NewsDetails");

                    b.Navigation("OrderDetails");

                    b.Navigation("ProductAttributeValues");

                    b.Navigation("ProductImages");

                    b.Navigation("ProductVariantValues");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.User", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Favorites");

                    b.Navigation("Feedbacks");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Variant", b =>
                {
                    b.Navigation("VariantValues");
                });
#pragma warning restore 612, 618
        }
    }
}
