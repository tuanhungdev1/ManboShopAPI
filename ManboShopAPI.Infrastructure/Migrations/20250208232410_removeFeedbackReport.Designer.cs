// <auto-generated />
using System;
using ManboShopAPI.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ManboShopAPI.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250208232410_removeFeedbackReport")]
    partial class removeFeedbackReport
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ManboShopAPI.Application.Services.VariantValueImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("VariantValueId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VariantValueId");

                    b.ToTable("VariantValueImages");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AddressLine")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Attributes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Attributes");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Banner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Banners");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.BannerDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BannerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BannerId");

                    b.HasIndex("ProductId");

                    b.ToTable("BannerDetails");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.CartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductVariantValueId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("ProductVariantValueId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("ParentCategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ParentCategoryId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Coupon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CurrentUsages")
                        .HasColumnType("int");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("MaxUsages")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Coupons");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.CouponCondition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Attribute")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("CouponId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DiscountAmount")
                        .HasColumnType("int");

                    b.Property<string>("Operator")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Value")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CouponId");

                    b.ToTable("CouponConditions");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Favorite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Favorites");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Star")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.FeedbackLike", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("FeedbackId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FeedbackId");

                    b.HasIndex("UserId", "FeedbackId")
                        .IsUnique()
                        .HasFilter("[FeedbackId] IS NOT NULL");

                    b.ToTable("FeedbackLikes");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.News", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("News");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.NewsDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("NewsId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("NewsId");

                    b.HasIndex("ProductId");

                    b.ToTable("NewsDetails");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CancelledAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ConfirmedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CouponId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeliveredAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("PaymentMethod")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("PaymentStatus")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ProcessedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ShippedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ShippingAddressId")
                        .HasColumnType("int");

                    b.Property<decimal>("ShippingFee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("SubTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CouponId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.OrderAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AddressLine")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.ToTable("OrderAddresses");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.OrderDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CouponId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductVariantValueId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CouponId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductVariantValueId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BrandId")
                        .HasColumnType("int");

                    b.Property<int>("BuyTurn")
                        .HasColumnType("int");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("OldPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("SlugName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Specification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.ProductAttributeValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AttributeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AttributeId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductAttributeValues");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.ProductImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductImages");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.ProductVariantValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("OldPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("Sku")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductVariantValues");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfilePictureUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("VerificationCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("VerificationCodeExpiryTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            Address = "63388 Edwina Prairie, Lake Aleen, Myanmar",
                            ConcurrencyStamp = "b61ff116-11c8-44b3-a8be-2d37f6f38435",
                            CreatedAt = new DateTime(2024, 8, 24, 23, 24, 8, 117, DateTimeKind.Utc).AddTicks(2167),
                            Email = "Lois.Raynor@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Lois",
                            LastName = "Raynor",
                            LockoutEnabled = false,
                            NormalizedEmail = "LOIS.RAYNOR@HOTMAIL.COM",
                            NormalizedUserName = "LOIS68",
                            PasswordHash = "AQAAAAIAAYagAAAAEHTjRyIK/e51AVaLEehUgikooYOFRCIC14kx3OaCkxvTsJipmvhSmApbelchXyQWbw==",
                            PhoneNumber = "199-187-4029",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/344.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Lois68"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            Address = "32039 Connelly Lodge, West Bettyehaven, Wallis and Futuna",
                            ConcurrencyStamp = "4fc86652-9ade-4ca4-8362-e57a3d95a614",
                            CreatedAt = new DateTime(2024, 4, 25, 23, 24, 8, 118, DateTimeKind.Utc).AddTicks(3885),
                            Email = "Monserrat.Bins27@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Monserrat",
                            LastName = "Bins",
                            LockoutEnabled = false,
                            NormalizedEmail = "MONSERRAT.BINS27@GMAIL.COM",
                            NormalizedUserName = "MONSERRAT.BINS9",
                            PasswordHash = "AQAAAAIAAYagAAAAEJ6lBh+pzPq51qNB38PvGWT5QkQt68sUBSRWw7bz93RgvWKaGXJlNjLQrdUiCO6/uw==",
                            PhoneNumber = "621-588-7415",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/1038.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Monserrat.Bins9"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            Address = "9886 Jamal Common, Boehmchester, Uruguay",
                            ConcurrencyStamp = "23179e8b-e807-427c-afaa-0a7f26ae61b2",
                            CreatedAt = new DateTime(2024, 7, 13, 23, 24, 8, 118, DateTimeKind.Utc).AddTicks(5273),
                            Email = "Cortney.Bergstrom15@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Cortney",
                            LastName = "Bergstrom",
                            LockoutEnabled = false,
                            NormalizedEmail = "CORTNEY.BERGSTROM15@YAHOO.COM",
                            NormalizedUserName = "CORTNEY_BERGSTROM26",
                            PasswordHash = "AQAAAAIAAYagAAAAEKL6VLuUSwBH9zQ8YG2NZbyJ+lGe0rP8lTw5FDP1ywz4mzNTI5bhOsjjBE3Rr1sTYg==",
                            PhoneNumber = "467-196-6702",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/447.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Cortney_Bergstrom26"
                        },
                        new
                        {
                            Id = 4,
                            AccessFailedCount = 0,
                            Address = "8374 Ondricka Junctions, North Owenmouth, Lesotho",
                            ConcurrencyStamp = "04e1d9ba-793c-447f-8dd2-bc4b28223f15",
                            CreatedAt = new DateTime(2024, 11, 8, 23, 24, 8, 118, DateTimeKind.Utc).AddTicks(5535),
                            Email = "Marshall.Rath@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Marshall",
                            LastName = "Rath",
                            LockoutEnabled = false,
                            NormalizedEmail = "MARSHALL.RATH@HOTMAIL.COM",
                            NormalizedUserName = "MARSHALL_RATH",
                            PasswordHash = "AQAAAAIAAYagAAAAEMEhgytQbzLQAyiRQamSsG4dtR53kNfAb5j69senBtozmnV6ZrZtw2XDTNXmLOXSpQ==",
                            PhoneNumber = "985-319-7221",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/589.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Marshall_Rath"
                        },
                        new
                        {
                            Id = 5,
                            AccessFailedCount = 0,
                            Address = "901 Gaston Path, Lockmanfurt, Solomon Islands",
                            ConcurrencyStamp = "f25bf3a8-96bd-4e9c-978a-917c6967605e",
                            CreatedAt = new DateTime(2024, 4, 30, 23, 24, 8, 118, DateTimeKind.Utc).AddTicks(5801),
                            Email = "Jay2@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Jay",
                            LastName = "Pfeffer",
                            LockoutEnabled = false,
                            NormalizedEmail = "JAY2@HOTMAIL.COM",
                            NormalizedUserName = "JAY.PFEFFER",
                            PasswordHash = "AQAAAAIAAYagAAAAEHHQExk3LEyig2r56qfR9LEG3xls6kz7HSMZpS4TrnybNaL0k0pGryMWwJ5MWk1bDw==",
                            PhoneNumber = "205-389-3169",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/931.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Jay.Pfeffer"
                        },
                        new
                        {
                            Id = 6,
                            AccessFailedCount = 0,
                            Address = "062 Alexzander Knoll, Rhiannonbury, Saudi Arabia",
                            ConcurrencyStamp = "43862110-ec86-4bca-af21-3bc6657d388a",
                            CreatedAt = new DateTime(2024, 8, 24, 23, 24, 8, 118, DateTimeKind.Utc).AddTicks(6023),
                            Email = "Mckenna.Kuhic58@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Mckenna",
                            LastName = "Kuhic",
                            LockoutEnabled = false,
                            NormalizedEmail = "MCKENNA.KUHIC58@YAHOO.COM",
                            NormalizedUserName = "MCKENNA_KUHIC",
                            PasswordHash = "AQAAAAIAAYagAAAAEBMXhjMnxp+hyqlyHPat6jgE6dPYLa39G+1TBFNTkPgSWyg8TlW4qNRLvF2baMXHUw==",
                            PhoneNumber = "469-798-4568",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/128.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Mckenna_Kuhic"
                        },
                        new
                        {
                            Id = 7,
                            AccessFailedCount = 0,
                            Address = "4268 Daniel Bypass, South Eileenport, Saudi Arabia",
                            ConcurrencyStamp = "8ff6b49b-107e-46f7-b7c7-83a5571f52ff",
                            CreatedAt = new DateTime(2024, 12, 26, 23, 24, 8, 118, DateTimeKind.Utc).AddTicks(6843),
                            Email = "Elna97@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Elna",
                            LastName = "Herman",
                            LockoutEnabled = false,
                            NormalizedEmail = "ELNA97@GMAIL.COM",
                            NormalizedUserName = "ELNA_HERMAN",
                            PasswordHash = "AQAAAAIAAYagAAAAEN0cW73P75mJt3XgyXeQuZBgtiSy/zspSfwA/VQrT2IgsC+7No9B1iZkgd6SLD1n5A==",
                            PhoneNumber = "217-170-8618",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/543.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Elna_Herman"
                        },
                        new
                        {
                            Id = 8,
                            AccessFailedCount = 0,
                            Address = "477 Elwyn Tunnel, Erdmanview, Wallis and Futuna",
                            ConcurrencyStamp = "d6ce30e3-52c9-44f6-a073-282a1267043f",
                            CreatedAt = new DateTime(2025, 1, 9, 23, 24, 8, 118, DateTimeKind.Utc).AddTicks(9750),
                            Email = "Magnus.Wiza@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Magnus",
                            LastName = "Wiza",
                            LockoutEnabled = false,
                            NormalizedEmail = "MAGNUS.WIZA@HOTMAIL.COM",
                            NormalizedUserName = "MAGNUS.WIZA",
                            PasswordHash = "AQAAAAIAAYagAAAAEHSfb6KJRHunvC9PZt2B/1bxLlI3iIvfuBWqY9aFhLa1pp4z5enqCO9RUnhv3mK8ug==",
                            PhoneNumber = "236-253-7246",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/1050.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Magnus.Wiza"
                        },
                        new
                        {
                            Id = 9,
                            AccessFailedCount = 0,
                            Address = "74639 Hansen Tunnel, Olsonmouth, Indonesia",
                            ConcurrencyStamp = "85ab85d4-5e22-4954-bb89-06f94233f088",
                            CreatedAt = new DateTime(2024, 11, 18, 23, 24, 8, 119, DateTimeKind.Utc).AddTicks(369),
                            Email = "Jonatan89@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Jonatan",
                            LastName = "Flatley",
                            LockoutEnabled = false,
                            NormalizedEmail = "JONATAN89@YAHOO.COM",
                            NormalizedUserName = "JONATAN61",
                            PasswordHash = "AQAAAAIAAYagAAAAEK7iHNfOOM0/qh6x5pJDYY0TysY11GSMV6hCWcbuO6yxed9XImp9v5hLEjCn5JetrA==",
                            PhoneNumber = "339-955-2900",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/265.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Jonatan61"
                        },
                        new
                        {
                            Id = 10,
                            AccessFailedCount = 0,
                            Address = "062 Little Mount, Lueilwitzmouth, Fiji",
                            ConcurrencyStamp = "248f7f93-c8b2-43fe-b1c2-612fe1f0a2cd",
                            CreatedAt = new DateTime(2024, 9, 27, 23, 24, 8, 119, DateTimeKind.Utc).AddTicks(675),
                            Email = "Mohammad.McGlynn78@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Mohammad",
                            LastName = "McGlynn",
                            LockoutEnabled = false,
                            NormalizedEmail = "MOHAMMAD.MCGLYNN78@HOTMAIL.COM",
                            NormalizedUserName = "MOHAMMAD60",
                            PasswordHash = "AQAAAAIAAYagAAAAENMsWRjQX+vWTKExnphqx5D/8s2p7jh4sT/7pRl29bH5/Vy6Feylif1sVmu1+9em4w==",
                            PhoneNumber = "357-688-9704",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/1072.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Mohammad60"
                        },
                        new
                        {
                            Id = 11,
                            AccessFailedCount = 0,
                            Address = "6747 Sylvan Mill, Grahammouth, Algeria",
                            ConcurrencyStamp = "f7212f76-3246-4b8e-a70f-bb343495970a",
                            CreatedAt = new DateTime(2024, 12, 5, 23, 24, 8, 119, DateTimeKind.Utc).AddTicks(1025),
                            Email = "Lillie.Hyatt@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Lillie",
                            LastName = "Hyatt",
                            LockoutEnabled = false,
                            NormalizedEmail = "LILLIE.HYATT@YAHOO.COM",
                            NormalizedUserName = "LILLIE12",
                            PasswordHash = "AQAAAAIAAYagAAAAEPpFXN0Lpn+dzJTE1RoVlWDoPMr6e6R+TWjuOknsDCkrNiBBFuNlNeq97Lf1bKqnNQ==",
                            PhoneNumber = "934-386-8248",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/1228.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Lillie12"
                        },
                        new
                        {
                            Id = 12,
                            AccessFailedCount = 0,
                            Address = "88079 Lempi Route, Anjalishire, Madagascar",
                            ConcurrencyStamp = "e73cb373-b7f0-4bf8-9e1f-71a5fd8d4ca3",
                            CreatedAt = new DateTime(2024, 11, 16, 23, 24, 8, 119, DateTimeKind.Utc).AddTicks(1432),
                            Email = "David_Thiel@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "David",
                            LastName = "Thiel",
                            LockoutEnabled = false,
                            NormalizedEmail = "DAVID_THIEL@HOTMAIL.COM",
                            NormalizedUserName = "DAVID_THIEL",
                            PasswordHash = "AQAAAAIAAYagAAAAEB10rA+ryXBPYfNVrVBTPw2EHoY/y3JgTJzaArTw0CZ/aioupUu1CNzNV9+u4Ysa9Q==",
                            PhoneNumber = "097-672-5355",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/1135.jpg",
                            TwoFactorEnabled = false,
                            UserName = "David_Thiel"
                        },
                        new
                        {
                            Id = 13,
                            AccessFailedCount = 0,
                            Address = "49423 Kris Throughway, Larkinshire, Thailand",
                            ConcurrencyStamp = "3fa7e41b-4e50-4529-9f65-999302254d3a",
                            CreatedAt = new DateTime(2024, 5, 10, 23, 24, 8, 119, DateTimeKind.Utc).AddTicks(8752),
                            Email = "Jace5@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Jace",
                            LastName = "O'Kon",
                            LockoutEnabled = false,
                            NormalizedEmail = "JACE5@HOTMAIL.COM",
                            NormalizedUserName = "JACE.OKON",
                            PasswordHash = "AQAAAAIAAYagAAAAEP4k2uBzFs2QapoGN9hcekX/Q9D06kiZOEn0H4dnbFZGXetz10N4DmnNErZFdNMM5A==",
                            PhoneNumber = "296-104-9454",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/1063.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Jace.OKon"
                        },
                        new
                        {
                            Id = 14,
                            AccessFailedCount = 0,
                            Address = "7550 Luettgen Isle, South Ismaelbury, Democratic People's Republic of Korea",
                            ConcurrencyStamp = "223cdd70-fa38-4835-986b-780ef5f19a06",
                            CreatedAt = new DateTime(2024, 3, 27, 23, 24, 8, 119, DateTimeKind.Utc).AddTicks(9251),
                            Email = "Marcus_McCullough9@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Marcus",
                            LastName = "McCullough",
                            LockoutEnabled = false,
                            NormalizedEmail = "MARCUS_MCCULLOUGH9@GMAIL.COM",
                            NormalizedUserName = "MARCUS_MCCULLOUGH",
                            PasswordHash = "AQAAAAIAAYagAAAAENVndRly6q9Rn7pqi1DWk62KvwK5vx4+9cuZZjwCFaVlSnJxxT618oWrRuyT0ACEmQ==",
                            PhoneNumber = "647-080-1331",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/1234.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Marcus_McCullough"
                        },
                        new
                        {
                            Id = 15,
                            AccessFailedCount = 0,
                            Address = "383 Israel Wall, New Floydland, Uruguay",
                            ConcurrencyStamp = "64687071-cbfe-49db-ac5a-85d61d0f14ea",
                            CreatedAt = new DateTime(2024, 7, 21, 23, 24, 8, 119, DateTimeKind.Utc).AddTicks(9703),
                            Email = "Emely_Cartwright87@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Emely",
                            LastName = "Cartwright",
                            LockoutEnabled = false,
                            NormalizedEmail = "EMELY_CARTWRIGHT87@GMAIL.COM",
                            NormalizedUserName = "EMELY0",
                            PasswordHash = "AQAAAAIAAYagAAAAEEkS6i8OlZafXAC994J4LMTU4fZp0ayofIL539tpaxY7I/J16kdEVi7CyWddraDB0w==",
                            PhoneNumber = "163-521-0137",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/1216.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Emely0"
                        },
                        new
                        {
                            Id = 16,
                            AccessFailedCount = 0,
                            Address = "3117 Wintheiser Pine, Brakusview, Madagascar",
                            ConcurrencyStamp = "4ef1280e-ba4a-45ad-9844-2a35bc3e9dc6",
                            CreatedAt = new DateTime(2024, 2, 28, 23, 24, 8, 120, DateTimeKind.Utc).AddTicks(66),
                            Email = "Kenny47@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Kenny",
                            LastName = "Weber",
                            LockoutEnabled = false,
                            NormalizedEmail = "KENNY47@GMAIL.COM",
                            NormalizedUserName = "KENNY73",
                            PasswordHash = "AQAAAAIAAYagAAAAEKbWsIGloGS+tDdI54kFfPApbRPI26oY7KITft5qusCAjTWktAtMPur4gxuFzj3EQg==",
                            PhoneNumber = "950-775-0092",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/343.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Kenny73"
                        },
                        new
                        {
                            Id = 17,
                            AccessFailedCount = 0,
                            Address = "829 Christiansen Roads, South Morris, Slovakia (Slovak Republic)",
                            ConcurrencyStamp = "e7806253-602f-41a1-80be-792028693d74",
                            CreatedAt = new DateTime(2024, 7, 15, 23, 24, 8, 120, DateTimeKind.Utc).AddTicks(521),
                            Email = "Chelsie.Ankunding@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Chelsie",
                            LastName = "Ankunding",
                            LockoutEnabled = false,
                            NormalizedEmail = "CHELSIE.ANKUNDING@YAHOO.COM",
                            NormalizedUserName = "CHELSIE_ANKUNDING43",
                            PasswordHash = "AQAAAAIAAYagAAAAEDTkbl4gmvp3vQ77rdmjygjcAqs9nMcZojry172IMFr58qayCLbfiyYkcUxBxucugg==",
                            PhoneNumber = "073-465-9158",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/109.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Chelsie_Ankunding43"
                        },
                        new
                        {
                            Id = 18,
                            AccessFailedCount = 0,
                            Address = "5435 Weber Fork, South Kaitlin, Pakistan",
                            ConcurrencyStamp = "67d6ef53-9a4d-42fb-a510-2a6123450430",
                            CreatedAt = new DateTime(2024, 8, 8, 23, 24, 8, 120, DateTimeKind.Utc).AddTicks(945),
                            Email = "Lamont97@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Lamont",
                            LastName = "Rosenbaum",
                            LockoutEnabled = false,
                            NormalizedEmail = "LAMONT97@YAHOO.COM",
                            NormalizedUserName = "LAMONT5",
                            PasswordHash = "AQAAAAIAAYagAAAAEIM9XXgAbOoPsA7GuI4CWUgJQQuiFd3OO7vW9OQUMoztBPAsAWxpwtQLCtcQoHk2ag==",
                            PhoneNumber = "709-978-4774",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/349.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Lamont5"
                        },
                        new
                        {
                            Id = 19,
                            AccessFailedCount = 0,
                            Address = "1323 Gutkowski Summit, New Zettaton, Mozambique",
                            ConcurrencyStamp = "e876d279-b6d5-4c8a-a560-de26a06af955",
                            CreatedAt = new DateTime(2025, 1, 2, 23, 24, 8, 120, DateTimeKind.Utc).AddTicks(1420),
                            Email = "Carole20@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Carole",
                            LastName = "Schiller",
                            LockoutEnabled = false,
                            NormalizedEmail = "CAROLE20@HOTMAIL.COM",
                            NormalizedUserName = "CAROLE_SCHILLER85",
                            PasswordHash = "AQAAAAIAAYagAAAAEHuVZSuLXggDOs/oCzTvbuTJ3UB25M8mW2OU6vlXj1pj4HbMydDrJvfxu7W87KhLHA==",
                            PhoneNumber = "210-311-3758",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/864.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Carole_Schiller85"
                        },
                        new
                        {
                            Id = 20,
                            AccessFailedCount = 0,
                            Address = "923 Kellie Highway, North Timothystad, Taiwan",
                            ConcurrencyStamp = "89a34a71-8b58-4621-91f6-1fc4a5e9b750",
                            CreatedAt = new DateTime(2024, 3, 17, 23, 24, 8, 120, DateTimeKind.Utc).AddTicks(1848),
                            Email = "Willy.Doyle@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Willy",
                            LastName = "Doyle",
                            LockoutEnabled = false,
                            NormalizedEmail = "WILLY.DOYLE@HOTMAIL.COM",
                            NormalizedUserName = "WILLY_DOYLE18",
                            PasswordHash = "AQAAAAIAAYagAAAAEDl3+FIaOLm5I2Yqcvi2GvhsMSa19gOMFUf5be6zoZ34oJTUym+cTrVzTp8qrpDSlQ==",
                            PhoneNumber = "752-931-3926",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/822.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Willy_Doyle18"
                        },
                        new
                        {
                            Id = 21,
                            AccessFailedCount = 0,
                            Address = "350 Kutch Courts, Isabellebury, Guinea-Bissau",
                            ConcurrencyStamp = "98d17aa0-6b14-4a50-ab18-c75b6c44aafe",
                            CreatedAt = new DateTime(2024, 9, 28, 23, 24, 8, 120, DateTimeKind.Utc).AddTicks(2227),
                            Email = "Aiden.Wintheiser@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Aiden",
                            LastName = "Wintheiser",
                            LockoutEnabled = false,
                            NormalizedEmail = "AIDEN.WINTHEISER@GMAIL.COM",
                            NormalizedUserName = "AIDEN_WINTHEISER20",
                            PasswordHash = "AQAAAAIAAYagAAAAEKvHojxRsbuGnrefA08Svgyf8zdD3w9jLEI3urUWU9JkWYfj8hppFXZToDV5a22LyQ==",
                            PhoneNumber = "351-030-0840",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/603.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Aiden_Wintheiser20"
                        },
                        new
                        {
                            Id = 22,
                            AccessFailedCount = 0,
                            Address = "43285 Kiehn Tunnel, DuBuquechester, Sudan",
                            ConcurrencyStamp = "46f8224b-a4bd-4149-a88a-259d952b036c",
                            CreatedAt = new DateTime(2025, 1, 16, 23, 24, 8, 120, DateTimeKind.Utc).AddTicks(2662),
                            Email = "Beverly_Morissette77@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Beverly",
                            LastName = "Morissette",
                            LockoutEnabled = false,
                            NormalizedEmail = "BEVERLY_MORISSETTE77@YAHOO.COM",
                            NormalizedUserName = "BEVERLY.MORISSETTE",
                            PasswordHash = "AQAAAAIAAYagAAAAENzN5vB3ce2tEuWr3FwbUb9IF0pWrBzfoKcg8bQRcchY+umAHacgSnuG7StBCZRstw==",
                            PhoneNumber = "001-206-4016",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/1133.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Beverly.Morissette"
                        },
                        new
                        {
                            Id = 23,
                            AccessFailedCount = 0,
                            Address = "563 Cummerata Junction, Noemiehaven, Mexico",
                            ConcurrencyStamp = "98d0aa1f-26f0-4986-9ee1-5091284910e0",
                            CreatedAt = new DateTime(2024, 2, 9, 23, 24, 8, 120, DateTimeKind.Utc).AddTicks(3092),
                            Email = "Margarette77@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Margarette",
                            LastName = "Greenholt",
                            LockoutEnabled = false,
                            NormalizedEmail = "MARGARETTE77@GMAIL.COM",
                            NormalizedUserName = "MARGARETTE96",
                            PasswordHash = "AQAAAAIAAYagAAAAEDgUrgvTULWFmabpKd51jk7V7q5e0v2nUUAW1vh1FmuZ937NgAvMLTi+D6BkMQ2YkA==",
                            PhoneNumber = "042-147-5231",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/140.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Margarette96"
                        },
                        new
                        {
                            Id = 24,
                            AccessFailedCount = 0,
                            Address = "20431 Leannon Crossing, Port Augustafurt, Argentina",
                            ConcurrencyStamp = "8808fa1b-597d-459f-89cd-7d89d38af7a4",
                            CreatedAt = new DateTime(2024, 10, 29, 23, 24, 8, 120, DateTimeKind.Utc).AddTicks(3468),
                            Email = "Randy59@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Randy",
                            LastName = "Kuphal",
                            LockoutEnabled = false,
                            NormalizedEmail = "RANDY59@HOTMAIL.COM",
                            NormalizedUserName = "RANDY.KUPHAL48",
                            PasswordHash = "AQAAAAIAAYagAAAAEOXTUhm5N3PSWK0bmjb4bktbgVpYaqCRX2prziRy7DGqNgt5uKY0w8S+TYBtlPUstQ==",
                            PhoneNumber = "577-838-1926",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/930.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Randy.Kuphal48"
                        },
                        new
                        {
                            Id = 25,
                            AccessFailedCount = 0,
                            Address = "45586 O'Keefe Manors, South Lisaland, Virgin Islands, British",
                            ConcurrencyStamp = "28ce02dd-ae19-425e-9a0a-426921750b0a",
                            CreatedAt = new DateTime(2024, 11, 14, 23, 24, 8, 120, DateTimeKind.Utc).AddTicks(3781),
                            Email = "Amaya.Runte@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Amaya",
                            LastName = "Runte",
                            LockoutEnabled = false,
                            NormalizedEmail = "AMAYA.RUNTE@GMAIL.COM",
                            NormalizedUserName = "AMAYA.RUNTE",
                            PasswordHash = "AQAAAAIAAYagAAAAEPKSLQT6MqPx5nU/pvYndFLk6Od2uRRsO2Euj59q4cJGfSUXNoSEy98IqrmGaB4NzQ==",
                            PhoneNumber = "221-771-1917",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/261.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Amaya.Runte"
                        },
                        new
                        {
                            Id = 26,
                            AccessFailedCount = 0,
                            Address = "094 Fay Shoal, Durwardberg, Pitcairn Islands",
                            ConcurrencyStamp = "4c408af1-2176-4dec-9593-71dd8de465d1",
                            CreatedAt = new DateTime(2024, 11, 17, 23, 24, 8, 120, DateTimeKind.Utc).AddTicks(4123),
                            Email = "Dennis61@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Dennis",
                            LastName = "Greenfelder",
                            LockoutEnabled = false,
                            NormalizedEmail = "DENNIS61@YAHOO.COM",
                            NormalizedUserName = "DENNIS_GREENFELDER27",
                            PasswordHash = "AQAAAAIAAYagAAAAEP47buGBxzrlRxqwEofvWbeJRAWsGJNnE8Sz6NU4iXDw6EJabEdqXLWCnCpI+fyXDw==",
                            PhoneNumber = "862-781-2098",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/738.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Dennis_Greenfelder27"
                        },
                        new
                        {
                            Id = 27,
                            AccessFailedCount = 0,
                            Address = "0265 Daniel Isle, West Damonshire, Kiribati",
                            ConcurrencyStamp = "94d48ed3-f269-46b8-8915-384cef6be6cc",
                            CreatedAt = new DateTime(2024, 7, 10, 23, 24, 8, 120, DateTimeKind.Utc).AddTicks(4453),
                            Email = "Benton.Turner@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Benton",
                            LastName = "Turner",
                            LockoutEnabled = false,
                            NormalizedEmail = "BENTON.TURNER@YAHOO.COM",
                            NormalizedUserName = "BENTON.TURNER",
                            PasswordHash = "AQAAAAIAAYagAAAAEOcFtg/9Lj4zsL9M3EFdyDf1lbTx3pulGNMChrJrYCilAiBHiF3zgzmx7uaJNgHjTQ==",
                            PhoneNumber = "027-453-4152",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/185.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Benton.Turner"
                        },
                        new
                        {
                            Id = 28,
                            AccessFailedCount = 0,
                            Address = "431 Wiza Freeway, North Rosellatown, Senegal",
                            ConcurrencyStamp = "aecb2f74-0de3-4c8e-b8cc-e41e7ee5ea1a",
                            CreatedAt = new DateTime(2024, 9, 20, 23, 24, 8, 120, DateTimeKind.Utc).AddTicks(5450),
                            Email = "Haskell_Lockman@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Haskell",
                            LastName = "Lockman",
                            LockoutEnabled = false,
                            NormalizedEmail = "HASKELL_LOCKMAN@GMAIL.COM",
                            NormalizedUserName = "HASKELL89",
                            PasswordHash = "AQAAAAIAAYagAAAAEEdgOKwg6a2HbWKxox1qAsxXpN4pGaIIkMBy/TE7xEvq3KP+y6DB2vVx72Nl6gh9wA==",
                            PhoneNumber = "881-925-9800",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/758.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Haskell89"
                        },
                        new
                        {
                            Id = 29,
                            AccessFailedCount = 0,
                            Address = "2578 Orn Meadows, Zoeymouth, Cape Verde",
                            ConcurrencyStamp = "d5043252-cc69-4a7b-a3a9-e01bb25a0a23",
                            CreatedAt = new DateTime(2024, 2, 29, 23, 24, 8, 120, DateTimeKind.Utc).AddTicks(5922),
                            Email = "Lennie_Klocko1@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Lennie",
                            LastName = "Klocko",
                            LockoutEnabled = false,
                            NormalizedEmail = "LENNIE_KLOCKO1@YAHOO.COM",
                            NormalizedUserName = "LENNIE53",
                            PasswordHash = "AQAAAAIAAYagAAAAEIHT4TnQg9oDllrOPmSP2gM3ljPYXVzES2e3mBLJZ1eHWoRtbcaGmLKy2eFzLXjE+Q==",
                            PhoneNumber = "821-457-9624",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/901.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Lennie53"
                        },
                        new
                        {
                            Id = 30,
                            AccessFailedCount = 0,
                            Address = "534 Stark Haven, North Brycentown, Indonesia",
                            ConcurrencyStamp = "2deb1c7e-c7cc-4530-91ab-462d17c72120",
                            CreatedAt = new DateTime(2024, 6, 24, 23, 24, 8, 120, DateTimeKind.Utc).AddTicks(6234),
                            Email = "Nyasia.Kreiger17@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Nyasia",
                            LastName = "Kreiger",
                            LockoutEnabled = false,
                            NormalizedEmail = "NYASIA.KREIGER17@HOTMAIL.COM",
                            NormalizedUserName = "NYASIA.KREIGER",
                            PasswordHash = "AQAAAAIAAYagAAAAEDYpPDxGudWj5ZNChgg3TfUj+m1Pa4IeBwx53dKMXAwR72msWnvjX9afHXbwbJsSmQ==",
                            PhoneNumber = "489-476-7332",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/47.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Nyasia.Kreiger"
                        },
                        new
                        {
                            Id = 31,
                            AccessFailedCount = 0,
                            Address = "771 Stoltenberg Road, Labadieberg, Lao People's Democratic Republic",
                            ConcurrencyStamp = "96f1d325-9fb1-4a4b-a704-80f2f1d8dc0a",
                            CreatedAt = new DateTime(2024, 3, 3, 23, 24, 8, 120, DateTimeKind.Utc).AddTicks(6563),
                            Email = "Jermey_Parisian@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Jermey",
                            LastName = "Parisian",
                            LockoutEnabled = false,
                            NormalizedEmail = "JERMEY_PARISIAN@YAHOO.COM",
                            NormalizedUserName = "JERMEY18",
                            PasswordHash = "AQAAAAIAAYagAAAAEFZ818OdrZFzRvHFL6wNB2LeI54GWZzPZQPOgfKaBtblbEBymXeCL4eJ6YI++euOZw==",
                            PhoneNumber = "113-067-7732",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/856.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Jermey18"
                        },
                        new
                        {
                            Id = 32,
                            AccessFailedCount = 0,
                            Address = "7433 Dach Terrace, Port Marquisland, Greenland",
                            ConcurrencyStamp = "3cbbc18c-f507-482c-be54-cced2c2b2e73",
                            CreatedAt = new DateTime(2025, 1, 10, 23, 24, 8, 120, DateTimeKind.Utc).AddTicks(6845),
                            Email = "Alize_Stanton61@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Alize",
                            LastName = "Stanton",
                            LockoutEnabled = false,
                            NormalizedEmail = "ALIZE_STANTON61@YAHOO.COM",
                            NormalizedUserName = "ALIZE.STANTON52",
                            PasswordHash = "AQAAAAIAAYagAAAAEO7dILzFlVTVHMEvx1vvYWnu5ideJt0D73uVu/v4a3lqiK0uWZGtfLea//t8g7YNGg==",
                            PhoneNumber = "769-178-0082",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/272.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Alize.Stanton52"
                        },
                        new
                        {
                            Id = 33,
                            AccessFailedCount = 0,
                            Address = "5858 Bradtke Common, Websterhaven, Iraq",
                            ConcurrencyStamp = "2887b07e-a035-447e-930a-88f7a50c4a09",
                            CreatedAt = new DateTime(2024, 9, 26, 23, 24, 8, 120, DateTimeKind.Utc).AddTicks(7129),
                            Email = "Justine.Rice96@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Justine",
                            LastName = "Rice",
                            LockoutEnabled = false,
                            NormalizedEmail = "JUSTINE.RICE96@HOTMAIL.COM",
                            NormalizedUserName = "JUSTINE.RICE50",
                            PasswordHash = "AQAAAAIAAYagAAAAEIRj/u57tNjCluHv2BRaSwEra/GLLP4B6NwEAM9ShmWBiOCIIjpZ6rlC9SQbXMzxYQ==",
                            PhoneNumber = "808-605-6483",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/926.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Justine.Rice50"
                        },
                        new
                        {
                            Id = 34,
                            AccessFailedCount = 0,
                            Address = "427 Maddison Forks, Whiteborough, Wallis and Futuna",
                            ConcurrencyStamp = "9e93f030-362a-4636-a074-0daaf2d28b7d",
                            CreatedAt = new DateTime(2024, 3, 9, 23, 24, 8, 120, DateTimeKind.Utc).AddTicks(7403),
                            Email = "Kian.Torp19@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Kian",
                            LastName = "Torp",
                            LockoutEnabled = false,
                            NormalizedEmail = "KIAN.TORP19@GMAIL.COM",
                            NormalizedUserName = "KIAN_TORP",
                            PasswordHash = "AQAAAAIAAYagAAAAEEjVr5Uegg/U8O8bOAIl42uFin+hIAFMTY1L/3Kj+fu7Pt3eiuFwoZLscqyYayi3bg==",
                            PhoneNumber = "797-387-7742",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/905.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Kian_Torp"
                        },
                        new
                        {
                            Id = 35,
                            AccessFailedCount = 0,
                            Address = "7944 Lamont Plaza, South Nettieside, Mozambique",
                            ConcurrencyStamp = "1b478225-fd12-4f7c-adfa-4daec5c35233",
                            CreatedAt = new DateTime(2025, 1, 13, 23, 24, 8, 120, DateTimeKind.Utc).AddTicks(7719),
                            Email = "Una53@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Una",
                            LastName = "Skiles",
                            LockoutEnabled = false,
                            NormalizedEmail = "UNA53@GMAIL.COM",
                            NormalizedUserName = "UNA.SKILES",
                            PasswordHash = "AQAAAAIAAYagAAAAECMosUbVVTuWw+hGtLdIixBzHUOMRlO1Mf2apJd8aKnNFMGu5jSf0bT/qpC2g+lQqQ==",
                            PhoneNumber = "799-148-3861",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/739.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Una.Skiles"
                        },
                        new
                        {
                            Id = 36,
                            AccessFailedCount = 0,
                            Address = "4434 Fahey Mission, Padbergfurt, Norway",
                            ConcurrencyStamp = "81177012-6709-4c71-86c8-a4b5a2cf42c3",
                            CreatedAt = new DateTime(2024, 9, 4, 23, 24, 8, 120, DateTimeKind.Utc).AddTicks(8008),
                            Email = "Melvina38@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Melvina",
                            LastName = "Jaskolski",
                            LockoutEnabled = false,
                            NormalizedEmail = "MELVINA38@YAHOO.COM",
                            NormalizedUserName = "MELVINA.JASKOLSKI75",
                            PasswordHash = "AQAAAAIAAYagAAAAEMbX08JwEkeLwLsuD89/ErnyJ4X5Bi4YbNdJ8v/OWsZgWjOX2YVly5wCy6T1HRVPcw==",
                            PhoneNumber = "491-550-8077",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/190.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Melvina.Jaskolski75"
                        },
                        new
                        {
                            Id = 37,
                            AccessFailedCount = 0,
                            Address = "188 Arlene Light, South Rainabury, Myanmar",
                            ConcurrencyStamp = "77af0fd8-fe11-4e04-b3cf-93e0b8f605ff",
                            CreatedAt = new DateTime(2025, 1, 15, 23, 24, 8, 120, DateTimeKind.Utc).AddTicks(8320),
                            Email = "Noemie26@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Noemie",
                            LastName = "Kerluke",
                            LockoutEnabled = false,
                            NormalizedEmail = "NOEMIE26@HOTMAIL.COM",
                            NormalizedUserName = "NOEMIE67",
                            PasswordHash = "AQAAAAIAAYagAAAAEOdoiRujV2G5JfUlONGoNSZCHsWWItaEHdPh7PsItMzWQdfSS/R16InjIees+Q0UjQ==",
                            PhoneNumber = "302-388-9913",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/395.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Noemie67"
                        },
                        new
                        {
                            Id = 38,
                            AccessFailedCount = 0,
                            Address = "7405 Lillian Cape, Eulaliamouth, Norfolk Island",
                            ConcurrencyStamp = "82f377ca-4a80-4f9f-bd65-5d951ca3ebd6",
                            CreatedAt = new DateTime(2024, 5, 6, 23, 24, 8, 120, DateTimeKind.Utc).AddTicks(8613),
                            Email = "Toney_Bogisich65@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Toney",
                            LastName = "Bogisich",
                            LockoutEnabled = false,
                            NormalizedEmail = "TONEY_BOGISICH65@YAHOO.COM",
                            NormalizedUserName = "TONEY.BOGISICH22",
                            PasswordHash = "AQAAAAIAAYagAAAAEOvb/sfWu/Md7C6MkfWv07aTEv7HxtYNlIehlnN2VNjRn1tCfh5Is68frBsrxwGJ/g==",
                            PhoneNumber = "395-950-5456",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/396.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Toney.Bogisich22"
                        },
                        new
                        {
                            Id = 39,
                            AccessFailedCount = 0,
                            Address = "42894 Pfeffer Courts, Alexzanderhaven, Switzerland",
                            ConcurrencyStamp = "0f152d6b-29c6-4b29-9ff1-50cdd8a5a17b",
                            CreatedAt = new DateTime(2024, 8, 25, 23, 24, 8, 120, DateTimeKind.Utc).AddTicks(8869),
                            Email = "Neil.Boyer8@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Neil",
                            LastName = "Boyer",
                            LockoutEnabled = false,
                            NormalizedEmail = "NEIL.BOYER8@YAHOO.COM",
                            NormalizedUserName = "NEIL79",
                            PasswordHash = "AQAAAAIAAYagAAAAEDEkVckK0Nm4qIEYmjkDC8RgrzReHB1naYlOWiq0ToluiCtU5bIUy7+4JHfeJAp+iw==",
                            PhoneNumber = "974-419-7413",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/1087.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Neil79"
                        },
                        new
                        {
                            Id = 40,
                            AccessFailedCount = 0,
                            Address = "544 Bogisich Stream, Ricehaven, Morocco",
                            ConcurrencyStamp = "21691769-258f-492a-b28f-6046effcc47e",
                            CreatedAt = new DateTime(2024, 5, 24, 23, 24, 8, 120, DateTimeKind.Utc).AddTicks(9458),
                            Email = "Sherman40@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Sherman",
                            LastName = "Botsford",
                            LockoutEnabled = false,
                            NormalizedEmail = "SHERMAN40@YAHOO.COM",
                            NormalizedUserName = "SHERMAN_BOTSFORD80",
                            PasswordHash = "AQAAAAIAAYagAAAAEHl1KN2y1V7AbVCdlQDNQOKpKxr0M6RCUR0jVBCQiK0Mq9vHVx+Pjyo/vpEGat/Q2A==",
                            PhoneNumber = "509-905-6515",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/278.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Sherman_Botsford80"
                        });
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Variant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Variants");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.VariantValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VariantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VariantId");

                    b.ToTable("VariantValues");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ManboShopAPI.Application.Services.VariantValueImage", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.VariantValue", "VariantValue")
                        .WithMany("VariantValueImages")
                        .HasForeignKey("VariantValueId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("VariantValue");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Address", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.User", "User")
                        .WithMany("Addresses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.BannerDetail", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Banner", "Banner")
                        .WithMany("BannerDetails")
                        .HasForeignKey("BannerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManboShopAPI.Domain.Entities.Product", "Product")
                        .WithMany("BannerDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Banner");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Cart", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("User");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.CartItem", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Cart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManboShopAPI.Domain.Entities.ProductVariantValue", "ProductVariantValue")
                        .WithMany("CartItems")
                        .HasForeignKey("ProductVariantValueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("ProductVariantValue");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Category", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Category", "ParentCategory")
                        .WithMany("SubCategories")
                        .HasForeignKey("ParentCategoryId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.CouponCondition", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Coupon", "Coupon")
                        .WithMany("CouponConditions")
                        .HasForeignKey("CouponId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Coupon");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Favorite", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Product", "Product")
                        .WithMany("Favorites")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManboShopAPI.Domain.Entities.User", "User")
                        .WithMany("Favorites")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Feedback", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Product", "Product")
                        .WithMany("Feedbacks")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManboShopAPI.Domain.Entities.User", "User")
                        .WithMany("Feedbacks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.FeedbackLike", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Feedback", "Feedback")
                        .WithMany("FeedbackLikes")
                        .HasForeignKey("FeedbackId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("ManboShopAPI.Domain.Entities.User", "User")
                        .WithMany("FeedbackLikes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Feedback");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.NewsDetail", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.News", "News")
                        .WithMany("NewsDetails")
                        .HasForeignKey("NewsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManboShopAPI.Domain.Entities.Product", "Product")
                        .WithMany("NewsDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("News");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Order", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Coupon", null)
                        .WithMany("Orders")
                        .HasForeignKey("CouponId");

                    b.HasOne("ManboShopAPI.Domain.Entities.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("User");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.OrderAddress", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Order", "Order")
                        .WithOne("ShippingAddress")
                        .HasForeignKey("ManboShopAPI.Domain.Entities.OrderAddress", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.OrderDetail", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Coupon", null)
                        .WithMany("OrderDetails")
                        .HasForeignKey("CouponId");

                    b.HasOne("ManboShopAPI.Domain.Entities.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManboShopAPI.Domain.Entities.ProductVariantValue", "ProductVariantValue")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductVariantValueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("ProductVariantValue");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Product", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ManboShopAPI.Domain.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Brand");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.ProductAttributeValue", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Attributes", "Attribute")
                        .WithMany("ProductAttributeValues")
                        .HasForeignKey("AttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManboShopAPI.Domain.Entities.Product", "Product")
                        .WithMany("ProductAttributeValues")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attribute");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.ProductImage", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Product", "Product")
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.ProductVariantValue", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Product", "Product")
                        .WithMany("ProductVariantValues")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.VariantValue", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Variant", "Variant")
                        .WithMany("VariantValues")
                        .HasForeignKey("VariantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Variant");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManboShopAPI.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Attributes", b =>
                {
                    b.Navigation("ProductAttributeValues");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Banner", b =>
                {
                    b.Navigation("BannerDetails");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Brand", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Cart", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Category", b =>
                {
                    b.Navigation("Products");

                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Coupon", b =>
                {
                    b.Navigation("CouponConditions");

                    b.Navigation("OrderDetails");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Feedback", b =>
                {
                    b.Navigation("FeedbackLikes");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.News", b =>
                {
                    b.Navigation("NewsDetails");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Order", b =>
                {
                    b.Navigation("OrderDetails");

                    b.Navigation("ShippingAddress")
                        .IsRequired();
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Product", b =>
                {
                    b.Navigation("BannerDetails");

                    b.Navigation("Favorites");

                    b.Navigation("Feedbacks");

                    b.Navigation("NewsDetails");

                    b.Navigation("ProductAttributeValues");

                    b.Navigation("ProductImages");

                    b.Navigation("ProductVariantValues");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.ProductVariantValue", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.User", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Favorites");

                    b.Navigation("FeedbackLikes");

                    b.Navigation("Feedbacks");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Variant", b =>
                {
                    b.Navigation("VariantValues");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.VariantValue", b =>
                {
                    b.Navigation("VariantValueImages");
                });
#pragma warning restore 612, 618
        }
    }
}
