// <auto-generated />
using System;
using ManboShopAPI.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ManboShopAPI.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250102033401_add eav model fro product")]
    partial class addeavmodelfroproduct
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AreaOrColonyOrStreetOrSectorOrVillage")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("BuildingOrCompanyOrApartment")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FlatOrHouse")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PinCode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Attributes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Attributes");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Banner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Banners");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.BannerDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BannerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BannerId");

                    b.HasIndex("ProductId");

                    b.ToTable("BannerDetails");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Brands");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 1, 2, 3, 34, 0, 831, DateTimeKind.Utc).AddTicks(1766),
                            ImageUrl = "https://example.com/images/nike.jpg",
                            Name = "Nike"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 1, 2, 3, 34, 0, 831, DateTimeKind.Utc).AddTicks(2549),
                            ImageUrl = "https://example.com/images/adidas.jpg",
                            Name = "Adidas"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 1, 2, 3, 34, 0, 831, DateTimeKind.Utc).AddTicks(2552),
                            ImageUrl = "https://example.com/images/gucci.jpg",
                            Name = "Gucci"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 1, 2, 3, 34, 0, 831, DateTimeKind.Utc).AddTicks(2553),
                            ImageUrl = "https://example.com/images/louis-vuitton.jpg",
                            Name = "Louis Vuitton"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2025, 1, 2, 3, 34, 0, 831, DateTimeKind.Utc).AddTicks(2554),
                            ImageUrl = "https://example.com/images/zara.jpg",
                            Name = "Zara"
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2025, 1, 2, 3, 34, 0, 831, DateTimeKind.Utc).AddTicks(2563),
                            ImageUrl = "https://example.com/images/h&m.jpg",
                            Name = "H&M"
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2025, 1, 2, 3, 34, 0, 831, DateTimeKind.Utc).AddTicks(2564),
                            ImageUrl = "https://example.com/images/chanel.jpg",
                            Name = "Chanel"
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2025, 1, 2, 3, 34, 0, 831, DateTimeKind.Utc).AddTicks(2565),
                            ImageUrl = "https://example.com/images/prada.jpg",
                            Name = "Prada"
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2025, 1, 2, 3, 34, 0, 831, DateTimeKind.Utc).AddTicks(2566),
                            ImageUrl = "https://example.com/images/versace.jpg",
                            Name = "Versace"
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2025, 1, 2, 3, 34, 0, 831, DateTimeKind.Utc).AddTicks(2573),
                            ImageUrl = "https://example.com/images/burberry.jpg",
                            Name = "Burberry"
                        },
                        new
                        {
                            Id = 11,
                            CreatedAt = new DateTime(2025, 1, 2, 3, 34, 0, 831, DateTimeKind.Utc).AddTicks(2574),
                            ImageUrl = "https://example.com/images/dior.jpg",
                            Name = "Dior"
                        },
                        new
                        {
                            Id = 12,
                            CreatedAt = new DateTime(2025, 1, 2, 3, 34, 0, 831, DateTimeKind.Utc).AddTicks(2576),
                            ImageUrl = "https://example.com/images/calvin-klein.jpg",
                            Name = "Calvin Klein"
                        },
                        new
                        {
                            Id = 13,
                            CreatedAt = new DateTime(2025, 1, 2, 3, 34, 0, 831, DateTimeKind.Utc).AddTicks(2577),
                            ImageUrl = "https://example.com/images/tommy-hilfiger.jpg",
                            Name = "Tommy Hilfiger"
                        },
                        new
                        {
                            Id = 14,
                            CreatedAt = new DateTime(2025, 1, 2, 3, 34, 0, 831, DateTimeKind.Utc).AddTicks(2578),
                            ImageUrl = "https://example.com/images/levis.jpg",
                            Name = "Levi's"
                        },
                        new
                        {
                            Id = 15,
                            CreatedAt = new DateTime(2025, 1, 2, 3, 34, 0, 831, DateTimeKind.Utc).AddTicks(2579),
                            ImageUrl = "https://example.com/images/uniqlo.jpg",
                            Name = "Uniqlo"
                        },
                        new
                        {
                            Id = 16,
                            CreatedAt = new DateTime(2025, 1, 2, 3, 34, 0, 831, DateTimeKind.Utc).AddTicks(2581),
                            ImageUrl = "https://example.com/images/lacoste.jpg",
                            Name = "Lacoste"
                        },
                        new
                        {
                            Id = 17,
                            CreatedAt = new DateTime(2025, 1, 2, 3, 34, 0, 831, DateTimeKind.Utc).AddTicks(2582),
                            ImageUrl = "https://example.com/images/the-north-face.jpg",
                            Name = "The North Face"
                        },
                        new
                        {
                            Id = 18,
                            CreatedAt = new DateTime(2025, 1, 2, 3, 34, 0, 831, DateTimeKind.Utc).AddTicks(2584),
                            ImageUrl = "https://example.com/images/ralph-lauren.jpg",
                            Name = "Ralph Lauren"
                        },
                        new
                        {
                            Id = 19,
                            CreatedAt = new DateTime(2025, 1, 2, 3, 34, 0, 831, DateTimeKind.Utc).AddTicks(2585),
                            ImageUrl = "https://example.com/images/puma.jpg",
                            Name = "Puma"
                        },
                        new
                        {
                            Id = 20,
                            CreatedAt = new DateTime(2025, 1, 2, 3, 34, 0, 831, DateTimeKind.Utc).AddTicks(2586),
                            ImageUrl = "https://example.com/images/hugo-boss.jpg",
                            Name = "Hugo Boss"
                        },
                        new
                        {
                            Id = 21,
                            CreatedAt = new DateTime(2025, 1, 2, 3, 34, 0, 831, DateTimeKind.Utc).AddTicks(2587),
                            ImageUrl = "https://example.com/images/armani.jpg",
                            Name = "Armani"
                        },
                        new
                        {
                            Id = 22,
                            CreatedAt = new DateTime(2025, 1, 2, 3, 34, 0, 831, DateTimeKind.Utc).AddTicks(2589),
                            ImageUrl = "https://example.com/images/balenciaga.jpg",
                            Name = "Balenciaga"
                        },
                        new
                        {
                            Id = 23,
                            CreatedAt = new DateTime(2025, 1, 2, 3, 34, 0, 831, DateTimeKind.Utc).AddTicks(2773),
                            ImageUrl = "https://example.com/images/fendi.jpg",
                            Name = "Fendi"
                        },
                        new
                        {
                            Id = 24,
                            CreatedAt = new DateTime(2025, 1, 2, 3, 34, 0, 831, DateTimeKind.Utc).AddTicks(2776),
                            ImageUrl = "https://example.com/images/givenchy.jpg",
                            Name = "Givenchy"
                        },
                        new
                        {
                            Id = 25,
                            CreatedAt = new DateTime(2025, 1, 2, 3, 34, 0, 831, DateTimeKind.Utc).AddTicks(2777),
                            ImageUrl = "https://example.com/images/hermes.jpg",
                            Name = "Hermès"
                        },
                        new
                        {
                            Id = 26,
                            CreatedAt = new DateTime(2025, 1, 2, 3, 34, 0, 831, DateTimeKind.Utc).AddTicks(2778),
                            ImageUrl = "https://example.com/images/salvatore-ferragamo.jpg",
                            Name = "Salvatore Ferragamo"
                        },
                        new
                        {
                            Id = 27,
                            CreatedAt = new DateTime(2025, 1, 2, 3, 34, 0, 831, DateTimeKind.Utc).AddTicks(2779),
                            ImageUrl = "https://example.com/images/valentino.jpg",
                            Name = "Valentino"
                        },
                        new
                        {
                            Id = 28,
                            CreatedAt = new DateTime(2025, 1, 2, 3, 34, 0, 831, DateTimeKind.Utc).AddTicks(2799),
                            ImageUrl = "https://example.com/images/dolce-gabbana.jpg",
                            Name = "Dolce & Gabbana"
                        },
                        new
                        {
                            Id = 29,
                            CreatedAt = new DateTime(2025, 1, 2, 3, 34, 0, 831, DateTimeKind.Utc).AddTicks(2800),
                            ImageUrl = "https://example.com/images/gap.jpg",
                            Name = "Gap"
                        },
                        new
                        {
                            Id = 30,
                            CreatedAt = new DateTime(2025, 1, 2, 3, 34, 0, 831, DateTimeKind.Utc).AddTicks(2820),
                            ImageUrl = "https://example.com/images/forever21.jpg",
                            Name = "Forever 21"
                        },
                        new
                        {
                            Id = 31,
                            CreatedAt = new DateTime(2025, 1, 2, 3, 34, 0, 831, DateTimeKind.Utc).AddTicks(2822),
                            ImageUrl = "https://example.com/images/new-balance.jpg",
                            Name = "New Balance"
                        },
                        new
                        {
                            Id = 32,
                            CreatedAt = new DateTime(2025, 1, 2, 3, 34, 0, 831, DateTimeKind.Utc).AddTicks(2823),
                            ImageUrl = "https://example.com/images/vans.jpg",
                            Name = "Vans"
                        },
                        new
                        {
                            Id = 33,
                            CreatedAt = new DateTime(2025, 1, 2, 3, 34, 0, 831, DateTimeKind.Utc).AddTicks(2824),
                            ImageUrl = "https://example.com/images/converse.jpg",
                            Name = "Converse"
                        },
                        new
                        {
                            Id = 34,
                            CreatedAt = new DateTime(2025, 1, 2, 3, 34, 0, 831, DateTimeKind.Utc).AddTicks(2829),
                            ImageUrl = "https://example.com/images/under-armour.jpg",
                            Name = "Under Armour"
                        },
                        new
                        {
                            Id = 35,
                            CreatedAt = new DateTime(2025, 1, 2, 3, 34, 0, 831, DateTimeKind.Utc).AddTicks(2831),
                            ImageUrl = "https://example.com/images/reebok.jpg",
                            Name = "Reebok"
                        },
                        new
                        {
                            Id = 36,
                            CreatedAt = new DateTime(2025, 1, 2, 3, 34, 0, 831, DateTimeKind.Utc).AddTicks(2832),
                            ImageUrl = "https://example.com/images/coach.jpg",
                            Name = "Coach"
                        },
                        new
                        {
                            Id = 37,
                            CreatedAt = new DateTime(2025, 1, 2, 3, 34, 0, 831, DateTimeKind.Utc).AddTicks(2833),
                            ImageUrl = "https://example.com/images/kate-spade.jpg",
                            Name = "Kate Spade"
                        },
                        new
                        {
                            Id = 38,
                            CreatedAt = new DateTime(2025, 1, 2, 3, 34, 0, 831, DateTimeKind.Utc).AddTicks(2834),
                            ImageUrl = "https://example.com/images/michael-kors.jpg",
                            Name = "Michael Kors"
                        },
                        new
                        {
                            Id = 39,
                            CreatedAt = new DateTime(2025, 1, 2, 3, 34, 0, 831, DateTimeKind.Utc).AddTicks(2836),
                            ImageUrl = "https://example.com/images/bally.jpg",
                            Name = "Bally"
                        },
                        new
                        {
                            Id = 40,
                            CreatedAt = new DateTime(2025, 1, 2, 3, 34, 0, 831, DateTimeKind.Utc).AddTicks(2837),
                            ImageUrl = "https://example.com/images/guess.jpg",
                            Name = "Guess"
                        });
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.CartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("ProductId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 1, 2, 3, 33, 58, 282, DateTimeKind.Utc).AddTicks(3320),
                            ImageUrl = "https://example.com/images/men-clothing.jpg",
                            Name = "Men's Clothing"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 1, 2, 3, 33, 58, 282, DateTimeKind.Utc).AddTicks(3847),
                            ImageUrl = "https://example.com/images/women-clothing.jpg",
                            Name = "Women's Clothing"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 1, 2, 3, 33, 58, 282, DateTimeKind.Utc).AddTicks(3849),
                            ImageUrl = "https://example.com/images/children-clothing.jpg",
                            Name = "Children's Clothing"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 1, 2, 3, 33, 58, 282, DateTimeKind.Utc).AddTicks(3850),
                            ImageUrl = "https://example.com/images/shoes.jpg",
                            Name = "Shoes"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2025, 1, 2, 3, 33, 58, 282, DateTimeKind.Utc).AddTicks(3851),
                            ImageUrl = "https://example.com/images/bags.jpg",
                            Name = "Bags"
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2025, 1, 2, 3, 33, 58, 282, DateTimeKind.Utc).AddTicks(3856),
                            ImageUrl = "https://example.com/images/accessories.jpg",
                            Name = "Accessories"
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2025, 1, 2, 3, 33, 58, 282, DateTimeKind.Utc).AddTicks(3857),
                            ImageUrl = "https://example.com/images/watches.jpg",
                            Name = "Watches"
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2025, 1, 2, 3, 33, 58, 282, DateTimeKind.Utc).AddTicks(3858),
                            ImageUrl = "https://example.com/images/sportswear.jpg",
                            Name = "Sportswear"
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2025, 1, 2, 3, 33, 58, 282, DateTimeKind.Utc).AddTicks(3859),
                            ImageUrl = "https://example.com/images/swimwear.jpg",
                            Name = "Swimwear"
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2025, 1, 2, 3, 33, 58, 282, DateTimeKind.Utc).AddTicks(3861),
                            ImageUrl = "https://example.com/images/formal-wear.jpg",
                            Name = "Formal Wear"
                        },
                        new
                        {
                            Id = 11,
                            CreatedAt = new DateTime(2025, 1, 2, 3, 33, 58, 282, DateTimeKind.Utc).AddTicks(3862),
                            ImageUrl = "https://example.com/images/casual-wear.jpg",
                            Name = "Casual Wear"
                        },
                        new
                        {
                            Id = 12,
                            CreatedAt = new DateTime(2025, 1, 2, 3, 33, 58, 282, DateTimeKind.Utc).AddTicks(3863),
                            ImageUrl = "https://example.com/images/t-shirts.jpg",
                            Name = "T-Shirts"
                        },
                        new
                        {
                            Id = 13,
                            CreatedAt = new DateTime(2025, 1, 2, 3, 33, 58, 282, DateTimeKind.Utc).AddTicks(3865),
                            ImageUrl = "https://example.com/images/jeans.jpg",
                            Name = "Jeans"
                        },
                        new
                        {
                            Id = 14,
                            CreatedAt = new DateTime(2025, 1, 2, 3, 33, 58, 282, DateTimeKind.Utc).AddTicks(3866),
                            ImageUrl = "https://example.com/images/jackets-coats.jpg",
                            Name = "Jackets & Coats"
                        },
                        new
                        {
                            Id = 15,
                            CreatedAt = new DateTime(2025, 1, 2, 3, 33, 58, 282, DateTimeKind.Utc).AddTicks(3867),
                            ImageUrl = "https://example.com/images/hats-caps.jpg",
                            Name = "Hats & Caps"
                        },
                        new
                        {
                            Id = 16,
                            CreatedAt = new DateTime(2025, 1, 2, 3, 33, 58, 282, DateTimeKind.Utc).AddTicks(3868),
                            ImageUrl = "https://example.com/images/scarves.jpg",
                            Name = "Scarves"
                        },
                        new
                        {
                            Id = 17,
                            CreatedAt = new DateTime(2025, 1, 2, 3, 33, 58, 282, DateTimeKind.Utc).AddTicks(3869),
                            ImageUrl = "https://example.com/images/sunglasses.jpg",
                            Name = "Sunglasses"
                        },
                        new
                        {
                            Id = 18,
                            CreatedAt = new DateTime(2025, 1, 2, 3, 33, 58, 282, DateTimeKind.Utc).AddTicks(3871),
                            ImageUrl = "https://example.com/images/belts.jpg",
                            Name = "Belts"
                        },
                        new
                        {
                            Id = 19,
                            CreatedAt = new DateTime(2025, 1, 2, 3, 33, 58, 282, DateTimeKind.Utc).AddTicks(3872),
                            ImageUrl = "https://example.com/images/undergarments.jpg",
                            Name = "Undergarments"
                        },
                        new
                        {
                            Id = 20,
                            CreatedAt = new DateTime(2025, 1, 2, 3, 33, 58, 282, DateTimeKind.Utc).AddTicks(3873),
                            ImageUrl = "https://example.com/images/sports-shoes.jpg",
                            Name = "Sports Shoes"
                        },
                        new
                        {
                            Id = 21,
                            CreatedAt = new DateTime(2025, 1, 2, 3, 33, 58, 282, DateTimeKind.Utc).AddTicks(3874),
                            ImageUrl = "https://example.com/images/boots.jpg",
                            Name = "Boots"
                        },
                        new
                        {
                            Id = 22,
                            CreatedAt = new DateTime(2025, 1, 2, 3, 33, 58, 282, DateTimeKind.Utc).AddTicks(3875),
                            ImageUrl = "https://example.com/images/high-heels.jpg",
                            Name = "High Heels"
                        },
                        new
                        {
                            Id = 23,
                            CreatedAt = new DateTime(2025, 1, 2, 3, 33, 58, 282, DateTimeKind.Utc).AddTicks(3876),
                            ImageUrl = "https://example.com/images/sneakers.jpg",
                            Name = "Sneakers"
                        },
                        new
                        {
                            Id = 24,
                            CreatedAt = new DateTime(2025, 1, 2, 3, 33, 58, 282, DateTimeKind.Utc).AddTicks(3877),
                            ImageUrl = "https://example.com/images/suits.jpg",
                            Name = "Suits"
                        },
                        new
                        {
                            Id = 25,
                            CreatedAt = new DateTime(2025, 1, 2, 3, 33, 58, 282, DateTimeKind.Utc).AddTicks(3878),
                            ImageUrl = "https://example.com/images/dresses.jpg",
                            Name = "Dresses"
                        },
                        new
                        {
                            Id = 26,
                            CreatedAt = new DateTime(2025, 1, 2, 3, 33, 58, 282, DateTimeKind.Utc).AddTicks(3879),
                            ImageUrl = "https://example.com/images/blouses.jpg",
                            Name = "Blouses"
                        },
                        new
                        {
                            Id = 27,
                            CreatedAt = new DateTime(2025, 1, 2, 3, 33, 58, 282, DateTimeKind.Utc).AddTicks(3880),
                            ImageUrl = "https://example.com/images/skirts.jpg",
                            Name = "Skirts"
                        },
                        new
                        {
                            Id = 28,
                            CreatedAt = new DateTime(2025, 1, 2, 3, 33, 58, 282, DateTimeKind.Utc).AddTicks(3881),
                            ImageUrl = "https://example.com/images/shorts.jpg",
                            Name = "Shorts"
                        },
                        new
                        {
                            Id = 29,
                            CreatedAt = new DateTime(2025, 1, 2, 3, 33, 58, 282, DateTimeKind.Utc).AddTicks(3882),
                            ImageUrl = "https://example.com/images/pajamas.jpg",
                            Name = "Pajamas"
                        },
                        new
                        {
                            Id = 30,
                            CreatedAt = new DateTime(2025, 1, 2, 3, 33, 58, 282, DateTimeKind.Utc).AddTicks(3883),
                            ImageUrl = "https://example.com/images/outerwear.jpg",
                            Name = "Outerwear"
                        },
                        new
                        {
                            Id = 31,
                            CreatedAt = new DateTime(2025, 1, 2, 3, 33, 58, 282, DateTimeKind.Utc).AddTicks(3884),
                            ImageUrl = "https://example.com/images/activewear.jpg",
                            Name = "Activewear"
                        },
                        new
                        {
                            Id = 32,
                            CreatedAt = new DateTime(2025, 1, 2, 3, 33, 58, 282, DateTimeKind.Utc).AddTicks(3885),
                            ImageUrl = "https://example.com/images/raincoats.jpg",
                            Name = "Raincoats"
                        },
                        new
                        {
                            Id = 33,
                            CreatedAt = new DateTime(2025, 1, 2, 3, 33, 58, 282, DateTimeKind.Utc).AddTicks(3886),
                            ImageUrl = "https://example.com/images/cardigans.jpg",
                            Name = "Cardigans"
                        },
                        new
                        {
                            Id = 34,
                            CreatedAt = new DateTime(2025, 1, 2, 3, 33, 58, 282, DateTimeKind.Utc).AddTicks(3888),
                            ImageUrl = "https://example.com/images/sweaters.jpg",
                            Name = "Sweaters"
                        },
                        new
                        {
                            Id = 35,
                            CreatedAt = new DateTime(2025, 1, 2, 3, 33, 58, 282, DateTimeKind.Utc).AddTicks(3889),
                            ImageUrl = "https://example.com/images/leggings.jpg",
                            Name = "Leggings"
                        },
                        new
                        {
                            Id = 36,
                            CreatedAt = new DateTime(2025, 1, 2, 3, 33, 58, 282, DateTimeKind.Utc).AddTicks(3890),
                            ImageUrl = "https://example.com/images/tracksuits.jpg",
                            Name = "Tracksuits"
                        },
                        new
                        {
                            Id = 37,
                            CreatedAt = new DateTime(2025, 1, 2, 3, 33, 58, 282, DateTimeKind.Utc).AddTicks(3891),
                            ImageUrl = "https://example.com/images/gloves.jpg",
                            Name = "Gloves"
                        },
                        new
                        {
                            Id = 38,
                            CreatedAt = new DateTime(2025, 1, 2, 3, 33, 58, 282, DateTimeKind.Utc).AddTicks(3892),
                            ImageUrl = "https://example.com/images/socks.jpg",
                            Name = "Socks"
                        },
                        new
                        {
                            Id = 39,
                            CreatedAt = new DateTime(2025, 1, 2, 3, 33, 58, 282, DateTimeKind.Utc).AddTicks(3893),
                            ImageUrl = "https://example.com/images/loungewear.jpg",
                            Name = "Loungewear"
                        },
                        new
                        {
                            Id = 40,
                            CreatedAt = new DateTime(2025, 1, 2, 3, 33, 58, 282, DateTimeKind.Utc).AddTicks(3895),
                            ImageUrl = "https://example.com/images/winter-wear.jpg",
                            Name = "Winter Wear"
                        });
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Coupon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CurrentUsages")
                        .HasColumnType("int");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("MaxUsages")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Coupons");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.CouponCondition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Attribute")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("CouponId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DiscountAmount")
                        .HasColumnType("int");

                    b.Property<string>("Operator")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Value")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CouponId");

                    b.ToTable("CouponConditions");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Favorite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Favorites");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Star")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.News", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("News");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.NewsDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("NewsId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("NewsId");

                    b.HasIndex("ProductId");

                    b.ToTable("NewsDetails");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CouponId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("SessionId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CouponId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.OrderDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CouponId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CouponId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BrandId")
                        .HasColumnType("int");

                    b.Property<int>("BuyTurn")
                        .HasColumnType("int");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("OldPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("Specification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.ProductAttributeValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AttributeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AttributeId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductAttributeValues");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.ProductImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductImages");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfilePictureUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            Address = "51576 Aurore Union, Elenorville, Jordan",
                            ConcurrencyStamp = "8948b81c-aba5-4d4d-b2f1-9dca07c4e5bd",
                            CreatedAt = new DateTime(2024, 2, 3, 3, 33, 58, 614, DateTimeKind.Utc).AddTicks(7329),
                            Email = "Jerrold_Muller96@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Jerrold",
                            LastName = "Muller",
                            LockoutEnabled = false,
                            NormalizedEmail = "JERROLD_MULLER96@GMAIL.COM",
                            NormalizedUserName = "JERROLD.MULLER",
                            PasswordHash = "AQAAAAIAAYagAAAAECHRE5fR1wOgvrMi3roAZ7L/gQ2lc2G5Rcq9rs2E4inXxL5qfnghk6qB6rpT1Lu3EA==",
                            PhoneNumber = "591-863-8062",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/599.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Jerrold.Muller"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            Address = "621 Kuhic Port, Lake Earl, Taiwan",
                            ConcurrencyStamp = "fdcfbfa8-07b9-42cd-abd7-5a88898ea6eb",
                            CreatedAt = new DateTime(2024, 7, 12, 3, 33, 58, 616, DateTimeKind.Utc).AddTicks(2157),
                            Email = "Presley_Buckridge@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Presley",
                            LastName = "Buckridge",
                            LockoutEnabled = false,
                            NormalizedEmail = "PRESLEY_BUCKRIDGE@YAHOO.COM",
                            NormalizedUserName = "PRESLEY_BUCKRIDGE",
                            PasswordHash = "AQAAAAIAAYagAAAAEIKyqG7IIdgtHsD2M3ln1kV+pRws3EnHmAxcDlIlD++sv1dNLrb1H/EzVxPuPUhuwg==",
                            PhoneNumber = "207-534-4581",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/641.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Presley_Buckridge"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            Address = "800 Ladarius Skyway, Port Jerald, Cameroon",
                            ConcurrencyStamp = "378503ae-c798-42eb-9c40-01bf2012b92f",
                            CreatedAt = new DateTime(2024, 1, 5, 3, 33, 58, 616, DateTimeKind.Utc).AddTicks(2651),
                            Email = "Betty0@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Betty",
                            LastName = "Kerluke",
                            LockoutEnabled = false,
                            NormalizedEmail = "BETTY0@HOTMAIL.COM",
                            NormalizedUserName = "BETTY.KERLUKE3",
                            PasswordHash = "AQAAAAIAAYagAAAAEGYWVRsJV2yhcRlURR1njC3HSDUmgUilMHivuexfWG6GYqOGQvEVDHOfYkbw5bJ64g==",
                            PhoneNumber = "685-234-2400",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/995.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Betty.Kerluke3"
                        },
                        new
                        {
                            Id = 4,
                            AccessFailedCount = 0,
                            Address = "725 Rutherford Center, South Bella, Palau",
                            ConcurrencyStamp = "a64f6b13-df18-4af9-bfc6-325f34d4f6bd",
                            CreatedAt = new DateTime(2024, 2, 24, 3, 33, 58, 616, DateTimeKind.Utc).AddTicks(3070),
                            Email = "Martine41@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Martine",
                            LastName = "Heaney",
                            LockoutEnabled = false,
                            NormalizedEmail = "MARTINE41@HOTMAIL.COM",
                            NormalizedUserName = "MARTINE87",
                            PasswordHash = "AQAAAAIAAYagAAAAEN7sWzS40LqEXeRd5Vo5405UzDj67TX2dXHpFyRdJCbalT+RoyuzckIiAft49TDwrw==",
                            PhoneNumber = "486-965-6641",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/152.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Martine87"
                        },
                        new
                        {
                            Id = 5,
                            AccessFailedCount = 0,
                            Address = "50135 Cruickshank Vista, Doylestad, Svalbard & Jan Mayen Islands",
                            ConcurrencyStamp = "7253e990-5220-40ac-8184-c7f59b6a4ed9",
                            CreatedAt = new DateTime(2024, 11, 14, 3, 33, 58, 616, DateTimeKind.Utc).AddTicks(3383),
                            Email = "Oleta.Wolf@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Oleta",
                            LastName = "Wolf",
                            LockoutEnabled = false,
                            NormalizedEmail = "OLETA.WOLF@HOTMAIL.COM",
                            NormalizedUserName = "OLETA34",
                            PasswordHash = "AQAAAAIAAYagAAAAEJ+mQkpYsW3hMYYPwd3mhj9Iv47JfUcjs4x/XI4VM8yNt1L//tC1G6GNMSCBNPWtmw==",
                            PhoneNumber = "759-641-7574",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/1209.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Oleta34"
                        },
                        new
                        {
                            Id = 6,
                            AccessFailedCount = 0,
                            Address = "622 Louisa Burg, Lake Curt, Cape Verde",
                            ConcurrencyStamp = "bf6eafae-bd34-4cde-a0ed-2fd8759119f5",
                            CreatedAt = new DateTime(2024, 2, 25, 3, 33, 58, 616, DateTimeKind.Utc).AddTicks(3713),
                            Email = "Sherman9@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Sherman",
                            LastName = "Windler",
                            LockoutEnabled = false,
                            NormalizedEmail = "SHERMAN9@GMAIL.COM",
                            NormalizedUserName = "SHERMAN.WINDLER",
                            PasswordHash = "AQAAAAIAAYagAAAAELsFrX0GN9h1gsycQAur11lLmtWk6u3n85VGS/l4S9VVeuT8Uo6vZ3z1xPIyN1naTA==",
                            PhoneNumber = "542-942-6654",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/861.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Sherman.Windler"
                        },
                        new
                        {
                            Id = 7,
                            AccessFailedCount = 0,
                            Address = "330 Daniel Junctions, Hermistonhaven, Saint Barthelemy",
                            ConcurrencyStamp = "2a84fa18-eeef-4dcf-a854-b4f0ef59250f",
                            CreatedAt = new DateTime(2024, 6, 26, 3, 33, 58, 616, DateTimeKind.Utc).AddTicks(4038),
                            Email = "Virgie_Parisian60@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Virgie",
                            LastName = "Parisian",
                            LockoutEnabled = false,
                            NormalizedEmail = "VIRGIE_PARISIAN60@YAHOO.COM",
                            NormalizedUserName = "VIRGIE_PARISIAN8",
                            PasswordHash = "AQAAAAIAAYagAAAAEGXpjoFgKBBi8yOI4XyGqMB+hB1PnGsAD77Gkes6zO1o2rm/UDO7UbBShm7j1z2vjQ==",
                            PhoneNumber = "640-390-4519",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/947.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Virgie_Parisian8"
                        },
                        new
                        {
                            Id = 8,
                            AccessFailedCount = 0,
                            Address = "505 White Terrace, Bridgetton, United States of America",
                            ConcurrencyStamp = "051e8795-8517-4a67-86fd-dc1d0f10b157",
                            CreatedAt = new DateTime(2024, 2, 15, 3, 33, 58, 616, DateTimeKind.Utc).AddTicks(4374),
                            Email = "Alan57@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Alan",
                            LastName = "Walter",
                            LockoutEnabled = false,
                            NormalizedEmail = "ALAN57@GMAIL.COM",
                            NormalizedUserName = "ALAN_WALTER85",
                            PasswordHash = "AQAAAAIAAYagAAAAEIv0yC70VQ5wsHA/t2IGl81WJYMjaVfMS/n4Du7j/8M9AyuVTG6R4ndyvAshFbFFXg==",
                            PhoneNumber = "201-351-4923",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/1114.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Alan_Walter85"
                        },
                        new
                        {
                            Id = 9,
                            AccessFailedCount = 0,
                            Address = "7642 Green Villages, Weimannshire, Guadeloupe",
                            ConcurrencyStamp = "423509b4-18bb-457a-a608-b810a3507d83",
                            CreatedAt = new DateTime(2024, 12, 28, 3, 33, 58, 616, DateTimeKind.Utc).AddTicks(4689),
                            Email = "Patricia_Leuschke73@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Patricia",
                            LastName = "Leuschke",
                            LockoutEnabled = false,
                            NormalizedEmail = "PATRICIA_LEUSCHKE73@HOTMAIL.COM",
                            NormalizedUserName = "PATRICIA.LEUSCHKE16",
                            PasswordHash = "AQAAAAIAAYagAAAAEINwwvNAf4SatCMgLwsiQwArciU+XGF0DQmSfChQhzJU0HWtIRgLh4p9NV6srbJGyw==",
                            PhoneNumber = "276-053-3815",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/983.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Patricia.Leuschke16"
                        },
                        new
                        {
                            Id = 10,
                            AccessFailedCount = 0,
                            Address = "5126 Roberts Pike, Jacobiview, Netherlands",
                            ConcurrencyStamp = "02a73c6a-417e-41ae-aaee-3441548b5eee",
                            CreatedAt = new DateTime(2024, 8, 9, 3, 33, 58, 616, DateTimeKind.Utc).AddTicks(4989),
                            Email = "Keon95@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Keon",
                            LastName = "Boehm",
                            LockoutEnabled = false,
                            NormalizedEmail = "KEON95@YAHOO.COM",
                            NormalizedUserName = "KEON_BOEHM64",
                            PasswordHash = "AQAAAAIAAYagAAAAEBVZxXnWWJWIHjj41ZAXZc9vqSzvBL+vwQofVZqVbS2yaGjt6AXybBcdTf/xXB95Eg==",
                            PhoneNumber = "248-220-5365",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/307.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Keon_Boehm64"
                        },
                        new
                        {
                            Id = 11,
                            AccessFailedCount = 0,
                            Address = "44503 Eldon Prairie, Hellerton, Russian Federation",
                            ConcurrencyStamp = "7b0626dc-666a-42fb-8f77-86d0238a07d8",
                            CreatedAt = new DateTime(2024, 9, 18, 3, 33, 58, 616, DateTimeKind.Utc).AddTicks(5267),
                            Email = "Audrey13@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Audrey",
                            LastName = "Stokes",
                            LockoutEnabled = false,
                            NormalizedEmail = "AUDREY13@HOTMAIL.COM",
                            NormalizedUserName = "AUDREY.STOKES",
                            PasswordHash = "AQAAAAIAAYagAAAAEM1lnd9neZq1AUHJJCdt3Op5JVWXnCuFkgFbleMldPsaXZj6ByK3mMB661LdvRf0PQ==",
                            PhoneNumber = "913-129-7413",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/330.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Audrey.Stokes"
                        },
                        new
                        {
                            Id = 12,
                            AccessFailedCount = 0,
                            Address = "88843 Raynor Pass, Robbmouth, Mongolia",
                            ConcurrencyStamp = "b03f4905-fe36-4fb7-9816-a2fd3e313a14",
                            CreatedAt = new DateTime(2024, 11, 13, 3, 33, 58, 616, DateTimeKind.Utc).AddTicks(5566),
                            Email = "Lisette.Cassin54@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Lisette",
                            LastName = "Cassin",
                            LockoutEnabled = false,
                            NormalizedEmail = "LISETTE.CASSIN54@GMAIL.COM",
                            NormalizedUserName = "LISETTE6",
                            PasswordHash = "AQAAAAIAAYagAAAAENxD3Me/mxXwxcQMlp2dhR++Bvbye4EaO+Zw5dA8w+cKQ0yDw/jyfGAE4dVdHOPIYg==",
                            PhoneNumber = "821-068-3209",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/130.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Lisette6"
                        },
                        new
                        {
                            Id = 13,
                            AccessFailedCount = 0,
                            Address = "40541 Harber Fords, Karleytown, United States of America",
                            ConcurrencyStamp = "6692549a-c631-406a-8c7f-850a21853b6c",
                            CreatedAt = new DateTime(2024, 8, 8, 3, 33, 58, 616, DateTimeKind.Utc).AddTicks(5840),
                            Email = "Gloria12@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Gloria",
                            LastName = "Hoppe",
                            LockoutEnabled = false,
                            NormalizedEmail = "GLORIA12@YAHOO.COM",
                            NormalizedUserName = "GLORIA_HOPPE39",
                            PasswordHash = "AQAAAAIAAYagAAAAEBBxWZqbDhV7rDLstYzSQXXJoI1JoamBYKLC0utz+x1cMLADpennSVbXFHDCtZDmxg==",
                            PhoneNumber = "947-317-2322",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/1220.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Gloria_Hoppe39"
                        },
                        new
                        {
                            Id = 14,
                            AccessFailedCount = 0,
                            Address = "299 Shany Gateway, Port Lisaview, Netherlands",
                            ConcurrencyStamp = "fcebf0d0-2441-4a3f-9c9b-d1e89fc69bac",
                            CreatedAt = new DateTime(2024, 2, 7, 3, 33, 58, 616, DateTimeKind.Utc).AddTicks(6194),
                            Email = "Billie54@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Billie",
                            LastName = "Pfannerstill",
                            LockoutEnabled = false,
                            NormalizedEmail = "BILLIE54@GMAIL.COM",
                            NormalizedUserName = "BILLIE.PFANNERSTILL",
                            PasswordHash = "AQAAAAIAAYagAAAAEAnt7zf7Baqj7Me7eIX9MsUffYnzQt7shmEvztIXC62S1PWAmI60W6DKZgOSttEcGw==",
                            PhoneNumber = "408-256-5624",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/392.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Billie.Pfannerstill"
                        },
                        new
                        {
                            Id = 15,
                            AccessFailedCount = 0,
                            Address = "560 Kendrick Greens, Johnathanburgh, Mali",
                            ConcurrencyStamp = "42f22551-c3e8-49aa-8911-0ac3e091c796",
                            CreatedAt = new DateTime(2024, 5, 21, 3, 33, 58, 616, DateTimeKind.Utc).AddTicks(6462),
                            Email = "Zakary.Mills23@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Zakary",
                            LastName = "Mills",
                            LockoutEnabled = false,
                            NormalizedEmail = "ZAKARY.MILLS23@YAHOO.COM",
                            NormalizedUserName = "ZAKARY_MILLS",
                            PasswordHash = "AQAAAAIAAYagAAAAEGX8HqCmGpoWjtj0pIS5N4VLWuh+DFAbUNZHR+iUaYW8R8XeCuMxRke5hMveba0V7A==",
                            PhoneNumber = "646-312-2087",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/527.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Zakary_Mills"
                        },
                        new
                        {
                            Id = 16,
                            AccessFailedCount = 0,
                            Address = "2035 Ward Camp, Augustusside, Samoa",
                            ConcurrencyStamp = "4e68e4f6-8f2b-42bf-b58f-42e30a4e7a29",
                            CreatedAt = new DateTime(2024, 1, 13, 3, 33, 58, 616, DateTimeKind.Utc).AddTicks(6753),
                            Email = "Lelia79@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Lelia",
                            LastName = "Cormier",
                            LockoutEnabled = false,
                            NormalizedEmail = "LELIA79@YAHOO.COM",
                            NormalizedUserName = "LELIA89",
                            PasswordHash = "AQAAAAIAAYagAAAAEAdTdF/iOVEps/zBcMbWQmKuNvvGwCSOgSoTP1O7ZgBuls76GdoPUw0k84pveRTwjA==",
                            PhoneNumber = "151-912-9299",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/749.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Lelia89"
                        },
                        new
                        {
                            Id = 17,
                            AccessFailedCount = 0,
                            Address = "7520 Hubert Corners, Madelineside, Romania",
                            ConcurrencyStamp = "66584805-bbc6-4871-8731-32e3ba932551",
                            CreatedAt = new DateTime(2024, 11, 14, 3, 33, 58, 616, DateTimeKind.Utc).AddTicks(7001),
                            Email = "Stone.Wiza96@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Stone",
                            LastName = "Wiza",
                            LockoutEnabled = false,
                            NormalizedEmail = "STONE.WIZA96@HOTMAIL.COM",
                            NormalizedUserName = "STONE16",
                            PasswordHash = "AQAAAAIAAYagAAAAEA+qs5uOMAccwU4htyPNWkxfUFQO/Oh7EFC31+RdVz4pMV+d8B3IbakaEQWIdimvxQ==",
                            PhoneNumber = "911-237-8608",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/773.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Stone16"
                        },
                        new
                        {
                            Id = 18,
                            AccessFailedCount = 0,
                            Address = "2080 Laney Harbors, Ludiestad, Yemen",
                            ConcurrencyStamp = "92258fcf-dc61-4752-bec6-32786500d4ab",
                            CreatedAt = new DateTime(2024, 10, 22, 3, 33, 58, 616, DateTimeKind.Utc).AddTicks(7282),
                            Email = "Camren94@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Camren",
                            LastName = "Hickle",
                            LockoutEnabled = false,
                            NormalizedEmail = "CAMREN94@HOTMAIL.COM",
                            NormalizedUserName = "CAMREN25",
                            PasswordHash = "AQAAAAIAAYagAAAAEKWhzsz0GjKg8khN+nKUMsbfPj7OzH/n6kmzsGTbaEkkMJ3hZGER6SiAhUeVYNrMfQ==",
                            PhoneNumber = "246-841-1937",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/846.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Camren25"
                        },
                        new
                        {
                            Id = 19,
                            AccessFailedCount = 0,
                            Address = "36965 Clyde Trail, East Budborough, Chad",
                            ConcurrencyStamp = "e7d7f1ff-95a6-4828-b649-4fd100be37fe",
                            CreatedAt = new DateTime(2024, 5, 17, 3, 33, 58, 616, DateTimeKind.Utc).AddTicks(7566),
                            Email = "Jett.Stiedemann@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Jett",
                            LastName = "Stiedemann",
                            LockoutEnabled = false,
                            NormalizedEmail = "JETT.STIEDEMANN@GMAIL.COM",
                            NormalizedUserName = "JETT63",
                            PasswordHash = "AQAAAAIAAYagAAAAEO0PspX2jFQCEWZZztqaEonlENjrYkyEsaTVKYxkNTs7fGLoBYoQ44LKW/ym1t4SzA==",
                            PhoneNumber = "935-233-7086",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/1146.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Jett63"
                        },
                        new
                        {
                            Id = 20,
                            AccessFailedCount = 0,
                            Address = "5095 Corkery Square, Georgeport, Albania",
                            ConcurrencyStamp = "a50b08ef-e49a-42fe-9555-22b3589228b0",
                            CreatedAt = new DateTime(2024, 12, 23, 3, 33, 58, 616, DateTimeKind.Utc).AddTicks(7873),
                            Email = "Ulises.Gibson95@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Ulises",
                            LastName = "Gibson",
                            LockoutEnabled = false,
                            NormalizedEmail = "ULISES.GIBSON95@GMAIL.COM",
                            NormalizedUserName = "ULISES16",
                            PasswordHash = "AQAAAAIAAYagAAAAEOKiD8G92CmJfRazQw9s+Cx31fORY+FIOaCuSS0HK+kO8fB9kWw2lSkzozCwqRdRfA==",
                            PhoneNumber = "799-845-3293",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/1141.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Ulises16"
                        },
                        new
                        {
                            Id = 21,
                            AccessFailedCount = 0,
                            Address = "05704 Nick Forest, Norrisview, Ethiopia",
                            ConcurrencyStamp = "7f908332-ff9a-40b7-adcd-097af697147b",
                            CreatedAt = new DateTime(2024, 5, 25, 3, 33, 58, 616, DateTimeKind.Utc).AddTicks(8142),
                            Email = "Lucius58@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Lucius",
                            LastName = "Schoen",
                            LockoutEnabled = false,
                            NormalizedEmail = "LUCIUS58@YAHOO.COM",
                            NormalizedUserName = "LUCIUS6",
                            PasswordHash = "AQAAAAIAAYagAAAAEP/PKFMXRI+mDOhHGfD1vH2wx2vUQ1LQyorf6CX9RrzGek6gutbUHZrbX+xjq/eJAw==",
                            PhoneNumber = "970-011-2186",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/734.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Lucius6"
                        },
                        new
                        {
                            Id = 22,
                            AccessFailedCount = 0,
                            Address = "618 Felipe Lock, New Hermantown, Estonia",
                            ConcurrencyStamp = "b236087c-2369-4459-9592-3187fe890454",
                            CreatedAt = new DateTime(2024, 2, 12, 3, 33, 58, 616, DateTimeKind.Utc).AddTicks(8432),
                            Email = "Josue_Morar17@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Josue",
                            LastName = "Morar",
                            LockoutEnabled = false,
                            NormalizedEmail = "JOSUE_MORAR17@YAHOO.COM",
                            NormalizedUserName = "JOSUE48",
                            PasswordHash = "AQAAAAIAAYagAAAAEBk5bN5uPiGyH0VmKXaCZJOe8v+FBQ7Ce/6ZK0mm8UXefyVY4Bb1pJ3ufrXw99byFQ==",
                            PhoneNumber = "671-762-4590",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/374.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Josue48"
                        },
                        new
                        {
                            Id = 23,
                            AccessFailedCount = 0,
                            Address = "24818 Jo Glens, Lake Lloydfort, Papua New Guinea",
                            ConcurrencyStamp = "6c0f3c42-1bf7-41d8-b38c-e9ff385310a2",
                            CreatedAt = new DateTime(2024, 8, 31, 3, 33, 58, 616, DateTimeKind.Utc).AddTicks(8688),
                            Email = "Brad.Conroy@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Brad",
                            LastName = "Conroy",
                            LockoutEnabled = false,
                            NormalizedEmail = "BRAD.CONROY@HOTMAIL.COM",
                            NormalizedUserName = "BRAD.CONROY50",
                            PasswordHash = "AQAAAAIAAYagAAAAEMfzEqn7FmHSrFLmZuDR/P4gG8cnMj0zWSdUpWvNLYZpR+NEN+2VA6J6yU7kF2NDNg==",
                            PhoneNumber = "639-496-0090",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/813.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Brad.Conroy50"
                        },
                        new
                        {
                            Id = 24,
                            AccessFailedCount = 0,
                            Address = "791 Lehner Park, Diannachester, Guernsey",
                            ConcurrencyStamp = "ad593e28-e21c-48f9-bdd7-bc061eb9c690",
                            CreatedAt = new DateTime(2024, 9, 23, 3, 33, 58, 616, DateTimeKind.Utc).AddTicks(8973),
                            Email = "Darrel71@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Darrel",
                            LastName = "Senger",
                            LockoutEnabled = false,
                            NormalizedEmail = "DARREL71@YAHOO.COM",
                            NormalizedUserName = "DARREL.SENGER92",
                            PasswordHash = "AQAAAAIAAYagAAAAEKCqCdJVInQJO9hKXqCEs5eUuyzsFX4l1clLtKoljsaICaqyCdz2xccJvmxVL2gzAQ==",
                            PhoneNumber = "710-228-8251",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/1038.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Darrel.Senger92"
                        },
                        new
                        {
                            Id = 25,
                            AccessFailedCount = 0,
                            Address = "72279 Turner Groves, North Elza, Lithuania",
                            ConcurrencyStamp = "0aeb531c-b048-4e28-833e-cff878ee985c",
                            CreatedAt = new DateTime(2024, 2, 12, 3, 33, 58, 616, DateTimeKind.Utc).AddTicks(9253),
                            Email = "Guido39@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Guido",
                            LastName = "Towne",
                            LockoutEnabled = false,
                            NormalizedEmail = "GUIDO39@YAHOO.COM",
                            NormalizedUserName = "GUIDO.TOWNE23",
                            PasswordHash = "AQAAAAIAAYagAAAAEDZSQjQd1IRSC9/MQlRSurdBerIVOM8LXEQxPPiSe6Q1hLisBe+EOccWtUEAki0K/A==",
                            PhoneNumber = "852-754-3620",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/1169.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Guido.Towne23"
                        },
                        new
                        {
                            Id = 26,
                            AccessFailedCount = 0,
                            Address = "454 Hudson Trafficway, South Clairport, El Salvador",
                            ConcurrencyStamp = "1298409a-fc60-410d-a80a-09edaf93c309",
                            CreatedAt = new DateTime(2024, 7, 7, 3, 33, 58, 616, DateTimeKind.Utc).AddTicks(9594),
                            Email = "Elmore_Streich@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Elmore",
                            LastName = "Streich",
                            LockoutEnabled = false,
                            NormalizedEmail = "ELMORE_STREICH@YAHOO.COM",
                            NormalizedUserName = "ELMORE3",
                            PasswordHash = "AQAAAAIAAYagAAAAEEnrxJ8wfwwWSMJ6l72sbpcEutyorRDsgjFtlVuKGmqehFga17d0kOQ0ncZFcfm//Q==",
                            PhoneNumber = "933-003-3843",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/154.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Elmore3"
                        },
                        new
                        {
                            Id = 27,
                            AccessFailedCount = 0,
                            Address = "68874 Noelia Lights, West Emilio, Jordan",
                            ConcurrencyStamp = "68b79f9a-978c-41c8-a9c7-e421fa9335bc",
                            CreatedAt = new DateTime(2024, 9, 14, 3, 33, 58, 616, DateTimeKind.Utc).AddTicks(9880),
                            Email = "Cydney_Breitenberg52@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Cydney",
                            LastName = "Breitenberg",
                            LockoutEnabled = false,
                            NormalizedEmail = "CYDNEY_BREITENBERG52@YAHOO.COM",
                            NormalizedUserName = "CYDNEY.BREITENBERG",
                            PasswordHash = "AQAAAAIAAYagAAAAEP72sIVaZaSbM4TJjMYmUEf64+lIsm1F89C0f6pWQhOQIiz9wOm6t1kscbap60QFYA==",
                            PhoneNumber = "494-794-2296",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/326.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Cydney.Breitenberg"
                        },
                        new
                        {
                            Id = 28,
                            AccessFailedCount = 0,
                            Address = "676 Ray Turnpike, South Chayafort, British Indian Ocean Territory (Chagos Archipelago)",
                            ConcurrencyStamp = "53b7305c-c7c3-44ff-a564-0b0378560413",
                            CreatedAt = new DateTime(2024, 4, 13, 3, 33, 58, 617, DateTimeKind.Utc).AddTicks(205),
                            Email = "Aileen_Rippin@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Aileen",
                            LastName = "Rippin",
                            LockoutEnabled = false,
                            NormalizedEmail = "AILEEN_RIPPIN@GMAIL.COM",
                            NormalizedUserName = "AILEEN_RIPPIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEPa5Bdg/zhWgvrG4ZfSdQtEeayXogpy1jq3vzi9fNVzVFbve0CNT6G9+PckN7rvM9A==",
                            PhoneNumber = "267-106-6925",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/717.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Aileen_Rippin"
                        },
                        new
                        {
                            Id = 29,
                            AccessFailedCount = 0,
                            Address = "7497 Crist Dale, South Ethelborough, Portugal",
                            ConcurrencyStamp = "dccee221-a779-4e83-a279-7799ae581097",
                            CreatedAt = new DateTime(2024, 11, 1, 3, 33, 58, 617, DateTimeKind.Utc).AddTicks(486),
                            Email = "Alexie.Gulgowski@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Alexie",
                            LastName = "Gulgowski",
                            LockoutEnabled = false,
                            NormalizedEmail = "ALEXIE.GULGOWSKI@HOTMAIL.COM",
                            NormalizedUserName = "ALEXIE.GULGOWSKI18",
                            PasswordHash = "AQAAAAIAAYagAAAAECcB+TxqQ+feYV/U1EDEci09K6k3bb2xCebRNVmFBkh+Rbp7RrOu6Q70LPHIXMn+zw==",
                            PhoneNumber = "284-860-1180",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/1011.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Alexie.Gulgowski18"
                        },
                        new
                        {
                            Id = 30,
                            AccessFailedCount = 0,
                            Address = "158 Douglas Lodge, Dibbertbury, Monaco",
                            ConcurrencyStamp = "05510e1b-df61-4500-8e09-f00862a854f6",
                            CreatedAt = new DateTime(2024, 8, 11, 3, 33, 58, 617, DateTimeKind.Utc).AddTicks(776),
                            Email = "Greyson.Tremblay@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Greyson",
                            LastName = "Tremblay",
                            LockoutEnabled = false,
                            NormalizedEmail = "GREYSON.TREMBLAY@YAHOO.COM",
                            NormalizedUserName = "GREYSON_TREMBLAY65",
                            PasswordHash = "AQAAAAIAAYagAAAAELS+wB9ssD6jYGYsqfPczZT0SAfoLZfvCUDI6uwmbX4WUCZfhiv8/Kks5Afxus5XyA==",
                            PhoneNumber = "051-811-6049",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/481.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Greyson_Tremblay65"
                        },
                        new
                        {
                            Id = 31,
                            AccessFailedCount = 0,
                            Address = "114 Hilll Junction, New Edmund, Egypt",
                            ConcurrencyStamp = "f9f9a5b0-ab8f-4338-9979-92b85d5117f2",
                            CreatedAt = new DateTime(2024, 7, 22, 3, 33, 58, 617, DateTimeKind.Utc).AddTicks(1057),
                            Email = "Kirk70@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Kirk",
                            LastName = "Donnelly",
                            LockoutEnabled = false,
                            NormalizedEmail = "KIRK70@GMAIL.COM",
                            NormalizedUserName = "KIRK49",
                            PasswordHash = "AQAAAAIAAYagAAAAENovjj1FNqvMuHBbNVZiJi4jiOcL2+JMD7rA1VtUU2e2OyxsKqITuMTZFTyIJYMN/g==",
                            PhoneNumber = "859-222-4257",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/879.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Kirk49"
                        },
                        new
                        {
                            Id = 32,
                            AccessFailedCount = 0,
                            Address = "6122 Sasha Rapid, West Alexandrebury, Denmark",
                            ConcurrencyStamp = "70857432-f4e3-49c9-909a-3f14b4aa170f",
                            CreatedAt = new DateTime(2024, 3, 10, 3, 33, 58, 617, DateTimeKind.Utc).AddTicks(1389),
                            Email = "Brendon.Smitham@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Brendon",
                            LastName = "Smitham",
                            LockoutEnabled = false,
                            NormalizedEmail = "BRENDON.SMITHAM@YAHOO.COM",
                            NormalizedUserName = "BRENDON.SMITHAM5",
                            PasswordHash = "AQAAAAIAAYagAAAAEBe6u55bqNmKOOHi9SkzWWAsk+k55dYv9dbMs8MuGggOg30eD+PTqNSphoKRBzCFAA==",
                            PhoneNumber = "766-926-3231",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/142.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Brendon.Smitham5"
                        },
                        new
                        {
                            Id = 33,
                            AccessFailedCount = 0,
                            Address = "9879 Durgan Cape, Adeliashire, Angola",
                            ConcurrencyStamp = "908fb149-db9b-4e6e-b235-39aff0b09a62",
                            CreatedAt = new DateTime(2024, 9, 7, 3, 33, 58, 617, DateTimeKind.Utc).AddTicks(1636),
                            Email = "Shemar_Maggio@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Shemar",
                            LastName = "Maggio",
                            LockoutEnabled = false,
                            NormalizedEmail = "SHEMAR_MAGGIO@HOTMAIL.COM",
                            NormalizedUserName = "SHEMAR_MAGGIO",
                            PasswordHash = "AQAAAAIAAYagAAAAEGrqWZXhQDg/q+QlwnTF7JJpqU/NRhMdixoayhCF1uVjxvfdYDFixvBxNaqt+GxYTQ==",
                            PhoneNumber = "233-421-4179",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/931.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Shemar_Maggio"
                        },
                        new
                        {
                            Id = 34,
                            AccessFailedCount = 0,
                            Address = "1885 Dooley Extension, Jazmynside, Iran",
                            ConcurrencyStamp = "3acbbc27-97dc-4f18-9d18-2381518a2dee",
                            CreatedAt = new DateTime(2024, 3, 21, 3, 33, 58, 617, DateTimeKind.Utc).AddTicks(1926),
                            Email = "Ilene_Hickle@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Ilene",
                            LastName = "Hickle",
                            LockoutEnabled = false,
                            NormalizedEmail = "ILENE_HICKLE@HOTMAIL.COM",
                            NormalizedUserName = "ILENE_HICKLE52",
                            PasswordHash = "AQAAAAIAAYagAAAAEBfNeCSYwd5mZ9CJ56gAlr1hgbb2jbkWBBn0h7TlrBV/uCLkUmrt20Iy3Z+Goh3m1Q==",
                            PhoneNumber = "045-155-1093",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/442.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Ilene_Hickle52"
                        },
                        new
                        {
                            Id = 35,
                            AccessFailedCount = 0,
                            Address = "802 Imogene Locks, Alexanetown, Saint Barthelemy",
                            ConcurrencyStamp = "57f1687f-f3d1-46f8-bd0b-56b44ce1629f",
                            CreatedAt = new DateTime(2024, 10, 18, 3, 33, 58, 617, DateTimeKind.Utc).AddTicks(2179),
                            Email = "Hilario.Emard19@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Hilario",
                            LastName = "Emard",
                            LockoutEnabled = false,
                            NormalizedEmail = "HILARIO.EMARD19@GMAIL.COM",
                            NormalizedUserName = "HILARIO.EMARD",
                            PasswordHash = "AQAAAAIAAYagAAAAEHPc/WolZQf4bDeRDWHhX7PxPkgarZELEO3ehpsyUqdu8FPH4ra1eh6YvYMDPZjgjw==",
                            PhoneNumber = "408-558-0152",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/10.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Hilario.Emard"
                        },
                        new
                        {
                            Id = 36,
                            AccessFailedCount = 0,
                            Address = "427 Beier Shoals, Kiehnshire, Slovakia (Slovak Republic)",
                            ConcurrencyStamp = "873ad3aa-0503-4343-8c29-3042b1e001bb",
                            CreatedAt = new DateTime(2024, 8, 27, 3, 33, 58, 617, DateTimeKind.Utc).AddTicks(2472),
                            Email = "Gideon.Roob59@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Gideon",
                            LastName = "Roob",
                            LockoutEnabled = false,
                            NormalizedEmail = "GIDEON.ROOB59@YAHOO.COM",
                            NormalizedUserName = "GIDEON.ROOB98",
                            PasswordHash = "AQAAAAIAAYagAAAAEHvRG32VnZnoHMHjsUM+HjYGEJJkZm9YFfYG36bYYKYsZD1LZz+ZsLVFVff69J7osw==",
                            PhoneNumber = "910-535-1235",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/102.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Gideon.Roob98"
                        },
                        new
                        {
                            Id = 37,
                            AccessFailedCount = 0,
                            Address = "7958 Verona Ferry, West Emmett, Barbados",
                            ConcurrencyStamp = "b832dd04-9b26-495b-8d34-c56f71d73d2f",
                            CreatedAt = new DateTime(2024, 3, 26, 3, 33, 58, 617, DateTimeKind.Utc).AddTicks(2750),
                            Email = "Estevan95@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Estevan",
                            LastName = "Gaylord",
                            LockoutEnabled = false,
                            NormalizedEmail = "ESTEVAN95@YAHOO.COM",
                            NormalizedUserName = "ESTEVAN_GAYLORD59",
                            PasswordHash = "AQAAAAIAAYagAAAAENT4Uq1BRvQffkFprONuxq+c9hkQojUQkwHGEhmH3B7lYk4s6LCwB0BVY2nuM7XmOA==",
                            PhoneNumber = "344-961-5680",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/880.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Estevan_Gaylord59"
                        },
                        new
                        {
                            Id = 38,
                            AccessFailedCount = 0,
                            Address = "2477 Towne Hills, Torphyborough, Sweden",
                            ConcurrencyStamp = "0578668e-1f12-40af-9c70-3f2e43a8e778",
                            CreatedAt = new DateTime(2024, 8, 15, 3, 33, 58, 617, DateTimeKind.Utc).AddTicks(3035),
                            Email = "Erling4@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Erling",
                            LastName = "Nader",
                            LockoutEnabled = false,
                            NormalizedEmail = "ERLING4@HOTMAIL.COM",
                            NormalizedUserName = "ERLING.NADER",
                            PasswordHash = "AQAAAAIAAYagAAAAEL47vNTWXo7eykHYLz+d25VvAntypn23jHC5KMo0ily9HVHYIeTXGV9lt4GBXEz7JA==",
                            PhoneNumber = "531-729-6053",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/191.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Erling.Nader"
                        },
                        new
                        {
                            Id = 39,
                            AccessFailedCount = 0,
                            Address = "5926 Antonina Summit, Emmettside, Kyrgyz Republic",
                            ConcurrencyStamp = "b1356774-b7e3-4d3a-a8f0-0501538a66d0",
                            CreatedAt = new DateTime(2024, 8, 24, 3, 33, 58, 617, DateTimeKind.Utc).AddTicks(3300),
                            Email = "Stephan49@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Stephan",
                            LastName = "Tillman",
                            LockoutEnabled = false,
                            NormalizedEmail = "STEPHAN49@HOTMAIL.COM",
                            NormalizedUserName = "STEPHAN.TILLMAN47",
                            PasswordHash = "AQAAAAIAAYagAAAAEER7FS1tl1fA5OXdyfjQ9+0Tlbupgbnky6RawQqwispPEkD+D1/WxynrKG5z6mQphQ==",
                            PhoneNumber = "855-636-0610",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/1219.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Stephan.Tillman47"
                        },
                        new
                        {
                            Id = 40,
                            AccessFailedCount = 0,
                            Address = "99884 Rath Fort, South Nigelborough, Saint Barthelemy",
                            ConcurrencyStamp = "6222f3bc-9690-46ec-bed4-886eadc972a8",
                            CreatedAt = new DateTime(2024, 1, 29, 3, 33, 58, 617, DateTimeKind.Utc).AddTicks(3609),
                            Email = "Katlynn_Wyman@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Katlynn",
                            LastName = "Wyman",
                            LockoutEnabled = false,
                            NormalizedEmail = "KATLYNN_WYMAN@GMAIL.COM",
                            NormalizedUserName = "KATLYNN_WYMAN42",
                            PasswordHash = "AQAAAAIAAYagAAAAEFKR/KGNFGrUsibGTKfjqpYopTe9uLgKdGpAY7877GJkf6U/kkf9y6sCR66oOd2SXg==",
                            PhoneNumber = "469-024-4439",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/1204.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Katlynn_Wyman42"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Address", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.User", "User")
                        .WithMany("Addresses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.BannerDetail", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Banner", "Banner")
                        .WithMany("BannerDetails")
                        .HasForeignKey("BannerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManboShopAPI.Domain.Entities.Product", "Product")
                        .WithMany("BannerDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Banner");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Cart", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("User");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.CartItem", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Cart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManboShopAPI.Domain.Entities.Product", "Product")
                        .WithMany("CartItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.CouponCondition", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Coupon", "Coupon")
                        .WithMany("CouponConditions")
                        .HasForeignKey("CouponId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Coupon");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Favorite", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Product", "Product")
                        .WithMany("Favorites")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManboShopAPI.Domain.Entities.User", "User")
                        .WithMany("Favorites")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Feedback", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Product", "Product")
                        .WithMany("Feedbacks")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManboShopAPI.Domain.Entities.User", "User")
                        .WithMany("Feedbacks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.NewsDetail", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.News", "News")
                        .WithMany("NewsDetails")
                        .HasForeignKey("NewsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManboShopAPI.Domain.Entities.Product", "Product")
                        .WithMany("NewsDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("News");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Order", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Coupon", "Coupon")
                        .WithMany("Orders")
                        .HasForeignKey("CouponId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ManboShopAPI.Domain.Entities.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Coupon");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.OrderDetail", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Coupon", "Coupon")
                        .WithMany("OrderDetails")
                        .HasForeignKey("CouponId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ManboShopAPI.Domain.Entities.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManboShopAPI.Domain.Entities.Product", "Product")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Coupon");

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Product", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ManboShopAPI.Domain.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Brand");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.ProductAttributeValue", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Attributes", "Attribute")
                        .WithMany("ProductAttributeValues")
                        .HasForeignKey("AttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManboShopAPI.Domain.Entities.Product", "Product")
                        .WithMany("ProductAttributeValues")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attribute");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.ProductImage", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Product", "Product")
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManboShopAPI.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Attributes", b =>
                {
                    b.Navigation("ProductAttributeValues");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Banner", b =>
                {
                    b.Navigation("BannerDetails");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Brand", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Cart", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Coupon", b =>
                {
                    b.Navigation("CouponConditions");

                    b.Navigation("OrderDetails");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.News", b =>
                {
                    b.Navigation("NewsDetails");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Product", b =>
                {
                    b.Navigation("BannerDetails");

                    b.Navigation("CartItems");

                    b.Navigation("Favorites");

                    b.Navigation("Feedbacks");

                    b.Navigation("NewsDetails");

                    b.Navigation("OrderDetails");

                    b.Navigation("ProductAttributeValues");

                    b.Navigation("ProductImages");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.User", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Favorites");

                    b.Navigation("Feedbacks");

                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
