// <auto-generated />
using System;
using ManboShopAPI.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ManboShopAPI.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241225102329_fix foreign key between order detail and product")]
    partial class fixforeignkeybetweenorderdetailandproduct
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AreaOrColonyOrStreetOrSectorOrVillage")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("BuildingOrCompanyOrApartment")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FlatOrHouse")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PinCode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Banner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Banners");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.BannerDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BannerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BannerId");

                    b.HasIndex("ProductId");

                    b.ToTable("BannerDetails");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Brands");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 12, 25, 10, 23, 28, 409, DateTimeKind.Utc).AddTicks(1950),
                            ImageUrl = "https://example.com/images/nike.jpg",
                            Name = "Nike"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 12, 25, 10, 23, 28, 409, DateTimeKind.Utc).AddTicks(2497),
                            ImageUrl = "https://example.com/images/adidas.jpg",
                            Name = "Adidas"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 12, 25, 10, 23, 28, 409, DateTimeKind.Utc).AddTicks(2500),
                            ImageUrl = "https://example.com/images/gucci.jpg",
                            Name = "Gucci"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2024, 12, 25, 10, 23, 28, 409, DateTimeKind.Utc).AddTicks(2501),
                            ImageUrl = "https://example.com/images/louis-vuitton.jpg",
                            Name = "Louis Vuitton"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2024, 12, 25, 10, 23, 28, 409, DateTimeKind.Utc).AddTicks(2503),
                            ImageUrl = "https://example.com/images/zara.jpg",
                            Name = "Zara"
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2024, 12, 25, 10, 23, 28, 409, DateTimeKind.Utc).AddTicks(2507),
                            ImageUrl = "https://example.com/images/h&m.jpg",
                            Name = "H&M"
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2024, 12, 25, 10, 23, 28, 409, DateTimeKind.Utc).AddTicks(2508),
                            ImageUrl = "https://example.com/images/chanel.jpg",
                            Name = "Chanel"
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2024, 12, 25, 10, 23, 28, 409, DateTimeKind.Utc).AddTicks(2509),
                            ImageUrl = "https://example.com/images/prada.jpg",
                            Name = "Prada"
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2024, 12, 25, 10, 23, 28, 409, DateTimeKind.Utc).AddTicks(2509),
                            ImageUrl = "https://example.com/images/versace.jpg",
                            Name = "Versace"
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2024, 12, 25, 10, 23, 28, 409, DateTimeKind.Utc).AddTicks(2511),
                            ImageUrl = "https://example.com/images/burberry.jpg",
                            Name = "Burberry"
                        },
                        new
                        {
                            Id = 11,
                            CreatedAt = new DateTime(2024, 12, 25, 10, 23, 28, 409, DateTimeKind.Utc).AddTicks(2512),
                            ImageUrl = "https://example.com/images/dior.jpg",
                            Name = "Dior"
                        },
                        new
                        {
                            Id = 12,
                            CreatedAt = new DateTime(2024, 12, 25, 10, 23, 28, 409, DateTimeKind.Utc).AddTicks(2513),
                            ImageUrl = "https://example.com/images/calvin-klein.jpg",
                            Name = "Calvin Klein"
                        },
                        new
                        {
                            Id = 13,
                            CreatedAt = new DateTime(2024, 12, 25, 10, 23, 28, 409, DateTimeKind.Utc).AddTicks(2514),
                            ImageUrl = "https://example.com/images/tommy-hilfiger.jpg",
                            Name = "Tommy Hilfiger"
                        },
                        new
                        {
                            Id = 14,
                            CreatedAt = new DateTime(2024, 12, 25, 10, 23, 28, 409, DateTimeKind.Utc).AddTicks(2515),
                            ImageUrl = "https://example.com/images/levis.jpg",
                            Name = "Levi's"
                        },
                        new
                        {
                            Id = 15,
                            CreatedAt = new DateTime(2024, 12, 25, 10, 23, 28, 409, DateTimeKind.Utc).AddTicks(2516),
                            ImageUrl = "https://example.com/images/uniqlo.jpg",
                            Name = "Uniqlo"
                        },
                        new
                        {
                            Id = 16,
                            CreatedAt = new DateTime(2024, 12, 25, 10, 23, 28, 409, DateTimeKind.Utc).AddTicks(2517),
                            ImageUrl = "https://example.com/images/lacoste.jpg",
                            Name = "Lacoste"
                        },
                        new
                        {
                            Id = 17,
                            CreatedAt = new DateTime(2024, 12, 25, 10, 23, 28, 409, DateTimeKind.Utc).AddTicks(2518),
                            ImageUrl = "https://example.com/images/the-north-face.jpg",
                            Name = "The North Face"
                        },
                        new
                        {
                            Id = 18,
                            CreatedAt = new DateTime(2024, 12, 25, 10, 23, 28, 409, DateTimeKind.Utc).AddTicks(2519),
                            ImageUrl = "https://example.com/images/ralph-lauren.jpg",
                            Name = "Ralph Lauren"
                        },
                        new
                        {
                            Id = 19,
                            CreatedAt = new DateTime(2024, 12, 25, 10, 23, 28, 409, DateTimeKind.Utc).AddTicks(2520),
                            ImageUrl = "https://example.com/images/puma.jpg",
                            Name = "Puma"
                        },
                        new
                        {
                            Id = 20,
                            CreatedAt = new DateTime(2024, 12, 25, 10, 23, 28, 409, DateTimeKind.Utc).AddTicks(2606),
                            ImageUrl = "https://example.com/images/hugo-boss.jpg",
                            Name = "Hugo Boss"
                        },
                        new
                        {
                            Id = 21,
                            CreatedAt = new DateTime(2024, 12, 25, 10, 23, 28, 409, DateTimeKind.Utc).AddTicks(2607),
                            ImageUrl = "https://example.com/images/armani.jpg",
                            Name = "Armani"
                        },
                        new
                        {
                            Id = 22,
                            CreatedAt = new DateTime(2024, 12, 25, 10, 23, 28, 409, DateTimeKind.Utc).AddTicks(2608),
                            ImageUrl = "https://example.com/images/balenciaga.jpg",
                            Name = "Balenciaga"
                        },
                        new
                        {
                            Id = 23,
                            CreatedAt = new DateTime(2024, 12, 25, 10, 23, 28, 409, DateTimeKind.Utc).AddTicks(2609),
                            ImageUrl = "https://example.com/images/fendi.jpg",
                            Name = "Fendi"
                        },
                        new
                        {
                            Id = 24,
                            CreatedAt = new DateTime(2024, 12, 25, 10, 23, 28, 409, DateTimeKind.Utc).AddTicks(2618),
                            ImageUrl = "https://example.com/images/givenchy.jpg",
                            Name = "Givenchy"
                        },
                        new
                        {
                            Id = 25,
                            CreatedAt = new DateTime(2024, 12, 25, 10, 23, 28, 409, DateTimeKind.Utc).AddTicks(2619),
                            ImageUrl = "https://example.com/images/hermes.jpg",
                            Name = "Hermès"
                        },
                        new
                        {
                            Id = 26,
                            CreatedAt = new DateTime(2024, 12, 25, 10, 23, 28, 409, DateTimeKind.Utc).AddTicks(2620),
                            ImageUrl = "https://example.com/images/salvatore-ferragamo.jpg",
                            Name = "Salvatore Ferragamo"
                        },
                        new
                        {
                            Id = 27,
                            CreatedAt = new DateTime(2024, 12, 25, 10, 23, 28, 409, DateTimeKind.Utc).AddTicks(2621),
                            ImageUrl = "https://example.com/images/valentino.jpg",
                            Name = "Valentino"
                        },
                        new
                        {
                            Id = 28,
                            CreatedAt = new DateTime(2024, 12, 25, 10, 23, 28, 409, DateTimeKind.Utc).AddTicks(2627),
                            ImageUrl = "https://example.com/images/dolce-gabbana.jpg",
                            Name = "Dolce & Gabbana"
                        },
                        new
                        {
                            Id = 29,
                            CreatedAt = new DateTime(2024, 12, 25, 10, 23, 28, 409, DateTimeKind.Utc).AddTicks(2628),
                            ImageUrl = "https://example.com/images/gap.jpg",
                            Name = "Gap"
                        },
                        new
                        {
                            Id = 30,
                            CreatedAt = new DateTime(2024, 12, 25, 10, 23, 28, 409, DateTimeKind.Utc).AddTicks(2636),
                            ImageUrl = "https://example.com/images/forever21.jpg",
                            Name = "Forever 21"
                        },
                        new
                        {
                            Id = 31,
                            CreatedAt = new DateTime(2024, 12, 25, 10, 23, 28, 409, DateTimeKind.Utc).AddTicks(2637),
                            ImageUrl = "https://example.com/images/new-balance.jpg",
                            Name = "New Balance"
                        },
                        new
                        {
                            Id = 32,
                            CreatedAt = new DateTime(2024, 12, 25, 10, 23, 28, 409, DateTimeKind.Utc).AddTicks(2638),
                            ImageUrl = "https://example.com/images/vans.jpg",
                            Name = "Vans"
                        },
                        new
                        {
                            Id = 33,
                            CreatedAt = new DateTime(2024, 12, 25, 10, 23, 28, 409, DateTimeKind.Utc).AddTicks(2639),
                            ImageUrl = "https://example.com/images/converse.jpg",
                            Name = "Converse"
                        },
                        new
                        {
                            Id = 34,
                            CreatedAt = new DateTime(2024, 12, 25, 10, 23, 28, 409, DateTimeKind.Utc).AddTicks(2642),
                            ImageUrl = "https://example.com/images/under-armour.jpg",
                            Name = "Under Armour"
                        },
                        new
                        {
                            Id = 35,
                            CreatedAt = new DateTime(2024, 12, 25, 10, 23, 28, 409, DateTimeKind.Utc).AddTicks(2643),
                            ImageUrl = "https://example.com/images/reebok.jpg",
                            Name = "Reebok"
                        },
                        new
                        {
                            Id = 36,
                            CreatedAt = new DateTime(2024, 12, 25, 10, 23, 28, 409, DateTimeKind.Utc).AddTicks(2643),
                            ImageUrl = "https://example.com/images/coach.jpg",
                            Name = "Coach"
                        },
                        new
                        {
                            Id = 37,
                            CreatedAt = new DateTime(2024, 12, 25, 10, 23, 28, 409, DateTimeKind.Utc).AddTicks(2644),
                            ImageUrl = "https://example.com/images/kate-spade.jpg",
                            Name = "Kate Spade"
                        },
                        new
                        {
                            Id = 38,
                            CreatedAt = new DateTime(2024, 12, 25, 10, 23, 28, 409, DateTimeKind.Utc).AddTicks(2645),
                            ImageUrl = "https://example.com/images/michael-kors.jpg",
                            Name = "Michael Kors"
                        },
                        new
                        {
                            Id = 39,
                            CreatedAt = new DateTime(2024, 12, 25, 10, 23, 28, 409, DateTimeKind.Utc).AddTicks(2646),
                            ImageUrl = "https://example.com/images/bally.jpg",
                            Name = "Bally"
                        },
                        new
                        {
                            Id = 40,
                            CreatedAt = new DateTime(2024, 12, 25, 10, 23, 28, 409, DateTimeKind.Utc).AddTicks(2647),
                            ImageUrl = "https://example.com/images/guess.jpg",
                            Name = "Guess"
                        });
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.CartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("ProductId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 12, 25, 10, 23, 26, 502, DateTimeKind.Utc).AddTicks(8240),
                            ImageUrl = "https://example.com/images/men-clothing.jpg",
                            Name = "Men's Clothing"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 12, 25, 10, 23, 26, 502, DateTimeKind.Utc).AddTicks(8691),
                            ImageUrl = "https://example.com/images/women-clothing.jpg",
                            Name = "Women's Clothing"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 12, 25, 10, 23, 26, 502, DateTimeKind.Utc).AddTicks(8694),
                            ImageUrl = "https://example.com/images/children-clothing.jpg",
                            Name = "Children's Clothing"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2024, 12, 25, 10, 23, 26, 502, DateTimeKind.Utc).AddTicks(8695),
                            ImageUrl = "https://example.com/images/shoes.jpg",
                            Name = "Shoes"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2024, 12, 25, 10, 23, 26, 502, DateTimeKind.Utc).AddTicks(8696),
                            ImageUrl = "https://example.com/images/bags.jpg",
                            Name = "Bags"
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2024, 12, 25, 10, 23, 26, 502, DateTimeKind.Utc).AddTicks(8700),
                            ImageUrl = "https://example.com/images/accessories.jpg",
                            Name = "Accessories"
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2024, 12, 25, 10, 23, 26, 502, DateTimeKind.Utc).AddTicks(8701),
                            ImageUrl = "https://example.com/images/watches.jpg",
                            Name = "Watches"
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2024, 12, 25, 10, 23, 26, 502, DateTimeKind.Utc).AddTicks(8702),
                            ImageUrl = "https://example.com/images/sportswear.jpg",
                            Name = "Sportswear"
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2024, 12, 25, 10, 23, 26, 502, DateTimeKind.Utc).AddTicks(8703),
                            ImageUrl = "https://example.com/images/swimwear.jpg",
                            Name = "Swimwear"
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2024, 12, 25, 10, 23, 26, 502, DateTimeKind.Utc).AddTicks(8704),
                            ImageUrl = "https://example.com/images/formal-wear.jpg",
                            Name = "Formal Wear"
                        },
                        new
                        {
                            Id = 11,
                            CreatedAt = new DateTime(2024, 12, 25, 10, 23, 26, 502, DateTimeKind.Utc).AddTicks(8705),
                            ImageUrl = "https://example.com/images/casual-wear.jpg",
                            Name = "Casual Wear"
                        },
                        new
                        {
                            Id = 12,
                            CreatedAt = new DateTime(2024, 12, 25, 10, 23, 26, 502, DateTimeKind.Utc).AddTicks(8706),
                            ImageUrl = "https://example.com/images/t-shirts.jpg",
                            Name = "T-Shirts"
                        },
                        new
                        {
                            Id = 13,
                            CreatedAt = new DateTime(2024, 12, 25, 10, 23, 26, 502, DateTimeKind.Utc).AddTicks(8707),
                            ImageUrl = "https://example.com/images/jeans.jpg",
                            Name = "Jeans"
                        },
                        new
                        {
                            Id = 14,
                            CreatedAt = new DateTime(2024, 12, 25, 10, 23, 26, 502, DateTimeKind.Utc).AddTicks(8708),
                            ImageUrl = "https://example.com/images/jackets-coats.jpg",
                            Name = "Jackets & Coats"
                        },
                        new
                        {
                            Id = 15,
                            CreatedAt = new DateTime(2024, 12, 25, 10, 23, 26, 502, DateTimeKind.Utc).AddTicks(8709),
                            ImageUrl = "https://example.com/images/hats-caps.jpg",
                            Name = "Hats & Caps"
                        },
                        new
                        {
                            Id = 16,
                            CreatedAt = new DateTime(2024, 12, 25, 10, 23, 26, 502, DateTimeKind.Utc).AddTicks(8710),
                            ImageUrl = "https://example.com/images/scarves.jpg",
                            Name = "Scarves"
                        },
                        new
                        {
                            Id = 17,
                            CreatedAt = new DateTime(2024, 12, 25, 10, 23, 26, 502, DateTimeKind.Utc).AddTicks(8711),
                            ImageUrl = "https://example.com/images/sunglasses.jpg",
                            Name = "Sunglasses"
                        },
                        new
                        {
                            Id = 18,
                            CreatedAt = new DateTime(2024, 12, 25, 10, 23, 26, 502, DateTimeKind.Utc).AddTicks(8712),
                            ImageUrl = "https://example.com/images/belts.jpg",
                            Name = "Belts"
                        },
                        new
                        {
                            Id = 19,
                            CreatedAt = new DateTime(2024, 12, 25, 10, 23, 26, 502, DateTimeKind.Utc).AddTicks(8713),
                            ImageUrl = "https://example.com/images/undergarments.jpg",
                            Name = "Undergarments"
                        },
                        new
                        {
                            Id = 20,
                            CreatedAt = new DateTime(2024, 12, 25, 10, 23, 26, 502, DateTimeKind.Utc).AddTicks(8714),
                            ImageUrl = "https://example.com/images/sports-shoes.jpg",
                            Name = "Sports Shoes"
                        },
                        new
                        {
                            Id = 21,
                            CreatedAt = new DateTime(2024, 12, 25, 10, 23, 26, 502, DateTimeKind.Utc).AddTicks(8715),
                            ImageUrl = "https://example.com/images/boots.jpg",
                            Name = "Boots"
                        },
                        new
                        {
                            Id = 22,
                            CreatedAt = new DateTime(2024, 12, 25, 10, 23, 26, 502, DateTimeKind.Utc).AddTicks(8716),
                            ImageUrl = "https://example.com/images/high-heels.jpg",
                            Name = "High Heels"
                        },
                        new
                        {
                            Id = 23,
                            CreatedAt = new DateTime(2024, 12, 25, 10, 23, 26, 502, DateTimeKind.Utc).AddTicks(8717),
                            ImageUrl = "https://example.com/images/sneakers.jpg",
                            Name = "Sneakers"
                        },
                        new
                        {
                            Id = 24,
                            CreatedAt = new DateTime(2024, 12, 25, 10, 23, 26, 502, DateTimeKind.Utc).AddTicks(8718),
                            ImageUrl = "https://example.com/images/suits.jpg",
                            Name = "Suits"
                        },
                        new
                        {
                            Id = 25,
                            CreatedAt = new DateTime(2024, 12, 25, 10, 23, 26, 502, DateTimeKind.Utc).AddTicks(8719),
                            ImageUrl = "https://example.com/images/dresses.jpg",
                            Name = "Dresses"
                        },
                        new
                        {
                            Id = 26,
                            CreatedAt = new DateTime(2024, 12, 25, 10, 23, 26, 502, DateTimeKind.Utc).AddTicks(8720),
                            ImageUrl = "https://example.com/images/blouses.jpg",
                            Name = "Blouses"
                        },
                        new
                        {
                            Id = 27,
                            CreatedAt = new DateTime(2024, 12, 25, 10, 23, 26, 502, DateTimeKind.Utc).AddTicks(8721),
                            ImageUrl = "https://example.com/images/skirts.jpg",
                            Name = "Skirts"
                        },
                        new
                        {
                            Id = 28,
                            CreatedAt = new DateTime(2024, 12, 25, 10, 23, 26, 502, DateTimeKind.Utc).AddTicks(8722),
                            ImageUrl = "https://example.com/images/shorts.jpg",
                            Name = "Shorts"
                        },
                        new
                        {
                            Id = 29,
                            CreatedAt = new DateTime(2024, 12, 25, 10, 23, 26, 502, DateTimeKind.Utc).AddTicks(8723),
                            ImageUrl = "https://example.com/images/pajamas.jpg",
                            Name = "Pajamas"
                        },
                        new
                        {
                            Id = 30,
                            CreatedAt = new DateTime(2024, 12, 25, 10, 23, 26, 502, DateTimeKind.Utc).AddTicks(8723),
                            ImageUrl = "https://example.com/images/outerwear.jpg",
                            Name = "Outerwear"
                        },
                        new
                        {
                            Id = 31,
                            CreatedAt = new DateTime(2024, 12, 25, 10, 23, 26, 502, DateTimeKind.Utc).AddTicks(8724),
                            ImageUrl = "https://example.com/images/activewear.jpg",
                            Name = "Activewear"
                        },
                        new
                        {
                            Id = 32,
                            CreatedAt = new DateTime(2024, 12, 25, 10, 23, 26, 502, DateTimeKind.Utc).AddTicks(8725),
                            ImageUrl = "https://example.com/images/raincoats.jpg",
                            Name = "Raincoats"
                        },
                        new
                        {
                            Id = 33,
                            CreatedAt = new DateTime(2024, 12, 25, 10, 23, 26, 502, DateTimeKind.Utc).AddTicks(8726),
                            ImageUrl = "https://example.com/images/cardigans.jpg",
                            Name = "Cardigans"
                        },
                        new
                        {
                            Id = 34,
                            CreatedAt = new DateTime(2024, 12, 25, 10, 23, 26, 502, DateTimeKind.Utc).AddTicks(8728),
                            ImageUrl = "https://example.com/images/sweaters.jpg",
                            Name = "Sweaters"
                        },
                        new
                        {
                            Id = 35,
                            CreatedAt = new DateTime(2024, 12, 25, 10, 23, 26, 502, DateTimeKind.Utc).AddTicks(8729),
                            ImageUrl = "https://example.com/images/leggings.jpg",
                            Name = "Leggings"
                        },
                        new
                        {
                            Id = 36,
                            CreatedAt = new DateTime(2024, 12, 25, 10, 23, 26, 502, DateTimeKind.Utc).AddTicks(8730),
                            ImageUrl = "https://example.com/images/tracksuits.jpg",
                            Name = "Tracksuits"
                        },
                        new
                        {
                            Id = 37,
                            CreatedAt = new DateTime(2024, 12, 25, 10, 23, 26, 502, DateTimeKind.Utc).AddTicks(8730),
                            ImageUrl = "https://example.com/images/gloves.jpg",
                            Name = "Gloves"
                        },
                        new
                        {
                            Id = 38,
                            CreatedAt = new DateTime(2024, 12, 25, 10, 23, 26, 502, DateTimeKind.Utc).AddTicks(8731),
                            ImageUrl = "https://example.com/images/socks.jpg",
                            Name = "Socks"
                        },
                        new
                        {
                            Id = 39,
                            CreatedAt = new DateTime(2024, 12, 25, 10, 23, 26, 502, DateTimeKind.Utc).AddTicks(8732),
                            ImageUrl = "https://example.com/images/loungewear.jpg",
                            Name = "Loungewear"
                        },
                        new
                        {
                            Id = 40,
                            CreatedAt = new DateTime(2024, 12, 25, 10, 23, 26, 502, DateTimeKind.Utc).AddTicks(8733),
                            ImageUrl = "https://example.com/images/winter-wear.jpg",
                            Name = "Winter Wear"
                        });
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Coupon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CurrentUsages")
                        .HasColumnType("int");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("MaxUsages")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Coupons");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.CouponCondition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Attribute")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("CouponId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DiscountAmount")
                        .HasColumnType("int");

                    b.Property<string>("Operator")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Value")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CouponId");

                    b.ToTable("CouponConditions");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Favorite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Favorites");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Star")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.News", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("News");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.NewsDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("NewsId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("NewsId");

                    b.HasIndex("ProductId");

                    b.ToTable("NewsDetails");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CouponId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("SessionId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CouponId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.OrderDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CouponId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CouponId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BrandId")
                        .HasColumnType("int");

                    b.Property<int>("BuyTurn")
                        .HasColumnType("int");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("OldPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("Specification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.ProductImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductImages");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfilePictureUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            Address = "915 Norval Roads, Justynstad, Sierra Leone",
                            ConcurrencyStamp = "e55113b0-5d42-4e6f-b969-db47a162eb5d",
                            CreatedAt = new DateTime(2024, 11, 12, 10, 23, 26, 569, DateTimeKind.Utc).AddTicks(7954),
                            Email = "Jamar40@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Jamar",
                            LastName = "Schimmel",
                            LockoutEnabled = false,
                            NormalizedEmail = "JAMAR40@GMAIL.COM",
                            NormalizedUserName = "JAMAR_SCHIMMEL",
                            PasswordHash = "AQAAAAIAAYagAAAAEBm7zoc3p2B45DvHjg5cAZ1h8CBQSzf31zxkoyey33gL+xH6/hM26tbAuBrb5kRP4Q==",
                            PhoneNumber = "940-119-7338",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/152.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Jamar_Schimmel"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            Address = "7516 Maye Roads, New Katrinaton, Italy",
                            ConcurrencyStamp = "eaba8c37-aec1-41b8-9852-c048825aed39",
                            CreatedAt = new DateTime(2024, 6, 4, 10, 23, 26, 571, DateTimeKind.Utc).AddTicks(351),
                            Email = "Christelle_Walsh90@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Christelle",
                            LastName = "Walsh",
                            LockoutEnabled = false,
                            NormalizedEmail = "CHRISTELLE_WALSH90@HOTMAIL.COM",
                            NormalizedUserName = "CHRISTELLE58",
                            PasswordHash = "AQAAAAIAAYagAAAAEEUw6KCscw8QQrfcVTk7SWtwr4YfsHkGipjY4RCupCSVvDZQI/qSePT9RCmh78oA8w==",
                            PhoneNumber = "756-107-3262",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/704.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Christelle58"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            Address = "1352 Granville Meadows, New Lesly, Solomon Islands",
                            ConcurrencyStamp = "285da001-348a-4a40-a811-e2a6ca4e84c4",
                            CreatedAt = new DateTime(2024, 12, 12, 10, 23, 26, 571, DateTimeKind.Utc).AddTicks(798),
                            Email = "Shakira_Ondricka@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Shakira",
                            LastName = "Ondricka",
                            LockoutEnabled = false,
                            NormalizedEmail = "SHAKIRA_ONDRICKA@GMAIL.COM",
                            NormalizedUserName = "SHAKIRA.ONDRICKA87",
                            PasswordHash = "AQAAAAIAAYagAAAAEJEo5k+sLVwNHcdvxvivI81zcJpH2HMAl12orGBxjGfRZtuUhUkFjkPx8+KnUBw/Lg==",
                            PhoneNumber = "167-611-5190",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/327.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Shakira.Ondricka87"
                        },
                        new
                        {
                            Id = 4,
                            AccessFailedCount = 0,
                            Address = "7265 Bogan Burg, West Krystinafort, Croatia",
                            ConcurrencyStamp = "80cda68c-d16b-4360-8460-035cfe48d24b",
                            CreatedAt = new DateTime(2024, 12, 10, 10, 23, 26, 571, DateTimeKind.Utc).AddTicks(1050),
                            Email = "Trinity13@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Trinity",
                            LastName = "Fadel",
                            LockoutEnabled = false,
                            NormalizedEmail = "TRINITY13@GMAIL.COM",
                            NormalizedUserName = "TRINITY7",
                            PasswordHash = "AQAAAAIAAYagAAAAEI8+bkmDMudDd4F9mj6R0gDBa2W0s88ubCOHAvD8Sofp5rI7VQ7Pdfh7LTXk/T2J1A==",
                            PhoneNumber = "569-959-0834",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/1225.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Trinity7"
                        },
                        new
                        {
                            Id = 5,
                            AccessFailedCount = 0,
                            Address = "830 Rutherford Track, West Dominic, Netherlands Antilles",
                            ConcurrencyStamp = "fde0730a-e5f8-4494-84ca-c0f0b15ee68a",
                            CreatedAt = new DateTime(2024, 3, 27, 10, 23, 26, 571, DateTimeKind.Utc).AddTicks(1322),
                            Email = "Lucile.Goodwin@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Lucile",
                            LastName = "Goodwin",
                            LockoutEnabled = false,
                            NormalizedEmail = "LUCILE.GOODWIN@YAHOO.COM",
                            NormalizedUserName = "LUCILE_GOODWIN60",
                            PasswordHash = "AQAAAAIAAYagAAAAEGrvkAQZtr8BkfEOERObjABCQIMsHjW51Q0ZN5ZG970N3LyC/xGrt8VMn/r8ExabHg==",
                            PhoneNumber = "127-341-0469",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/183.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Lucile_Goodwin60"
                        },
                        new
                        {
                            Id = 6,
                            AccessFailedCount = 0,
                            Address = "3925 Hegmann Drives, Moenmouth, Central African Republic",
                            ConcurrencyStamp = "b203e8dc-487c-4c26-823b-cd0ebf2066d0",
                            CreatedAt = new DateTime(2024, 8, 23, 10, 23, 26, 571, DateTimeKind.Utc).AddTicks(1556),
                            Email = "Elisha.Romaguera@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Elisha",
                            LastName = "Romaguera",
                            LockoutEnabled = false,
                            NormalizedEmail = "ELISHA.ROMAGUERA@YAHOO.COM",
                            NormalizedUserName = "ELISHA_ROMAGUERA67",
                            PasswordHash = "AQAAAAIAAYagAAAAEN1UpCtlXDJmqiEMD0pBXjxp5MvLIiZD5V2WEy7GBMZxO067vg/JoG7AunQKF6+Uyw==",
                            PhoneNumber = "733-696-4155",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/70.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Elisha_Romaguera67"
                        },
                        new
                        {
                            Id = 7,
                            AccessFailedCount = 0,
                            Address = "5537 Kshlerin Vista, South Avery, Venezuela",
                            ConcurrencyStamp = "d2c321ef-abca-4181-994d-d2fd98442d45",
                            CreatedAt = new DateTime(2024, 4, 22, 10, 23, 26, 571, DateTimeKind.Utc).AddTicks(1813),
                            Email = "Lula_Gorczany74@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Lula",
                            LastName = "Gorczany",
                            LockoutEnabled = false,
                            NormalizedEmail = "LULA_GORCZANY74@HOTMAIL.COM",
                            NormalizedUserName = "LULA49",
                            PasswordHash = "AQAAAAIAAYagAAAAEPS1yGMQDCs4ffYa/2HWxN7HCQbgwtusl+ShyLDBWI2p3FdfipCCGVJZYD5+Q1S6Kg==",
                            PhoneNumber = "806-494-7965",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/796.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Lula49"
                        },
                        new
                        {
                            Id = 8,
                            AccessFailedCount = 0,
                            Address = "075 Will Port, Ebbastad, Monaco",
                            ConcurrencyStamp = "8962f4d8-d1a5-4508-8551-5a45857a2c56",
                            CreatedAt = new DateTime(2024, 12, 24, 10, 23, 26, 571, DateTimeKind.Utc).AddTicks(2022),
                            Email = "Ciara_Farrell81@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Ciara",
                            LastName = "Farrell",
                            LockoutEnabled = false,
                            NormalizedEmail = "CIARA_FARRELL81@HOTMAIL.COM",
                            NormalizedUserName = "CIARA.FARRELL",
                            PasswordHash = "AQAAAAIAAYagAAAAEEKp/C5k23kLwyG0AxSEwttwlOilsflFx//tuYCglqcnuJTDkdjRxnx4My4aKQ7WMg==",
                            PhoneNumber = "810-525-2260",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/1118.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Ciara.Farrell"
                        },
                        new
                        {
                            Id = 9,
                            AccessFailedCount = 0,
                            Address = "3914 Lesley Groves, Hudsonville, Malawi",
                            ConcurrencyStamp = "d27f76bc-6a23-46ad-8aa7-620b37860cf1",
                            CreatedAt = new DateTime(2024, 8, 30, 10, 23, 26, 571, DateTimeKind.Utc).AddTicks(2288),
                            Email = "Juanita.Abshire@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Juanita",
                            LastName = "Abshire",
                            LockoutEnabled = false,
                            NormalizedEmail = "JUANITA.ABSHIRE@YAHOO.COM",
                            NormalizedUserName = "JUANITA_ABSHIRE64",
                            PasswordHash = "AQAAAAIAAYagAAAAEKGGh3KdVmlQ+LNtvrneEWxlCiis1ECYhx9r9UaoqouDDltGDYqrWp2h6L21NXhsFw==",
                            PhoneNumber = "818-457-7857",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/452.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Juanita_Abshire64"
                        },
                        new
                        {
                            Id = 10,
                            AccessFailedCount = 0,
                            Address = "8698 Kunde Orchard, Fatimamouth, Heard Island and McDonald Islands",
                            ConcurrencyStamp = "7535abb7-f4e3-4f79-8d3f-b603459f16b4",
                            CreatedAt = new DateTime(2024, 10, 24, 10, 23, 26, 571, DateTimeKind.Utc).AddTicks(2487),
                            Email = "Reyes.Raynor@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Reyes",
                            LastName = "Raynor",
                            LockoutEnabled = false,
                            NormalizedEmail = "REYES.RAYNOR@HOTMAIL.COM",
                            NormalizedUserName = "REYES.RAYNOR",
                            PasswordHash = "AQAAAAIAAYagAAAAEJ1INrOuB87JWQrOy/7I4dlVX3DTx/Q0VLSACsepveskyi+slatD6ywnGT+oMpkSkg==",
                            PhoneNumber = "997-903-4124",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/556.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Reyes.Raynor"
                        },
                        new
                        {
                            Id = 11,
                            AccessFailedCount = 0,
                            Address = "1638 Renner Coves, Maggioland, San Marino",
                            ConcurrencyStamp = "e1385698-2e7e-48b9-97cf-a02cb7140011",
                            CreatedAt = new DateTime(2024, 7, 1, 10, 23, 26, 571, DateTimeKind.Utc).AddTicks(2734),
                            Email = "Kendall.Schuppe@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Kendall",
                            LastName = "Schuppe",
                            LockoutEnabled = false,
                            NormalizedEmail = "KENDALL.SCHUPPE@HOTMAIL.COM",
                            NormalizedUserName = "KENDALL_SCHUPPE88",
                            PasswordHash = "AQAAAAIAAYagAAAAEAf7MLbhzPl+AxnBbo1TBd+YW07F+GTKvzI7k8grtkm2wFcXY0Jk5Kc5/Uc/h7ETQA==",
                            PhoneNumber = "045-667-3044",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/804.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Kendall_Schuppe88"
                        },
                        new
                        {
                            Id = 12,
                            AccessFailedCount = 0,
                            Address = "2809 Sherwood Radial, Treutelbury, Algeria",
                            ConcurrencyStamp = "1584b6bf-7508-4a22-a963-7a558e9eb316",
                            CreatedAt = new DateTime(2024, 2, 17, 10, 23, 26, 571, DateTimeKind.Utc).AddTicks(2950),
                            Email = "Remington67@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Remington",
                            LastName = "Baumbach",
                            LockoutEnabled = false,
                            NormalizedEmail = "REMINGTON67@HOTMAIL.COM",
                            NormalizedUserName = "REMINGTON.BAUMBACH61",
                            PasswordHash = "AQAAAAIAAYagAAAAEK5DebgtMqQxMisAQq65Js9D14zyss7pxbYuFWiuTpE5CKm+M/ExwrFmDHmjAJ6JCA==",
                            PhoneNumber = "400-427-4065",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/709.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Remington.Baumbach61"
                        },
                        new
                        {
                            Id = 13,
                            AccessFailedCount = 0,
                            Address = "1274 Conn Radial, South Kaia, Denmark",
                            ConcurrencyStamp = "8e509491-fd8a-494c-8b42-fa301acca984",
                            CreatedAt = new DateTime(2024, 11, 25, 10, 23, 26, 575, DateTimeKind.Utc).AddTicks(9221),
                            Email = "Sasha32@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Sasha",
                            LastName = "O'Hara",
                            LockoutEnabled = false,
                            NormalizedEmail = "SASHA32@YAHOO.COM",
                            NormalizedUserName = "SASHA.OHARA",
                            PasswordHash = "AQAAAAIAAYagAAAAEDOP3g/jou4WWp8abO61cAwu9KlyZLDTw+DRDtl75dezBRFXVFBVJTgvOmBMbKdBdw==",
                            PhoneNumber = "508-064-4963",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/418.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Sasha.OHara"
                        },
                        new
                        {
                            Id = 14,
                            AccessFailedCount = 0,
                            Address = "6955 Wava Trail, Lake Jessycaburgh, Antarctica (the territory South of 60 deg S)",
                            ConcurrencyStamp = "81f97553-5efa-4751-a141-efc69ebd3814",
                            CreatedAt = new DateTime(2024, 1, 17, 10, 23, 26, 575, DateTimeKind.Utc).AddTicks(9928),
                            Email = "Orville_Turner@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Orville",
                            LastName = "Turner",
                            LockoutEnabled = false,
                            NormalizedEmail = "ORVILLE_TURNER@HOTMAIL.COM",
                            NormalizedUserName = "ORVILLE_TURNER",
                            PasswordHash = "AQAAAAIAAYagAAAAECDzFtVaqPoEj0MkmQ/yrucWsrbezT7JghdxtLgJcuKwFz9/rEw2IkSCZAUGOoK7Gg==",
                            PhoneNumber = "866-356-1435",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/923.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Orville_Turner"
                        },
                        new
                        {
                            Id = 15,
                            AccessFailedCount = 0,
                            Address = "4447 Valentine Fall, Kerlukemouth, Chile",
                            ConcurrencyStamp = "4f202fc2-c152-4af7-ba23-75d69ae46226",
                            CreatedAt = new DateTime(2024, 3, 7, 10, 23, 26, 576, DateTimeKind.Utc).AddTicks(371),
                            Email = "Wava17@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Wava",
                            LastName = "Feest",
                            LockoutEnabled = false,
                            NormalizedEmail = "WAVA17@YAHOO.COM",
                            NormalizedUserName = "WAVA.FEEST",
                            PasswordHash = "AQAAAAIAAYagAAAAEJvCZiokMWiZHZl4loFB4wuzlbyerrEalYEg/F/+OHoIYwYJ6bxvH2jOlHNpPHsdgA==",
                            PhoneNumber = "122-970-6246",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/108.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Wava.Feest"
                        },
                        new
                        {
                            Id = 16,
                            AccessFailedCount = 0,
                            Address = "6516 Conor Turnpike, Boscoton, Zimbabwe",
                            ConcurrencyStamp = "488d95ec-16ef-4d73-ac37-df8431d7bce6",
                            CreatedAt = new DateTime(2024, 2, 18, 10, 23, 26, 576, DateTimeKind.Utc).AddTicks(711),
                            Email = "Dannie_Nienow@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Dannie",
                            LastName = "Nienow",
                            LockoutEnabled = false,
                            NormalizedEmail = "DANNIE_NIENOW@YAHOO.COM",
                            NormalizedUserName = "DANNIE_NIENOW71",
                            PasswordHash = "AQAAAAIAAYagAAAAED7TUcb+xqRDg22lB75wb+mckMyVtt3foUkVvie8waGmhIvPTBUoyKu5Gkd41JWa2A==",
                            PhoneNumber = "184-473-8782",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/1138.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Dannie_Nienow71"
                        },
                        new
                        {
                            Id = 17,
                            AccessFailedCount = 0,
                            Address = "58726 Klocko Squares, New Virginiaton, Botswana",
                            ConcurrencyStamp = "722ec7c8-4cf1-42ab-8cd8-7e041b14a18e",
                            CreatedAt = new DateTime(2024, 4, 22, 10, 23, 26, 576, DateTimeKind.Utc).AddTicks(1189),
                            Email = "Hilma_Schmidt@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Hilma",
                            LastName = "Schmidt",
                            LockoutEnabled = false,
                            NormalizedEmail = "HILMA_SCHMIDT@HOTMAIL.COM",
                            NormalizedUserName = "HILMA_SCHMIDT",
                            PasswordHash = "AQAAAAIAAYagAAAAEEGsedk/WKbE1B4hR83a2dlgwYmA4/ml+QJB2cMlMkrzSzl0Ka3yJEvMdRmEMQWU2Q==",
                            PhoneNumber = "788-902-3848",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/256.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Hilma_Schmidt"
                        },
                        new
                        {
                            Id = 18,
                            AccessFailedCount = 0,
                            Address = "29330 Morgan Bypass, Paucekmouth, Antigua and Barbuda",
                            ConcurrencyStamp = "31aae358-2140-4175-8613-c3ede6b25d0f",
                            CreatedAt = new DateTime(2024, 6, 28, 10, 23, 26, 576, DateTimeKind.Utc).AddTicks(1592),
                            Email = "Bridgette14@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Bridgette",
                            LastName = "Hahn",
                            LockoutEnabled = false,
                            NormalizedEmail = "BRIDGETTE14@YAHOO.COM",
                            NormalizedUserName = "BRIDGETTE.HAHN39",
                            PasswordHash = "AQAAAAIAAYagAAAAEPUiN8o5oKm7LOQjJOK2LZGEdwWU7CQ4GRMgPGRsUWxb37DxI+VDYgLarW3kYSE4Zg==",
                            PhoneNumber = "520-496-8194",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/398.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Bridgette.Hahn39"
                        },
                        new
                        {
                            Id = 19,
                            AccessFailedCount = 0,
                            Address = "1177 Tony Forges, Bruceside, Luxembourg",
                            ConcurrencyStamp = "a14cbf9f-ab80-41c8-b092-3e4bb061a6a8",
                            CreatedAt = new DateTime(2024, 5, 4, 10, 23, 26, 576, DateTimeKind.Utc).AddTicks(2020),
                            Email = "Clemens81@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Clemens",
                            LastName = "Medhurst",
                            LockoutEnabled = false,
                            NormalizedEmail = "CLEMENS81@GMAIL.COM",
                            NormalizedUserName = "CLEMENS.MEDHURST",
                            PasswordHash = "AQAAAAIAAYagAAAAEOaQY/Pg2B2LTbB6joT6qxp/AEOt6d32hjVmDL78a1xowm97y76DAkLcnT8MA85oLw==",
                            PhoneNumber = "517-672-5566",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/210.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Clemens.Medhurst"
                        },
                        new
                        {
                            Id = 20,
                            AccessFailedCount = 0,
                            Address = "6793 Kirlin Junctions, Abshireview, Greenland",
                            ConcurrencyStamp = "377b1133-3f17-46c6-aaeb-21d33cc5dc62",
                            CreatedAt = new DateTime(2024, 1, 6, 10, 23, 26, 576, DateTimeKind.Utc).AddTicks(2401),
                            Email = "Mayra_Renner69@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Mayra",
                            LastName = "Renner",
                            LockoutEnabled = false,
                            NormalizedEmail = "MAYRA_RENNER69@HOTMAIL.COM",
                            NormalizedUserName = "MAYRA_RENNER54",
                            PasswordHash = "AQAAAAIAAYagAAAAEIX0IGfHO+P8vacGKBOQHnp8MPM+mwDDfuuGcE0+Asbb0ht5QhqQfTKBkQFAmLy7bQ==",
                            PhoneNumber = "430-817-3935",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/834.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Mayra_Renner54"
                        },
                        new
                        {
                            Id = 21,
                            AccessFailedCount = 0,
                            Address = "2181 Emie Key, West Donatobury, Cape Verde",
                            ConcurrencyStamp = "2add071a-eabf-4127-aa23-d14bcacc243b",
                            CreatedAt = new DateTime(2024, 7, 2, 10, 23, 26, 576, DateTimeKind.Utc).AddTicks(2742),
                            Email = "Everette2@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Everette",
                            LastName = "Hansen",
                            LockoutEnabled = false,
                            NormalizedEmail = "EVERETTE2@YAHOO.COM",
                            NormalizedUserName = "EVERETTE_HANSEN",
                            PasswordHash = "AQAAAAIAAYagAAAAEOjV8keGmEy9cgA8YGmb274T3yd/T3A9/kvVpAcWLF/TK+vuvTengKeo78Vojk6CCw==",
                            PhoneNumber = "020-054-8583",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/613.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Everette_Hansen"
                        },
                        new
                        {
                            Id = 22,
                            AccessFailedCount = 0,
                            Address = "0409 Nova Curve, New Madysonchester, Cambodia",
                            ConcurrencyStamp = "77a5ee7f-6153-45e8-8e81-e961e8465ba5",
                            CreatedAt = new DateTime(2024, 6, 5, 10, 23, 26, 576, DateTimeKind.Utc).AddTicks(3152),
                            Email = "Noe.Toy@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Noe",
                            LastName = "Toy",
                            LockoutEnabled = false,
                            NormalizedEmail = "NOE.TOY@GMAIL.COM",
                            NormalizedUserName = "NOE_TOY83",
                            PasswordHash = "AQAAAAIAAYagAAAAEEyuolzADRmiavbxFkGe7/xiU+bov22H70QCBL7Aq664Pn/rH/xHvPjeLg5FhcM5WQ==",
                            PhoneNumber = "825-036-8160",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/695.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Noe_Toy83"
                        },
                        new
                        {
                            Id = 23,
                            AccessFailedCount = 0,
                            Address = "44765 Schaefer Ridges, West Marianne, Wallis and Futuna",
                            ConcurrencyStamp = "853f3c57-c94e-42f7-a5e6-023b3d03a6d9",
                            CreatedAt = new DateTime(2024, 7, 12, 10, 23, 26, 576, DateTimeKind.Utc).AddTicks(3516),
                            Email = "Joshua_Frami@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Joshua",
                            LastName = "Frami",
                            LockoutEnabled = false,
                            NormalizedEmail = "JOSHUA_FRAMI@HOTMAIL.COM",
                            NormalizedUserName = "JOSHUA41",
                            PasswordHash = "AQAAAAIAAYagAAAAEDlqHn/7XNDHCpLrkPYX71YldYIhtdRF7UL0ozOmogzx7ns7kR72A7H0WptJanzpLA==",
                            PhoneNumber = "736-755-1856",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/881.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Joshua41"
                        },
                        new
                        {
                            Id = 24,
                            AccessFailedCount = 0,
                            Address = "565 Veum Trafficway, West Johnpaulborough, Suriname",
                            ConcurrencyStamp = "9be5880e-9aa7-48b8-8f88-52cfb646e912",
                            CreatedAt = new DateTime(2024, 6, 12, 10, 23, 26, 576, DateTimeKind.Utc).AddTicks(3998),
                            Email = "Karson_Considine81@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Karson",
                            LastName = "Considine",
                            LockoutEnabled = false,
                            NormalizedEmail = "KARSON_CONSIDINE81@YAHOO.COM",
                            NormalizedUserName = "KARSON_CONSIDINE",
                            PasswordHash = "AQAAAAIAAYagAAAAEJETRpdIzRyiNj7nSYliW1Qcu0URQ9ao0Ly/VEXLEGTlIZchZFebtANJRNQLVfS48A==",
                            PhoneNumber = "473-838-7757",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/599.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Karson_Considine"
                        },
                        new
                        {
                            Id = 25,
                            AccessFailedCount = 0,
                            Address = "0825 Alta Mountains, North Orlandoport, Sierra Leone",
                            ConcurrencyStamp = "b44bff68-8497-4e81-a9ce-dca99000a243",
                            CreatedAt = new DateTime(2024, 8, 13, 10, 23, 26, 576, DateTimeKind.Utc).AddTicks(4349),
                            Email = "Jovany_Wiza54@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Jovany",
                            LastName = "Wiza",
                            LockoutEnabled = false,
                            NormalizedEmail = "JOVANY_WIZA54@YAHOO.COM",
                            NormalizedUserName = "JOVANY_WIZA",
                            PasswordHash = "AQAAAAIAAYagAAAAEOk8kIJsfIVgrXIhBmO1Sjh+ii/wi9W2ovRw0OUKNq/EDJ2xxlT1E1IaoE3ZBuzBng==",
                            PhoneNumber = "477-732-4267",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/25.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Jovany_Wiza"
                        },
                        new
                        {
                            Id = 26,
                            AccessFailedCount = 0,
                            Address = "8321 Princess Prairie, Kutchmouth, Morocco",
                            ConcurrencyStamp = "6f5d099b-ba70-4866-8e45-3f8ae9941a56",
                            CreatedAt = new DateTime(2024, 11, 9, 10, 23, 26, 576, DateTimeKind.Utc).AddTicks(4804),
                            Email = "Monserrat_Cronin@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Monserrat",
                            LastName = "Cronin",
                            LockoutEnabled = false,
                            NormalizedEmail = "MONSERRAT_CRONIN@HOTMAIL.COM",
                            NormalizedUserName = "MONSERRAT.CRONIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEG75B02IqlBuMVXoDIaJpJ0yG1f75mwQZu9LnB9R5D8XVGulzs2FRQif8965wxr5Rw==",
                            PhoneNumber = "913-833-8927",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/596.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Monserrat.Cronin"
                        },
                        new
                        {
                            Id = 27,
                            AccessFailedCount = 0,
                            Address = "0679 Hirthe Wells, Mariambury, Solomon Islands",
                            ConcurrencyStamp = "e699644c-943c-4961-9615-436e2f4fe06c",
                            CreatedAt = new DateTime(2024, 5, 17, 10, 23, 26, 576, DateTimeKind.Utc).AddTicks(5132),
                            Email = "Twila.Gerhold83@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Twila",
                            LastName = "Gerhold",
                            LockoutEnabled = false,
                            NormalizedEmail = "TWILA.GERHOLD83@GMAIL.COM",
                            NormalizedUserName = "TWILA_GERHOLD69",
                            PasswordHash = "AQAAAAIAAYagAAAAEPv4poE4C0+M7bZLd4RposEWXqmspA3ACz/dn1jRtBqQ0VJcUED4bfFmI0difRNGvg==",
                            PhoneNumber = "828-445-5332",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/738.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Twila_Gerhold69"
                        },
                        new
                        {
                            Id = 28,
                            AccessFailedCount = 0,
                            Address = "378 Lemke Corners, Port Carolemouth, Russian Federation",
                            ConcurrencyStamp = "c8dc9ae6-4db1-4edb-aed8-feba2cf9fa09",
                            CreatedAt = new DateTime(2024, 2, 15, 10, 23, 26, 576, DateTimeKind.Utc).AddTicks(5507),
                            Email = "Jesse51@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Jesse",
                            LastName = "Torp",
                            LockoutEnabled = false,
                            NormalizedEmail = "JESSE51@HOTMAIL.COM",
                            NormalizedUserName = "JESSE_TORP25",
                            PasswordHash = "AQAAAAIAAYagAAAAEKBeqk1h8WbAXyZa3d6h7zYJipvFsYAVJMvLA3EPVYu0HIaDILLE4sJ1vHsln+go4A==",
                            PhoneNumber = "639-500-5739",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/74.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Jesse_Torp25"
                        },
                        new
                        {
                            Id = 29,
                            AccessFailedCount = 0,
                            Address = "7283 Bartoletti Neck, Prohaskaview, Papua New Guinea",
                            ConcurrencyStamp = "84bc906a-5140-4bf9-a100-27f6c2c5b13a",
                            CreatedAt = new DateTime(2024, 5, 23, 10, 23, 26, 576, DateTimeKind.Utc).AddTicks(5951),
                            Email = "Walton.Carroll54@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Walton",
                            LastName = "Carroll",
                            LockoutEnabled = false,
                            NormalizedEmail = "WALTON.CARROLL54@YAHOO.COM",
                            NormalizedUserName = "WALTON0",
                            PasswordHash = "AQAAAAIAAYagAAAAEIIm/x5R8YgOLVPDMzQDCu5wGgZKCJh5s+tWepDAtVzln6eelGi9ZseZYPeoAtxA7g==",
                            PhoneNumber = "668-556-3148",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/65.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Walton0"
                        },
                        new
                        {
                            Id = 30,
                            AccessFailedCount = 0,
                            Address = "46524 Robin Rapid, Larsonhaven, Turkmenistan",
                            ConcurrencyStamp = "982c9e43-318f-4fc5-8c81-31a0a20f9efa",
                            CreatedAt = new DateTime(2024, 12, 19, 10, 23, 26, 576, DateTimeKind.Utc).AddTicks(6421),
                            Email = "Pedro.Rempel@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Pedro",
                            LastName = "Rempel",
                            LockoutEnabled = false,
                            NormalizedEmail = "PEDRO.REMPEL@GMAIL.COM",
                            NormalizedUserName = "PEDRO.REMPEL",
                            PasswordHash = "AQAAAAIAAYagAAAAELg7tGW1p8MiuP8qZ41FJdTLo64dedrxgYXrSZIcHZCIcU8HkKRrIDcMdQBkP1kU+g==",
                            PhoneNumber = "187-955-1905",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/440.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Pedro.Rempel"
                        },
                        new
                        {
                            Id = 31,
                            AccessFailedCount = 0,
                            Address = "93454 Antonia Lock, Cheyenneland, Tajikistan",
                            ConcurrencyStamp = "4a4b71cf-8b8a-4aec-98ac-981cc34550b2",
                            CreatedAt = new DateTime(2023, 12, 31, 10, 23, 26, 576, DateTimeKind.Utc).AddTicks(6781),
                            Email = "Christian_Rosenbaum24@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Christian",
                            LastName = "Rosenbaum",
                            LockoutEnabled = false,
                            NormalizedEmail = "CHRISTIAN_ROSENBAUM24@HOTMAIL.COM",
                            NormalizedUserName = "CHRISTIAN.ROSENBAUM",
                            PasswordHash = "AQAAAAIAAYagAAAAEL0+7FimC6ItTxFy7uvltr6e8PiY5q5f96/70iRIDoyMq4fXqjZqQP1GWUdM9y3qiQ==",
                            PhoneNumber = "429-925-0484",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/882.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Christian.Rosenbaum"
                        },
                        new
                        {
                            Id = 32,
                            AccessFailedCount = 0,
                            Address = "257 Bianka Shoal, New Sarai, Rwanda",
                            ConcurrencyStamp = "ad2b26d7-cf13-4343-8674-cfa019e68b81",
                            CreatedAt = new DateTime(2024, 1, 27, 10, 23, 26, 576, DateTimeKind.Utc).AddTicks(7182),
                            Email = "Alexandro13@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Alexandro",
                            LastName = "Thiel",
                            LockoutEnabled = false,
                            NormalizedEmail = "ALEXANDRO13@GMAIL.COM",
                            NormalizedUserName = "ALEXANDRO47",
                            PasswordHash = "AQAAAAIAAYagAAAAEK0fWe8p03RQS3B4CghMIARo7cQbrHOUnDU1uh1FHa13JeOtFYFnajnwIIUHYc0ljg==",
                            PhoneNumber = "148-139-4768",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/10.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Alexandro47"
                        },
                        new
                        {
                            Id = 33,
                            AccessFailedCount = 0,
                            Address = "4950 Jay Courts, West Hermann, Haiti",
                            ConcurrencyStamp = "998dceeb-e706-4f41-b204-139b14f7c0e8",
                            CreatedAt = new DateTime(2024, 4, 12, 10, 23, 26, 576, DateTimeKind.Utc).AddTicks(8405),
                            Email = "Jayde_Weimann10@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Jayde",
                            LastName = "Weimann",
                            LockoutEnabled = false,
                            NormalizedEmail = "JAYDE_WEIMANN10@YAHOO.COM",
                            NormalizedUserName = "JAYDE.WEIMANN",
                            PasswordHash = "AQAAAAIAAYagAAAAEFT9IFpQeW7w2ZSapgmT4O5YiB2iczHcUf7NYcb7iKIPZ3DlaUxzdGikNGc3tnVt0Q==",
                            PhoneNumber = "698-232-7956",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/104.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Jayde.Weimann"
                        },
                        new
                        {
                            Id = 34,
                            AccessFailedCount = 0,
                            Address = "839 Kaylie Drives, West Damionville, Vietnam",
                            ConcurrencyStamp = "483662f6-957f-4c75-abc9-ac0cab319b28",
                            CreatedAt = new DateTime(2024, 5, 27, 10, 23, 26, 577, DateTimeKind.Utc).AddTicks(975),
                            Email = "Camren.Breitenberg88@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Camren",
                            LastName = "Breitenberg",
                            LockoutEnabled = false,
                            NormalizedEmail = "CAMREN.BREITENBERG88@GMAIL.COM",
                            NormalizedUserName = "CAMREN.BREITENBERG65",
                            PasswordHash = "AQAAAAIAAYagAAAAEFuGAGK5nbY3Vrc52co1UQVmHa3zzRLyr2TfbGFDP/9kYENPHv+yPM0nyNfo4irlfA==",
                            PhoneNumber = "355-276-3566",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/1131.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Camren.Breitenberg65"
                        },
                        new
                        {
                            Id = 35,
                            AccessFailedCount = 0,
                            Address = "56319 Borer Station, Faheyhaven, Reunion",
                            ConcurrencyStamp = "d3320232-1348-412c-9822-d5178ada9052",
                            CreatedAt = new DateTime(2024, 3, 31, 10, 23, 26, 577, DateTimeKind.Utc).AddTicks(3562),
                            Email = "Karson.Mitchell@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Karson",
                            LastName = "Mitchell",
                            LockoutEnabled = false,
                            NormalizedEmail = "KARSON.MITCHELL@YAHOO.COM",
                            NormalizedUserName = "KARSON_MITCHELL34",
                            PasswordHash = "AQAAAAIAAYagAAAAEPXt1ZteLI9NLeQ9snSIluJzdJMF8dh+fAOoO3jE9mleTIduOi7z32S2Uofo9YZODA==",
                            PhoneNumber = "083-903-6938",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/140.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Karson_Mitchell34"
                        },
                        new
                        {
                            Id = 36,
                            AccessFailedCount = 0,
                            Address = "70537 Amparo Shores, Bartonbury, Guadeloupe",
                            ConcurrencyStamp = "59efc1c4-e2bc-41aa-86c3-6c893d4793a0",
                            CreatedAt = new DateTime(2024, 8, 30, 10, 23, 26, 577, DateTimeKind.Utc).AddTicks(4578),
                            Email = "Kenya24@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Kenya",
                            LastName = "Fritsch",
                            LockoutEnabled = false,
                            NormalizedEmail = "KENYA24@GMAIL.COM",
                            NormalizedUserName = "KENYA_FRITSCH",
                            PasswordHash = "AQAAAAIAAYagAAAAEGS08Fgb3nxaUvlo4YQdLCfA739d7WrB4h105EPdWUI0vg1CSuxBCmIlz+RedXAC+g==",
                            PhoneNumber = "033-438-0902",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/909.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Kenya_Fritsch"
                        },
                        new
                        {
                            Id = 37,
                            AccessFailedCount = 0,
                            Address = "10268 Alva Ridge, Creolachester, Saint Kitts and Nevis",
                            ConcurrencyStamp = "3ea4eb69-ca8c-46aa-8d69-87b8fc94d76b",
                            CreatedAt = new DateTime(2024, 6, 8, 10, 23, 26, 577, DateTimeKind.Utc).AddTicks(4816),
                            Email = "Dayne.Kautzer21@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Dayne",
                            LastName = "Kautzer",
                            LockoutEnabled = false,
                            NormalizedEmail = "DAYNE.KAUTZER21@YAHOO.COM",
                            NormalizedUserName = "DAYNE9",
                            PasswordHash = "AQAAAAIAAYagAAAAEFVKe/S+P5C7nEivwvwGqsBIxi6mPuqbPZ6saExQSIuAPOyaCOq49tYprt3bgQKz1Q==",
                            PhoneNumber = "702-593-5064",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/1047.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Dayne9"
                        },
                        new
                        {
                            Id = 38,
                            AccessFailedCount = 0,
                            Address = "750 Lueilwitz Cliff, Kayleeside, Seychelles",
                            ConcurrencyStamp = "dcb8b053-7aa3-4ff2-89c0-e3eca1bb2bda",
                            CreatedAt = new DateTime(2024, 12, 21, 10, 23, 26, 577, DateTimeKind.Utc).AddTicks(5064),
                            Email = "Gage50@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Gage",
                            LastName = "Rutherford",
                            LockoutEnabled = false,
                            NormalizedEmail = "GAGE50@HOTMAIL.COM",
                            NormalizedUserName = "GAGE_RUTHERFORD",
                            PasswordHash = "AQAAAAIAAYagAAAAEP9NA/DWYqdyvl8nhBC4GqupNO6bKme/Om2SPiHriEF+7XVj0urTHKU8ZDCnooTuUQ==",
                            PhoneNumber = "884-618-3697",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/315.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Gage_Rutherford"
                        },
                        new
                        {
                            Id = 39,
                            AccessFailedCount = 0,
                            Address = "095 Olson Neck, Ryanland, Tajikistan",
                            ConcurrencyStamp = "fc9a8f29-ea77-44cc-90f5-e3cf2c81ed64",
                            CreatedAt = new DateTime(2024, 12, 1, 10, 23, 26, 577, DateTimeKind.Utc).AddTicks(5277),
                            Email = "Lilly_Lowe85@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Lilly",
                            LastName = "Lowe",
                            LockoutEnabled = false,
                            NormalizedEmail = "LILLY_LOWE85@GMAIL.COM",
                            NormalizedUserName = "LILLY59",
                            PasswordHash = "AQAAAAIAAYagAAAAEJHpJ7965Q/l/KrQEVeHTaubZJOmTd6F2xXsUMEDfJu5XQFkA6L5Boq/tRjFL9ECjg==",
                            PhoneNumber = "937-663-3131",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/1217.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Lilly59"
                        },
                        new
                        {
                            Id = 40,
                            AccessFailedCount = 0,
                            Address = "586 Kennedi Estates, Bethelland, Tajikistan",
                            ConcurrencyStamp = "8ce7a922-9bd8-4895-9b5c-e335d9163165",
                            CreatedAt = new DateTime(2024, 7, 21, 10, 23, 26, 577, DateTimeKind.Utc).AddTicks(5493),
                            Email = "Melany_Kling@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Melany",
                            LastName = "Kling",
                            LockoutEnabled = false,
                            NormalizedEmail = "MELANY_KLING@YAHOO.COM",
                            NormalizedUserName = "MELANY18",
                            PasswordHash = "AQAAAAIAAYagAAAAEMQteJ7qjzlQaK2OKIhePurRjlK2BFdGXL6ZtvogB2jfpgAoIwdTWppd+gFkHij5ww==",
                            PhoneNumber = "065-873-0719",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/594.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Melany18"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Address", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.User", "User")
                        .WithMany("Addresses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.BannerDetail", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Banner", "Banner")
                        .WithMany("BannerDetails")
                        .HasForeignKey("BannerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManboShopAPI.Domain.Entities.Product", "Product")
                        .WithMany("BannerDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Banner");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Cart", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("User");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.CartItem", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Cart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManboShopAPI.Domain.Entities.Product", "Product")
                        .WithMany("CartItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.CouponCondition", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Coupon", "Coupon")
                        .WithMany("CouponConditions")
                        .HasForeignKey("CouponId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Coupon");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Favorite", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Product", "Product")
                        .WithMany("Favorites")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManboShopAPI.Domain.Entities.User", "User")
                        .WithMany("Favorites")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Feedback", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Product", "Product")
                        .WithMany("Feedbacks")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManboShopAPI.Domain.Entities.User", "User")
                        .WithMany("Feedbacks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.NewsDetail", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.News", "News")
                        .WithMany("NewsDetails")
                        .HasForeignKey("NewsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManboShopAPI.Domain.Entities.Product", "Product")
                        .WithMany("NewsDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("News");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Order", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Coupon", "Coupon")
                        .WithMany("Orders")
                        .HasForeignKey("CouponId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ManboShopAPI.Domain.Entities.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Coupon");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.OrderDetail", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Coupon", "Coupon")
                        .WithMany("OrderDetails")
                        .HasForeignKey("CouponId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ManboShopAPI.Domain.Entities.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManboShopAPI.Domain.Entities.Product", "Product")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Coupon");

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Product", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ManboShopAPI.Domain.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Brand");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.ProductImage", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Product", "Product")
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManboShopAPI.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Banner", b =>
                {
                    b.Navigation("BannerDetails");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Brand", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Cart", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Coupon", b =>
                {
                    b.Navigation("CouponConditions");

                    b.Navigation("OrderDetails");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.News", b =>
                {
                    b.Navigation("NewsDetails");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Product", b =>
                {
                    b.Navigation("BannerDetails");

                    b.Navigation("CartItems");

                    b.Navigation("Favorites");

                    b.Navigation("Feedbacks");

                    b.Navigation("NewsDetails");

                    b.Navigation("OrderDetails");

                    b.Navigation("ProductImages");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.User", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Favorites");

                    b.Navigation("Feedbacks");

                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
