// <auto-generated />
using System;
using ManboShopAPI.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ManboShopAPI.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250207233250_AddVariantValueImagesTable")]
    partial class AddVariantValueImagesTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ManboShopAPI.Application.Services.VariantValueImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("VariantValueId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VariantValueId");

                    b.ToTable("VariantValueImages");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AddressLine")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Attributes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Attributes");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Banner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Banners");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.BannerDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BannerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BannerId");

                    b.HasIndex("ProductId");

                    b.ToTable("BannerDetails");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.CartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductVariantValueId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("ProductVariantValueId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("ParentCategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ParentCategoryId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Coupon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CurrentUsages")
                        .HasColumnType("int");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("MaxUsages")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Coupons");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.CouponCondition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Attribute")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("CouponId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DiscountAmount")
                        .HasColumnType("int");

                    b.Property<string>("Operator")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Value")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CouponId");

                    b.ToTable("CouponConditions");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Favorite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Favorites");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Star")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.FeedbackLike", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("FeedbackId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FeedbackId");

                    b.HasIndex("UserId");

                    b.ToTable("FeedbackLikes");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.FeedbackReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("FeedbackId")
                        .HasColumnType("int");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FeedbackId");

                    b.HasIndex("UserId");

                    b.ToTable("FeedbackReports");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.News", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("News");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.NewsDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("NewsId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("NewsId");

                    b.HasIndex("ProductId");

                    b.ToTable("NewsDetails");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CouponId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CouponId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.OrderDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CouponId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductVariantValueId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CouponId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductVariantValueId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BrandId")
                        .HasColumnType("int");

                    b.Property<int>("BuyTurn")
                        .HasColumnType("int");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("OldPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("SlugName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Specification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.ProductAttributeValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AttributeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AttributeId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductAttributeValues");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.ProductImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductImages");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.ProductVariantValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("OldPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("Sku")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductVariantValues");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfilePictureUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("VerificationCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("VerificationCodeExpiryTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            Address = "9674 Savannah Creek, North Mariehaven, Georgia",
                            ConcurrencyStamp = "8123372d-8af0-47ab-97a0-e7a18952f5b4",
                            CreatedAt = new DateTime(2024, 6, 20, 23, 32, 47, 845, DateTimeKind.Utc).AddTicks(9717),
                            Email = "Delfina.McCullough4@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Delfina",
                            LastName = "McCullough",
                            LockoutEnabled = false,
                            NormalizedEmail = "DELFINA.MCCULLOUGH4@HOTMAIL.COM",
                            NormalizedUserName = "DELFINA.MCCULLOUGH",
                            PasswordHash = "AQAAAAIAAYagAAAAEIYZpHq8a/vSMy9nhyQg9Bh1/DXBCsEH2Nhmb5W8xiWPVam6kHHu8bn0j9wKk7wVOw==",
                            PhoneNumber = "052-298-4170",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/1138.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Delfina.McCullough"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            Address = "5092 Johns Extension, Port Mireillestad, Estonia",
                            ConcurrencyStamp = "a57d057f-7406-4353-be6c-d5d425e66cbf",
                            CreatedAt = new DateTime(2024, 11, 1, 23, 32, 47, 847, DateTimeKind.Utc).AddTicks(3036),
                            Email = "Ashleigh.White@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Ashleigh",
                            LastName = "White",
                            LockoutEnabled = false,
                            NormalizedEmail = "ASHLEIGH.WHITE@HOTMAIL.COM",
                            NormalizedUserName = "ASHLEIGH_WHITE",
                            PasswordHash = "AQAAAAIAAYagAAAAEO1YhQJOYKWkPVBA/ISKUQKwQgjGw1fLb8wAwLJ9Qr/jjzrc6RwoDulN+psOsYfBZQ==",
                            PhoneNumber = "811-835-4498",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/125.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Ashleigh_White"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            Address = "2006 Veum Prairie, Isabellashire, Montenegro",
                            ConcurrencyStamp = "0b01f792-64f9-40d4-a280-b43f8c01b861",
                            CreatedAt = new DateTime(2024, 5, 22, 23, 32, 47, 847, DateTimeKind.Utc).AddTicks(3387),
                            Email = "Guy.Stehr88@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Guy",
                            LastName = "Stehr",
                            LockoutEnabled = false,
                            NormalizedEmail = "GUY.STEHR88@HOTMAIL.COM",
                            NormalizedUserName = "GUY.STEHR0",
                            PasswordHash = "AQAAAAIAAYagAAAAEFWKp7K2mTlAWa2e6ebNftGlnIavYgMCognSKoY23vchPh6PbXIwmpaLYjoX4dOR8A==",
                            PhoneNumber = "289-568-1035",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/136.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Guy.Stehr0"
                        },
                        new
                        {
                            Id = 4,
                            AccessFailedCount = 0,
                            Address = "6047 Heidenreich Viaduct, East Breanne, Burundi",
                            ConcurrencyStamp = "b0387a9b-03b6-488e-a2d1-ee4383b6339b",
                            CreatedAt = new DateTime(2024, 10, 9, 23, 32, 47, 847, DateTimeKind.Utc).AddTicks(3630),
                            Email = "Foster78@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Foster",
                            LastName = "Marquardt",
                            LockoutEnabled = false,
                            NormalizedEmail = "FOSTER78@HOTMAIL.COM",
                            NormalizedUserName = "FOSTER44",
                            PasswordHash = "AQAAAAIAAYagAAAAEPo+oDV+TM0xPcLI85OXvk3FzxKWapCaPYl/qwZJ6yRLs48+jwaTtIgT4wT/w7PKsA==",
                            PhoneNumber = "254-242-0600",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/16.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Foster44"
                        },
                        new
                        {
                            Id = 5,
                            AccessFailedCount = 0,
                            Address = "397 Sawayn Highway, Lake Halle, Saint Pierre and Miquelon",
                            ConcurrencyStamp = "9f4db71f-2edd-4437-aeef-067b21157b4a",
                            CreatedAt = new DateTime(2024, 11, 6, 23, 32, 47, 847, DateTimeKind.Utc).AddTicks(3953),
                            Email = "Adelbert17@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Adelbert",
                            LastName = "Lueilwitz",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADELBERT17@HOTMAIL.COM",
                            NormalizedUserName = "ADELBERT.LUEILWITZ",
                            PasswordHash = "AQAAAAIAAYagAAAAELCOL5EsIYoyWtZxNM6BFV4J+nS9avYHPYBvOfYzYpmXQo/R7Ilfysww/i0aEs4OaQ==",
                            PhoneNumber = "460-968-5330",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/1071.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Adelbert.Lueilwitz"
                        },
                        new
                        {
                            Id = 6,
                            AccessFailedCount = 0,
                            Address = "631 Kautzer Corner, Botsfordville, Bahamas",
                            ConcurrencyStamp = "af355c3c-d7a9-4b28-a77d-ed3e21fd9cce",
                            CreatedAt = new DateTime(2024, 12, 20, 23, 32, 47, 847, DateTimeKind.Utc).AddTicks(4207),
                            Email = "Elyse24@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Elyse",
                            LastName = "Nitzsche",
                            LockoutEnabled = false,
                            NormalizedEmail = "ELYSE24@GMAIL.COM",
                            NormalizedUserName = "ELYSE.NITZSCHE30",
                            PasswordHash = "AQAAAAIAAYagAAAAEABTWOKF+OV4n5XffsSS7pHiMtPFrPwFcRkCoLexE7DFHJ7yA9p4cOJV1HPGBwPoaw==",
                            PhoneNumber = "008-502-0775",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/476.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Elyse.Nitzsche30"
                        },
                        new
                        {
                            Id = 7,
                            AccessFailedCount = 0,
                            Address = "288 Donnelly Trafficway, North Juliusport, Togo",
                            ConcurrencyStamp = "1a2ef54c-de22-42d7-8332-74fba604fc54",
                            CreatedAt = new DateTime(2025, 1, 27, 23, 32, 47, 847, DateTimeKind.Utc).AddTicks(4477),
                            Email = "Eugenia.Wisoky@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Eugenia",
                            LastName = "Wisoky",
                            LockoutEnabled = false,
                            NormalizedEmail = "EUGENIA.WISOKY@HOTMAIL.COM",
                            NormalizedUserName = "EUGENIA11",
                            PasswordHash = "AQAAAAIAAYagAAAAEFKO7XeuvexQdUcj3mMOz+oWjUtj3xMf9ZFycMMzLuYVcXU37VQJUduvM+z3gRwbkw==",
                            PhoneNumber = "549-215-8754",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/1111.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Eugenia11"
                        },
                        new
                        {
                            Id = 8,
                            AccessFailedCount = 0,
                            Address = "33195 Carroll Mews, East Boborough, French Guiana",
                            ConcurrencyStamp = "58cecc50-bf25-4c2b-8edd-7d352e6f602f",
                            CreatedAt = new DateTime(2024, 11, 12, 23, 32, 47, 847, DateTimeKind.Utc).AddTicks(4737),
                            Email = "Chadrick15@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Chadrick",
                            LastName = "Gerlach",
                            LockoutEnabled = false,
                            NormalizedEmail = "CHADRICK15@YAHOO.COM",
                            NormalizedUserName = "CHADRICK.GERLACH",
                            PasswordHash = "AQAAAAIAAYagAAAAEFlEpediQLREhWipRfZvtg/Vhsy09yGV6T423oPiKL1sa5FwWKEa6r7Qp6CNiKmitw==",
                            PhoneNumber = "455-079-1239",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/1036.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Chadrick.Gerlach"
                        },
                        new
                        {
                            Id = 9,
                            AccessFailedCount = 0,
                            Address = "136 Nolan Port, Cheyenneberg, Namibia",
                            ConcurrencyStamp = "519ef944-6006-4ba6-abbb-36bcf2f03e0f",
                            CreatedAt = new DateTime(2024, 3, 3, 23, 32, 47, 847, DateTimeKind.Utc).AddTicks(4938),
                            Email = "Adrianna11@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Adrianna",
                            LastName = "Fahey",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADRIANNA11@GMAIL.COM",
                            NormalizedUserName = "ADRIANNA.FAHEY84",
                            PasswordHash = "AQAAAAIAAYagAAAAEPfSt0LSk0HjkwBL0zHykQb1x90m0DPJjiKTkU5HrlyQD1taxRX5oY8OCrUDIySARA==",
                            PhoneNumber = "203-843-2418",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/294.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Adrianna.Fahey84"
                        },
                        new
                        {
                            Id = 10,
                            AccessFailedCount = 0,
                            Address = "54320 Jordy Oval, New Linneaview, El Salvador",
                            ConcurrencyStamp = "a483ff1c-174c-4048-ae45-c32042a6ddb2",
                            CreatedAt = new DateTime(2024, 8, 30, 23, 32, 47, 847, DateTimeKind.Utc).AddTicks(5202),
                            Email = "Pierre.Yost@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Pierre",
                            LastName = "Yost",
                            LockoutEnabled = false,
                            NormalizedEmail = "PIERRE.YOST@GMAIL.COM",
                            NormalizedUserName = "PIERRE_YOST59",
                            PasswordHash = "AQAAAAIAAYagAAAAEFv833AYJS4m8UY4CMJwHkjIaEduxubdw/h5OyDb6QyfTtueVfwEsw1OX28cKP+P7Q==",
                            PhoneNumber = "715-174-8039",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/819.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Pierre_Yost59"
                        },
                        new
                        {
                            Id = 11,
                            AccessFailedCount = 0,
                            Address = "18658 Mariela Station, Lake Caitlyn, Tonga",
                            ConcurrencyStamp = "44faf38e-fee9-4d0e-b08d-1ed89869e83d",
                            CreatedAt = new DateTime(2024, 7, 2, 23, 32, 47, 847, DateTimeKind.Utc).AddTicks(5410),
                            Email = "Malinda29@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Malinda",
                            LastName = "Schaden",
                            LockoutEnabled = false,
                            NormalizedEmail = "MALINDA29@YAHOO.COM",
                            NormalizedUserName = "MALINDA.SCHADEN",
                            PasswordHash = "AQAAAAIAAYagAAAAELVO7caoF6GasctwveQxckmgJrspVXNGDGqTHMcn8YMD8khJgTjsNoI4IlnkdxlRPg==",
                            PhoneNumber = "205-310-3575",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/985.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Malinda.Schaden"
                        },
                        new
                        {
                            Id = 12,
                            AccessFailedCount = 0,
                            Address = "8870 Jaida Centers, East Estevanhaven, Zimbabwe",
                            ConcurrencyStamp = "2cc84c0b-e43b-4679-beff-c2337b17b268",
                            CreatedAt = new DateTime(2024, 7, 20, 23, 32, 47, 847, DateTimeKind.Utc).AddTicks(5647),
                            Email = "Sigmund.Emard25@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Sigmund",
                            LastName = "Emard",
                            LockoutEnabled = false,
                            NormalizedEmail = "SIGMUND.EMARD25@HOTMAIL.COM",
                            NormalizedUserName = "SIGMUND63",
                            PasswordHash = "AQAAAAIAAYagAAAAEF+73Y4Rj5VEZ+0KcYlnI54cXtpWlx3RsfqwwPZsAm+0Q2aTDQDmqG+rXfw6kNFNwQ==",
                            PhoneNumber = "647-798-0157",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/1057.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Sigmund63"
                        },
                        new
                        {
                            Id = 13,
                            AccessFailedCount = 0,
                            Address = "8405 Grover Dale, North Terrenceport, Malaysia",
                            ConcurrencyStamp = "c1fb6242-e5ac-4561-8111-be5be1f70ab9",
                            CreatedAt = new DateTime(2024, 4, 4, 23, 32, 47, 847, DateTimeKind.Utc).AddTicks(5867),
                            Email = "Harley86@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Harley",
                            LastName = "Collier",
                            LockoutEnabled = false,
                            NormalizedEmail = "HARLEY86@YAHOO.COM",
                            NormalizedUserName = "HARLEY_COLLIER",
                            PasswordHash = "AQAAAAIAAYagAAAAEO9ehHXR6CPx0sZ5OLnOPO3YOPhAa4OV9VJGIn/X1FIVjiwpJ8whbEln0KI/AAM+oQ==",
                            PhoneNumber = "878-290-7570",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/634.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Harley_Collier"
                        },
                        new
                        {
                            Id = 14,
                            AccessFailedCount = 0,
                            Address = "63604 Karl Branch, Ziemefort, New Zealand",
                            ConcurrencyStamp = "3a5c6c81-2524-4f9a-91e1-d01a3957af0c",
                            CreatedAt = new DateTime(2024, 6, 6, 23, 32, 47, 847, DateTimeKind.Utc).AddTicks(6097),
                            Email = "Alisa_Powlowski@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Alisa",
                            LastName = "Powlowski",
                            LockoutEnabled = false,
                            NormalizedEmail = "ALISA_POWLOWSKI@GMAIL.COM",
                            NormalizedUserName = "ALISA.POWLOWSKI72",
                            PasswordHash = "AQAAAAIAAYagAAAAEMhLLbceJ37ECpNtCSmsvwf4g7T4J9MRQ3lZSMb5KCY63sEhOVzaoBAzJj2EFNoGwg==",
                            PhoneNumber = "751-064-2655",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/982.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Alisa.Powlowski72"
                        },
                        new
                        {
                            Id = 15,
                            AccessFailedCount = 0,
                            Address = "2931 Weber Flat, New Otha, Tokelau",
                            ConcurrencyStamp = "d770ae5c-db10-475d-96fb-47d4ed20be6b",
                            CreatedAt = new DateTime(2024, 7, 11, 23, 32, 47, 847, DateTimeKind.Utc).AddTicks(6319),
                            Email = "Emmett_Bartoletti70@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Emmett",
                            LastName = "Bartoletti",
                            LockoutEnabled = false,
                            NormalizedEmail = "EMMETT_BARTOLETTI70@YAHOO.COM",
                            NormalizedUserName = "EMMETT.BARTOLETTI91",
                            PasswordHash = "AQAAAAIAAYagAAAAELyplYQvN1IU5d1KBgFmhMYiaZemk5IuHXCDEcQ8IuzTCJh2U70U9a6e5ug7VcZ3cg==",
                            PhoneNumber = "861-996-2495",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/362.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Emmett.Bartoletti91"
                        },
                        new
                        {
                            Id = 16,
                            AccessFailedCount = 0,
                            Address = "8946 Charlie Wall, Port Justynton, Iran",
                            ConcurrencyStamp = "aa372bf2-1d14-4e3e-9cc4-75c8f5e0a984",
                            CreatedAt = new DateTime(2025, 2, 2, 23, 32, 47, 847, DateTimeKind.Utc).AddTicks(6586),
                            Email = "Braeden60@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Braeden",
                            LastName = "Lynch",
                            LockoutEnabled = false,
                            NormalizedEmail = "BRAEDEN60@HOTMAIL.COM",
                            NormalizedUserName = "BRAEDEN.LYNCH51",
                            PasswordHash = "AQAAAAIAAYagAAAAEKy7HztzqUNR/DVYsgeAGCvw2ZSENVnHr5PK3B1s5Xz2dgu/98hd2/KzOvL5+PL2sA==",
                            PhoneNumber = "513-271-4971",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/977.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Braeden.Lynch51"
                        },
                        new
                        {
                            Id = 17,
                            AccessFailedCount = 0,
                            Address = "0133 Altenwerth Rest, North Antonette, Moldova",
                            ConcurrencyStamp = "808c8d8f-74b4-4571-969a-6cbecfba769c",
                            CreatedAt = new DateTime(2024, 8, 16, 23, 32, 47, 847, DateTimeKind.Utc).AddTicks(6788),
                            Email = "Marcelle66@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Marcelle",
                            LastName = "Wiza",
                            LockoutEnabled = false,
                            NormalizedEmail = "MARCELLE66@HOTMAIL.COM",
                            NormalizedUserName = "MARCELLE53",
                            PasswordHash = "AQAAAAIAAYagAAAAENNK+JwmJrU8S9JjhREDuM7zGVK6n0cPbWT0NnWxMTX5jn0rlSZEG6AKxTzuk4QYHQ==",
                            PhoneNumber = "616-278-4206",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/746.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Marcelle53"
                        },
                        new
                        {
                            Id = 18,
                            AccessFailedCount = 0,
                            Address = "64534 Hodkiewicz Track, North Alexandroborough, Iceland",
                            ConcurrencyStamp = "f895c597-3e2e-47a4-8943-f6cc10e0569d",
                            CreatedAt = new DateTime(2024, 8, 13, 23, 32, 47, 847, DateTimeKind.Utc).AddTicks(7016),
                            Email = "Foster85@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Foster",
                            LastName = "West",
                            LockoutEnabled = false,
                            NormalizedEmail = "FOSTER85@HOTMAIL.COM",
                            NormalizedUserName = "FOSTER_WEST",
                            PasswordHash = "AQAAAAIAAYagAAAAEG6e3y3r1KrwHG6Vrmat9G6vbbDF6/Bw9G4MvL3Xnpfg12zg9623MKjRymAremtfVQ==",
                            PhoneNumber = "665-643-6722",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/501.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Foster_West"
                        },
                        new
                        {
                            Id = 19,
                            AccessFailedCount = 0,
                            Address = "832 Melisa Locks, South Joany, Jordan",
                            ConcurrencyStamp = "5aa42781-f5eb-47a4-9c19-9a96ef72eac9",
                            CreatedAt = new DateTime(2024, 9, 17, 23, 32, 47, 847, DateTimeKind.Utc).AddTicks(7226),
                            Email = "Hector41@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Hector",
                            LastName = "O'Connell",
                            LockoutEnabled = false,
                            NormalizedEmail = "HECTOR41@GMAIL.COM",
                            NormalizedUserName = "HECTOR0",
                            PasswordHash = "AQAAAAIAAYagAAAAELRCiUNIs/bhSe+oQNovE6LW/ZfWTtKjfrtKU3cdJA6egkS1ivP7feE3gFVO4hgP0A==",
                            PhoneNumber = "555-561-6391",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/33.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Hector0"
                        },
                        new
                        {
                            Id = 20,
                            AccessFailedCount = 0,
                            Address = "6467 Roberto Plains, South Karlie, Mexico",
                            ConcurrencyStamp = "b73eeb88-5c0c-416e-a9d4-45d008e54dcd",
                            CreatedAt = new DateTime(2024, 7, 20, 23, 32, 47, 848, DateTimeKind.Utc).AddTicks(3149),
                            Email = "Presley97@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Presley",
                            LastName = "O'Hara",
                            LockoutEnabled = false,
                            NormalizedEmail = "PRESLEY97@HOTMAIL.COM",
                            NormalizedUserName = "PRESLEY.OHARA",
                            PasswordHash = "AQAAAAIAAYagAAAAEOBgt/RBcnxY/D1pcWDPany3tYmeigbl2BgoRBFUYfEW7rESeVYnbXWYMzLSdGoJBg==",
                            PhoneNumber = "938-911-4032",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/616.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Presley.OHara"
                        },
                        new
                        {
                            Id = 21,
                            AccessFailedCount = 0,
                            Address = "66121 Hayes Loaf, Lilianachester, Ukraine",
                            ConcurrencyStamp = "531e9d6c-8256-461b-9020-c9a91cf60203",
                            CreatedAt = new DateTime(2024, 6, 4, 23, 32, 47, 848, DateTimeKind.Utc).AddTicks(3489),
                            Email = "Cassandre.Quitzon@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Cassandre",
                            LastName = "Quitzon",
                            LockoutEnabled = false,
                            NormalizedEmail = "CASSANDRE.QUITZON@HOTMAIL.COM",
                            NormalizedUserName = "CASSANDRE.QUITZON52",
                            PasswordHash = "AQAAAAIAAYagAAAAEEK1dJSeCdPFH4mvFwzgximVDPYSQhNA/7zEfjpZEIp0/BMKreyvBp1RXvycIaozsA==",
                            PhoneNumber = "791-713-4215",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/877.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Cassandre.Quitzon52"
                        },
                        new
                        {
                            Id = 22,
                            AccessFailedCount = 0,
                            Address = "15327 Tracy Forges, Pourosberg, Paraguay",
                            ConcurrencyStamp = "387766c0-d49d-49ec-b863-04d6aba797e7",
                            CreatedAt = new DateTime(2024, 12, 13, 23, 32, 47, 848, DateTimeKind.Utc).AddTicks(3745),
                            Email = "Reina_Cummings87@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Reina",
                            LastName = "Cummings",
                            LockoutEnabled = false,
                            NormalizedEmail = "REINA_CUMMINGS87@YAHOO.COM",
                            NormalizedUserName = "REINA7",
                            PasswordHash = "AQAAAAIAAYagAAAAEOUxYYHDhiW2qL2afggfC7X1hNmHgYpC5H2rRaGaqwptOT2lHGAtrj5gjxBJaySuhQ==",
                            PhoneNumber = "239-500-1244",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/567.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Reina7"
                        },
                        new
                        {
                            Id = 23,
                            AccessFailedCount = 0,
                            Address = "0049 Howell Valleys, Rodriguezborough, Lithuania",
                            ConcurrencyStamp = "412f7203-8690-48e2-a6d2-81d0ced903d2",
                            CreatedAt = new DateTime(2024, 9, 12, 23, 32, 47, 848, DateTimeKind.Utc).AddTicks(4002),
                            Email = "Wendy.Erdman@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Wendy",
                            LastName = "Erdman",
                            LockoutEnabled = false,
                            NormalizedEmail = "WENDY.ERDMAN@YAHOO.COM",
                            NormalizedUserName = "WENDY.ERDMAN8",
                            PasswordHash = "AQAAAAIAAYagAAAAEN+c/L2kmi9PL3Pxd+/B7JeBfDlJCNn/igUQTZF9KsAjp885lCDR2/zP5wr1dUrYlA==",
                            PhoneNumber = "479-209-4754",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/825.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Wendy.Erdman8"
                        },
                        new
                        {
                            Id = 24,
                            AccessFailedCount = 0,
                            Address = "656 Hartmann Knoll, Brendenview, Slovakia (Slovak Republic)",
                            ConcurrencyStamp = "9a1dbb4e-99bd-422c-bbcd-24f46888b72a",
                            CreatedAt = new DateTime(2024, 11, 14, 23, 32, 47, 848, DateTimeKind.Utc).AddTicks(4214),
                            Email = "Parker76@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Parker",
                            LastName = "Dibbert",
                            LockoutEnabled = false,
                            NormalizedEmail = "PARKER76@YAHOO.COM",
                            NormalizedUserName = "PARKER67",
                            PasswordHash = "AQAAAAIAAYagAAAAEKDosb+av6v42l2nv0XS37mk7F/QfPiE6oahKP0jAgsxiI8OPeMiGi3mJrD85rQ6TQ==",
                            PhoneNumber = "513-204-7742",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/216.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Parker67"
                        },
                        new
                        {
                            Id = 25,
                            AccessFailedCount = 0,
                            Address = "42533 Madilyn Prairie, Pierceberg, Liechtenstein",
                            ConcurrencyStamp = "d11db386-ff98-4b05-aaa8-a924c45f4331",
                            CreatedAt = new DateTime(2024, 6, 2, 23, 32, 47, 848, DateTimeKind.Utc).AddTicks(4443),
                            Email = "Lucius_Koss@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Lucius",
                            LastName = "Koss",
                            LockoutEnabled = false,
                            NormalizedEmail = "LUCIUS_KOSS@GMAIL.COM",
                            NormalizedUserName = "LUCIUS_KOSS13",
                            PasswordHash = "AQAAAAIAAYagAAAAEPoKiVOVutrNdjbOhbldzZToZ4uHY4CKoSezBPW7gvutK/nF2D058E1Ng+bbJ17OgQ==",
                            PhoneNumber = "965-451-5096",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/549.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Lucius_Koss13"
                        },
                        new
                        {
                            Id = 26,
                            AccessFailedCount = 0,
                            Address = "31309 Blanda Village, West Clarabelle, Angola",
                            ConcurrencyStamp = "ebc3607d-d2cc-4406-acd0-43bee620884a",
                            CreatedAt = new DateTime(2024, 7, 25, 23, 32, 47, 848, DateTimeKind.Utc).AddTicks(4696),
                            Email = "Cordelia56@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Cordelia",
                            LastName = "Emard",
                            LockoutEnabled = false,
                            NormalizedEmail = "CORDELIA56@GMAIL.COM",
                            NormalizedUserName = "CORDELIA82",
                            PasswordHash = "AQAAAAIAAYagAAAAEMlUkHMY5HVnRQZZY6ExRe+QJvzshzwO/d1D5zjqP6z44MZGUHwVDhgKQivA3iX7Fw==",
                            PhoneNumber = "524-127-2704",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/770.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Cordelia82"
                        },
                        new
                        {
                            Id = 27,
                            AccessFailedCount = 0,
                            Address = "53961 Norma Unions, Kunzemouth, Cambodia",
                            ConcurrencyStamp = "2db6008c-b984-4b2a-a5bf-c79236294ad1",
                            CreatedAt = new DateTime(2025, 1, 13, 23, 32, 47, 848, DateTimeKind.Utc).AddTicks(4941),
                            Email = "Wilma_Gaylord51@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Wilma",
                            LastName = "Gaylord",
                            LockoutEnabled = false,
                            NormalizedEmail = "WILMA_GAYLORD51@HOTMAIL.COM",
                            NormalizedUserName = "WILMA22",
                            PasswordHash = "AQAAAAIAAYagAAAAEEIn57cxje6Bfz/mq7mwJbIDozbDs2h+rc8o1kRF7GyylAtY/8uuv1Rk9twG48vSow==",
                            PhoneNumber = "196-958-7518",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/566.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Wilma22"
                        },
                        new
                        {
                            Id = 28,
                            AccessFailedCount = 0,
                            Address = "36696 Alessia Lock, Nannieside, Slovakia (Slovak Republic)",
                            ConcurrencyStamp = "8a905185-a306-4a91-90d7-4e02ddac9c4e",
                            CreatedAt = new DateTime(2024, 5, 29, 23, 32, 47, 848, DateTimeKind.Utc).AddTicks(5182),
                            Email = "Margarette_Cummerata57@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Margarette",
                            LastName = "Cummerata",
                            LockoutEnabled = false,
                            NormalizedEmail = "MARGARETTE_CUMMERATA57@GMAIL.COM",
                            NormalizedUserName = "MARGARETTE.CUMMERATA",
                            PasswordHash = "AQAAAAIAAYagAAAAEBeaC8Ng40Hj31j3M8ROVQvKz/M/CEJpJcumgRp0/Qu0X0h7hlxzc1V6ooBb88R6RA==",
                            PhoneNumber = "047-753-6261",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/60.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Margarette.Cummerata"
                        },
                        new
                        {
                            Id = 29,
                            AccessFailedCount = 0,
                            Address = "873 Francisca Inlet, New Jeanne, Cocos (Keeling) Islands",
                            ConcurrencyStamp = "456658a2-dbac-466a-b320-bbed253a99c5",
                            CreatedAt = new DateTime(2024, 10, 17, 23, 32, 47, 848, DateTimeKind.Utc).AddTicks(5420),
                            Email = "Jannie47@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Jannie",
                            LastName = "Bogan",
                            LockoutEnabled = false,
                            NormalizedEmail = "JANNIE47@GMAIL.COM",
                            NormalizedUserName = "JANNIE.BOGAN",
                            PasswordHash = "AQAAAAIAAYagAAAAEOuUIaWwKwuMDV5pWPy+L7oRVDx6/XkIeVi2J5MDzS8yGmMm4Wxl4XrN2Q+lSt132Q==",
                            PhoneNumber = "452-171-3976",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/618.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Jannie.Bogan"
                        },
                        new
                        {
                            Id = 30,
                            AccessFailedCount = 0,
                            Address = "69890 Jailyn Skyway, New Quinnside, French Polynesia",
                            ConcurrencyStamp = "7197dfda-c049-4551-9f30-bae931b874fe",
                            CreatedAt = new DateTime(2024, 9, 8, 23, 32, 47, 848, DateTimeKind.Utc).AddTicks(5632),
                            Email = "Larry_Torphy@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Larry",
                            LastName = "Torphy",
                            LockoutEnabled = false,
                            NormalizedEmail = "LARRY_TORPHY@YAHOO.COM",
                            NormalizedUserName = "LARRY11",
                            PasswordHash = "AQAAAAIAAYagAAAAEFSBW0tuDrVYBH/n+QEV9Qm9ItjDp7aN6urPVGTVnHFehsI/UMJcSh0eTc3kpSjmBA==",
                            PhoneNumber = "638-863-0734",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/222.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Larry11"
                        },
                        new
                        {
                            Id = 31,
                            AccessFailedCount = 0,
                            Address = "8337 Troy Forge, West Chaz, Falkland Islands (Malvinas)",
                            ConcurrencyStamp = "8572ac91-434c-4bb7-90ea-b929adda0651",
                            CreatedAt = new DateTime(2024, 3, 1, 23, 32, 47, 848, DateTimeKind.Utc).AddTicks(5861),
                            Email = "Toni_Barton@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Toni",
                            LastName = "Barton",
                            LockoutEnabled = false,
                            NormalizedEmail = "TONI_BARTON@YAHOO.COM",
                            NormalizedUserName = "TONI.BARTON",
                            PasswordHash = "AQAAAAIAAYagAAAAEJ6yqT0l7Rn4EMyqKLDwfsKVWJ7LYML0xFsGSraYbil0PZ7FZm884v0jDeC+SYUjhA==",
                            PhoneNumber = "792-916-9722",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/601.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Toni.Barton"
                        },
                        new
                        {
                            Id = 32,
                            AccessFailedCount = 0,
                            Address = "6011 Klocko Square, Port Edgar, Guinea-Bissau",
                            ConcurrencyStamp = "64474711-57a6-4281-a24a-8ab9c91cf04b",
                            CreatedAt = new DateTime(2024, 10, 17, 23, 32, 47, 848, DateTimeKind.Utc).AddTicks(6078),
                            Email = "Marilyne_Kunde41@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Marilyne",
                            LastName = "Kunde",
                            LockoutEnabled = false,
                            NormalizedEmail = "MARILYNE_KUNDE41@YAHOO.COM",
                            NormalizedUserName = "MARILYNE.KUNDE",
                            PasswordHash = "AQAAAAIAAYagAAAAEO/jVqEsHVztp7JJxgeQ6WByfgZcApiE9HK67empiE2HIccLIUkqabn+6M6L+EOCLg==",
                            PhoneNumber = "888-402-2157",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/1189.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Marilyne.Kunde"
                        },
                        new
                        {
                            Id = 33,
                            AccessFailedCount = 0,
                            Address = "01208 Brittany Point, Lynchview, Saint Kitts and Nevis",
                            ConcurrencyStamp = "69836ab5-cb34-4681-8b39-63a80aefa97d",
                            CreatedAt = new DateTime(2024, 3, 24, 23, 32, 47, 848, DateTimeKind.Utc).AddTicks(6328),
                            Email = "Marjory_McLaughlin24@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Marjory",
                            LastName = "McLaughlin",
                            LockoutEnabled = false,
                            NormalizedEmail = "MARJORY_MCLAUGHLIN24@YAHOO.COM",
                            NormalizedUserName = "MARJORY_MCLAUGHLIN58",
                            PasswordHash = "AQAAAAIAAYagAAAAEJJ7pfsurZjmEs2aRpCHckygaMgng3pypZi4SFBg+FIZ8arjPZTKJXCb30IzuBO4vg==",
                            PhoneNumber = "396-502-4549",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/979.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Marjory_McLaughlin58"
                        },
                        new
                        {
                            Id = 34,
                            AccessFailedCount = 0,
                            Address = "61895 Hahn Coves, South Estamouth, Austria",
                            ConcurrencyStamp = "8c3c397d-d04a-4e8f-ab54-2802d2258d23",
                            CreatedAt = new DateTime(2024, 9, 19, 23, 32, 47, 848, DateTimeKind.Utc).AddTicks(6586),
                            Email = "Kristian_Stiedemann90@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Kristian",
                            LastName = "Stiedemann",
                            LockoutEnabled = false,
                            NormalizedEmail = "KRISTIAN_STIEDEMANN90@HOTMAIL.COM",
                            NormalizedUserName = "KRISTIAN62",
                            PasswordHash = "AQAAAAIAAYagAAAAEOcssQRESng9OkndC5NttskP8lXXEoFOo4jWXGyWosq6jBDwzfiolW+TjvoNY9GCzg==",
                            PhoneNumber = "424-163-1473",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/644.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Kristian62"
                        },
                        new
                        {
                            Id = 35,
                            AccessFailedCount = 0,
                            Address = "439 Purdy Throughway, Lake Stonemouth, Indonesia",
                            ConcurrencyStamp = "fcd886c1-043c-432e-9798-e86310b1d8bc",
                            CreatedAt = new DateTime(2024, 10, 31, 23, 32, 47, 848, DateTimeKind.Utc).AddTicks(6812),
                            Email = "Lauretta_Price42@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Lauretta",
                            LastName = "Price",
                            LockoutEnabled = false,
                            NormalizedEmail = "LAURETTA_PRICE42@GMAIL.COM",
                            NormalizedUserName = "LAURETTA75",
                            PasswordHash = "AQAAAAIAAYagAAAAEMMs7zvSqJOkaYcfs4CBVaqxSLKCMgNDscoimvN3M5Ts8YjpYzci/mgju/S/gt5Lnw==",
                            PhoneNumber = "753-892-5754",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/1051.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Lauretta75"
                        },
                        new
                        {
                            Id = 36,
                            AccessFailedCount = 0,
                            Address = "30982 Joel Oval, Dickiport, Andorra",
                            ConcurrencyStamp = "23f38c6d-cee3-43bf-9905-3ec5cd58576e",
                            CreatedAt = new DateTime(2024, 10, 20, 23, 32, 47, 848, DateTimeKind.Utc).AddTicks(7032),
                            Email = "Oma71@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Oma",
                            LastName = "Howe",
                            LockoutEnabled = false,
                            NormalizedEmail = "OMA71@HOTMAIL.COM",
                            NormalizedUserName = "OMA87",
                            PasswordHash = "AQAAAAIAAYagAAAAEEi2m86WRhhtmKRvyiDpBePKbkqTICqUn9DqpIrn5AeyBHlGlQym8B7+ARhwYj+rWA==",
                            PhoneNumber = "395-062-0232",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/1035.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Oma87"
                        },
                        new
                        {
                            Id = 37,
                            AccessFailedCount = 0,
                            Address = "11003 Altenwerth Hills, Johnsontown, Niger",
                            ConcurrencyStamp = "5827f641-ac33-4bde-ab62-f136787ee828",
                            CreatedAt = new DateTime(2024, 7, 20, 23, 32, 47, 848, DateTimeKind.Utc).AddTicks(7248),
                            Email = "Angie_Rau6@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Angie",
                            LastName = "Rau",
                            LockoutEnabled = false,
                            NormalizedEmail = "ANGIE_RAU6@GMAIL.COM",
                            NormalizedUserName = "ANGIE_RAU9",
                            PasswordHash = "AQAAAAIAAYagAAAAEI70FeE8j5VdnxAbu2ERnrfore42GbuBuvx4eo6lKPm4V1ngdnuM02LmDosm9IpWPg==",
                            PhoneNumber = "307-735-7208",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/870.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Angie_Rau9"
                        },
                        new
                        {
                            Id = 38,
                            AccessFailedCount = 0,
                            Address = "7398 Jakob Flat, Schmelerburgh, Aruba",
                            ConcurrencyStamp = "456c6e46-77f9-4f54-bffc-635c544d1068",
                            CreatedAt = new DateTime(2024, 12, 23, 23, 32, 47, 848, DateTimeKind.Utc).AddTicks(7524),
                            Email = "Noah54@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Noah",
                            LastName = "Lubowitz",
                            LockoutEnabled = false,
                            NormalizedEmail = "NOAH54@HOTMAIL.COM",
                            NormalizedUserName = "NOAH.LUBOWITZ0",
                            PasswordHash = "AQAAAAIAAYagAAAAEHSjB/r0Rfn1Gv27JRzO2sV3YqGAEVEWhYAayl5hZZA65uDcMtyfA6m+nmTuOQulXQ==",
                            PhoneNumber = "034-821-1405",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/1194.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Noah.Lubowitz0"
                        },
                        new
                        {
                            Id = 39,
                            AccessFailedCount = 0,
                            Address = "913 Toy Trace, Kutchville, French Polynesia",
                            ConcurrencyStamp = "25dfd645-2359-4e3e-be94-271a4fd02bc6",
                            CreatedAt = new DateTime(2024, 3, 30, 23, 32, 47, 848, DateTimeKind.Utc).AddTicks(7736),
                            Email = "Sadye_Mante44@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Sadye",
                            LastName = "Mante",
                            LockoutEnabled = false,
                            NormalizedEmail = "SADYE_MANTE44@GMAIL.COM",
                            NormalizedUserName = "SADYE10",
                            PasswordHash = "AQAAAAIAAYagAAAAEB8qWgNwxA7rEpHMurnbqLLSjpioxLON0BYSehgtQiI5y6uFIog5ctlPnXZ+6bI6yg==",
                            PhoneNumber = "179-675-2921",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/110.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Sadye10"
                        },
                        new
                        {
                            Id = 40,
                            AccessFailedCount = 0,
                            Address = "64490 Luella Street, Monahanstad, Honduras",
                            ConcurrencyStamp = "05c7494d-5a30-4dfd-8e5b-cdf470d34b88",
                            CreatedAt = new DateTime(2024, 8, 21, 23, 32, 47, 848, DateTimeKind.Utc).AddTicks(7961),
                            Email = "Theresa.Ernser41@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Theresa",
                            LastName = "Ernser",
                            LockoutEnabled = false,
                            NormalizedEmail = "THERESA.ERNSER41@GMAIL.COM",
                            NormalizedUserName = "THERESA_ERNSER44",
                            PasswordHash = "AQAAAAIAAYagAAAAELYwmKDBVHtTsWUPHVXwacU3dVvlG8BdjPm90s9Q5Vnus6dEMEA5ZXXTo4R2rTIUpQ==",
                            PhoneNumber = "671-673-2394",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/248.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Theresa_Ernser44"
                        });
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Variant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Variants");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.VariantValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VariantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VariantId");

                    b.ToTable("VariantValues");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ManboShopAPI.Application.Services.VariantValueImage", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.VariantValue", "VariantValue")
                        .WithMany("VariantValueImages")
                        .HasForeignKey("VariantValueId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("VariantValue");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Address", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.User", "User")
                        .WithMany("Addresses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.BannerDetail", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Banner", "Banner")
                        .WithMany("BannerDetails")
                        .HasForeignKey("BannerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManboShopAPI.Domain.Entities.Product", "Product")
                        .WithMany("BannerDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Banner");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Cart", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("User");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.CartItem", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Cart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManboShopAPI.Domain.Entities.ProductVariantValue", "ProductVariantValue")
                        .WithMany("CartItems")
                        .HasForeignKey("ProductVariantValueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("ProductVariantValue");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Category", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Category", "ParentCategory")
                        .WithMany("SubCategories")
                        .HasForeignKey("ParentCategoryId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.CouponCondition", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Coupon", "Coupon")
                        .WithMany("CouponConditions")
                        .HasForeignKey("CouponId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Coupon");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Favorite", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Product", "Product")
                        .WithMany("Favorites")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManboShopAPI.Domain.Entities.User", "User")
                        .WithMany("Favorites")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Feedback", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Product", "Product")
                        .WithMany("Feedbacks")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ManboShopAPI.Domain.Entities.User", "User")
                        .WithMany("Feedbacks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.FeedbackLike", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Feedback", "Feedback")
                        .WithMany("FeedbackLikes")
                        .HasForeignKey("FeedbackId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ManboShopAPI.Domain.Entities.User", "User")
                        .WithMany("FeedbackLikes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Feedback");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.FeedbackReport", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Feedback", "Feedback")
                        .WithMany("FeedbackReports")
                        .HasForeignKey("FeedbackId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ManboShopAPI.Domain.Entities.User", "User")
                        .WithMany("FeedbackReports")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Feedback");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.NewsDetail", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.News", "News")
                        .WithMany("NewsDetails")
                        .HasForeignKey("NewsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManboShopAPI.Domain.Entities.Product", "Product")
                        .WithMany("NewsDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("News");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Order", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Coupon", null)
                        .WithMany("Orders")
                        .HasForeignKey("CouponId");

                    b.HasOne("ManboShopAPI.Domain.Entities.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("User");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.OrderDetail", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Coupon", null)
                        .WithMany("OrderDetails")
                        .HasForeignKey("CouponId");

                    b.HasOne("ManboShopAPI.Domain.Entities.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManboShopAPI.Domain.Entities.ProductVariantValue", "ProductVariantValue")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductVariantValueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("ProductVariantValue");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Product", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ManboShopAPI.Domain.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Brand");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.ProductAttributeValue", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Attributes", "Attribute")
                        .WithMany("ProductAttributeValues")
                        .HasForeignKey("AttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManboShopAPI.Domain.Entities.Product", "Product")
                        .WithMany("ProductAttributeValues")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attribute");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.ProductImage", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Product", "Product")
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.ProductVariantValue", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Product", "Product")
                        .WithMany("ProductVariantValues")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.VariantValue", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Variant", "Variant")
                        .WithMany("VariantValues")
                        .HasForeignKey("VariantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Variant");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManboShopAPI.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Attributes", b =>
                {
                    b.Navigation("ProductAttributeValues");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Banner", b =>
                {
                    b.Navigation("BannerDetails");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Brand", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Cart", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Category", b =>
                {
                    b.Navigation("Products");

                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Coupon", b =>
                {
                    b.Navigation("CouponConditions");

                    b.Navigation("OrderDetails");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Feedback", b =>
                {
                    b.Navigation("FeedbackLikes");

                    b.Navigation("FeedbackReports");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.News", b =>
                {
                    b.Navigation("NewsDetails");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Product", b =>
                {
                    b.Navigation("BannerDetails");

                    b.Navigation("Favorites");

                    b.Navigation("Feedbacks");

                    b.Navigation("NewsDetails");

                    b.Navigation("ProductAttributeValues");

                    b.Navigation("ProductImages");

                    b.Navigation("ProductVariantValues");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.ProductVariantValue", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.User", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Favorites");

                    b.Navigation("FeedbackLikes");

                    b.Navigation("FeedbackReports");

                    b.Navigation("Feedbacks");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Variant", b =>
                {
                    b.Navigation("VariantValues");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.VariantValue", b =>
                {
                    b.Navigation("VariantValueImages");
                });
#pragma warning restore 612, 618
        }
    }
}
