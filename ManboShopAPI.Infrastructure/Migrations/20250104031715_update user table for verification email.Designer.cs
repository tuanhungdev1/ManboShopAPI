// <auto-generated />
using System;
using ManboShopAPI.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ManboShopAPI.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250104031715_update user table for verification email")]
    partial class updateusertableforverificationemail
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AreaOrColonyOrStreetOrSectorOrVillage")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("BuildingOrCompanyOrApartment")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FlatOrHouse")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PinCode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Attributes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Attributes");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Banner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Banners");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.BannerDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BannerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BannerId");

                    b.HasIndex("ProductId");

                    b.ToTable("BannerDetails");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Brands");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 1, 4, 3, 17, 14, 242, DateTimeKind.Utc).AddTicks(3483),
                            ImageUrl = "https://example.com/images/nike.jpg",
                            Name = "Nike"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 1, 4, 3, 17, 14, 242, DateTimeKind.Utc).AddTicks(4166),
                            ImageUrl = "https://example.com/images/adidas.jpg",
                            Name = "Adidas"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 1, 4, 3, 17, 14, 242, DateTimeKind.Utc).AddTicks(4168),
                            ImageUrl = "https://example.com/images/gucci.jpg",
                            Name = "Gucci"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 1, 4, 3, 17, 14, 242, DateTimeKind.Utc).AddTicks(4172),
                            ImageUrl = "https://example.com/images/louis-vuitton.jpg",
                            Name = "Louis Vuitton"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2025, 1, 4, 3, 17, 14, 242, DateTimeKind.Utc).AddTicks(4176),
                            ImageUrl = "https://example.com/images/zara.jpg",
                            Name = "Zara"
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2025, 1, 4, 3, 17, 14, 242, DateTimeKind.Utc).AddTicks(4182),
                            ImageUrl = "https://example.com/images/h&m.jpg",
                            Name = "H&M"
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2025, 1, 4, 3, 17, 14, 242, DateTimeKind.Utc).AddTicks(4184),
                            ImageUrl = "https://example.com/images/chanel.jpg",
                            Name = "Chanel"
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2025, 1, 4, 3, 17, 14, 242, DateTimeKind.Utc).AddTicks(4185),
                            ImageUrl = "https://example.com/images/prada.jpg",
                            Name = "Prada"
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2025, 1, 4, 3, 17, 14, 242, DateTimeKind.Utc).AddTicks(4187),
                            ImageUrl = "https://example.com/images/versace.jpg",
                            Name = "Versace"
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2025, 1, 4, 3, 17, 14, 242, DateTimeKind.Utc).AddTicks(4189),
                            ImageUrl = "https://example.com/images/burberry.jpg",
                            Name = "Burberry"
                        },
                        new
                        {
                            Id = 11,
                            CreatedAt = new DateTime(2025, 1, 4, 3, 17, 14, 242, DateTimeKind.Utc).AddTicks(4191),
                            ImageUrl = "https://example.com/images/dior.jpg",
                            Name = "Dior"
                        },
                        new
                        {
                            Id = 12,
                            CreatedAt = new DateTime(2025, 1, 4, 3, 17, 14, 242, DateTimeKind.Utc).AddTicks(4192),
                            ImageUrl = "https://example.com/images/calvin-klein.jpg",
                            Name = "Calvin Klein"
                        },
                        new
                        {
                            Id = 13,
                            CreatedAt = new DateTime(2025, 1, 4, 3, 17, 14, 242, DateTimeKind.Utc).AddTicks(4193),
                            ImageUrl = "https://example.com/images/tommy-hilfiger.jpg",
                            Name = "Tommy Hilfiger"
                        },
                        new
                        {
                            Id = 14,
                            CreatedAt = new DateTime(2025, 1, 4, 3, 17, 14, 242, DateTimeKind.Utc).AddTicks(4195),
                            ImageUrl = "https://example.com/images/levis.jpg",
                            Name = "Levi's"
                        },
                        new
                        {
                            Id = 15,
                            CreatedAt = new DateTime(2025, 1, 4, 3, 17, 14, 242, DateTimeKind.Utc).AddTicks(4196),
                            ImageUrl = "https://example.com/images/uniqlo.jpg",
                            Name = "Uniqlo"
                        },
                        new
                        {
                            Id = 16,
                            CreatedAt = new DateTime(2025, 1, 4, 3, 17, 14, 242, DateTimeKind.Utc).AddTicks(4197),
                            ImageUrl = "https://example.com/images/lacoste.jpg",
                            Name = "Lacoste"
                        },
                        new
                        {
                            Id = 17,
                            CreatedAt = new DateTime(2025, 1, 4, 3, 17, 14, 242, DateTimeKind.Utc).AddTicks(4199),
                            ImageUrl = "https://example.com/images/the-north-face.jpg",
                            Name = "The North Face"
                        },
                        new
                        {
                            Id = 18,
                            CreatedAt = new DateTime(2025, 1, 4, 3, 17, 14, 242, DateTimeKind.Utc).AddTicks(4325),
                            ImageUrl = "https://example.com/images/ralph-lauren.jpg",
                            Name = "Ralph Lauren"
                        },
                        new
                        {
                            Id = 19,
                            CreatedAt = new DateTime(2025, 1, 4, 3, 17, 14, 242, DateTimeKind.Utc).AddTicks(4327),
                            ImageUrl = "https://example.com/images/puma.jpg",
                            Name = "Puma"
                        },
                        new
                        {
                            Id = 20,
                            CreatedAt = new DateTime(2025, 1, 4, 3, 17, 14, 242, DateTimeKind.Utc).AddTicks(4328),
                            ImageUrl = "https://example.com/images/hugo-boss.jpg",
                            Name = "Hugo Boss"
                        },
                        new
                        {
                            Id = 21,
                            CreatedAt = new DateTime(2025, 1, 4, 3, 17, 14, 242, DateTimeKind.Utc).AddTicks(4330),
                            ImageUrl = "https://example.com/images/armani.jpg",
                            Name = "Armani"
                        },
                        new
                        {
                            Id = 22,
                            CreatedAt = new DateTime(2025, 1, 4, 3, 17, 14, 242, DateTimeKind.Utc).AddTicks(4331),
                            ImageUrl = "https://example.com/images/balenciaga.jpg",
                            Name = "Balenciaga"
                        },
                        new
                        {
                            Id = 23,
                            CreatedAt = new DateTime(2025, 1, 4, 3, 17, 14, 242, DateTimeKind.Utc).AddTicks(4332),
                            ImageUrl = "https://example.com/images/fendi.jpg",
                            Name = "Fendi"
                        },
                        new
                        {
                            Id = 24,
                            CreatedAt = new DateTime(2025, 1, 4, 3, 17, 14, 242, DateTimeKind.Utc).AddTicks(4501),
                            ImageUrl = "https://example.com/images/givenchy.jpg",
                            Name = "Givenchy"
                        },
                        new
                        {
                            Id = 25,
                            CreatedAt = new DateTime(2025, 1, 4, 3, 17, 14, 242, DateTimeKind.Utc).AddTicks(4503),
                            ImageUrl = "https://example.com/images/hermes.jpg",
                            Name = "Hermès"
                        },
                        new
                        {
                            Id = 26,
                            CreatedAt = new DateTime(2025, 1, 4, 3, 17, 14, 242, DateTimeKind.Utc).AddTicks(4505),
                            ImageUrl = "https://example.com/images/salvatore-ferragamo.jpg",
                            Name = "Salvatore Ferragamo"
                        },
                        new
                        {
                            Id = 27,
                            CreatedAt = new DateTime(2025, 1, 4, 3, 17, 14, 242, DateTimeKind.Utc).AddTicks(4506),
                            ImageUrl = "https://example.com/images/valentino.jpg",
                            Name = "Valentino"
                        },
                        new
                        {
                            Id = 28,
                            CreatedAt = new DateTime(2025, 1, 4, 3, 17, 14, 242, DateTimeKind.Utc).AddTicks(4515),
                            ImageUrl = "https://example.com/images/dolce-gabbana.jpg",
                            Name = "Dolce & Gabbana"
                        },
                        new
                        {
                            Id = 29,
                            CreatedAt = new DateTime(2025, 1, 4, 3, 17, 14, 242, DateTimeKind.Utc).AddTicks(4517),
                            ImageUrl = "https://example.com/images/gap.jpg",
                            Name = "Gap"
                        },
                        new
                        {
                            Id = 30,
                            CreatedAt = new DateTime(2025, 1, 4, 3, 17, 14, 242, DateTimeKind.Utc).AddTicks(4530),
                            ImageUrl = "https://example.com/images/forever21.jpg",
                            Name = "Forever 21"
                        },
                        new
                        {
                            Id = 31,
                            CreatedAt = new DateTime(2025, 1, 4, 3, 17, 14, 242, DateTimeKind.Utc).AddTicks(4533),
                            ImageUrl = "https://example.com/images/new-balance.jpg",
                            Name = "New Balance"
                        },
                        new
                        {
                            Id = 32,
                            CreatedAt = new DateTime(2025, 1, 4, 3, 17, 14, 242, DateTimeKind.Utc).AddTicks(4534),
                            ImageUrl = "https://example.com/images/vans.jpg",
                            Name = "Vans"
                        },
                        new
                        {
                            Id = 33,
                            CreatedAt = new DateTime(2025, 1, 4, 3, 17, 14, 242, DateTimeKind.Utc).AddTicks(4536),
                            ImageUrl = "https://example.com/images/converse.jpg",
                            Name = "Converse"
                        },
                        new
                        {
                            Id = 34,
                            CreatedAt = new DateTime(2025, 1, 4, 3, 17, 14, 242, DateTimeKind.Utc).AddTicks(4539),
                            ImageUrl = "https://example.com/images/under-armour.jpg",
                            Name = "Under Armour"
                        },
                        new
                        {
                            Id = 35,
                            CreatedAt = new DateTime(2025, 1, 4, 3, 17, 14, 242, DateTimeKind.Utc).AddTicks(4541),
                            ImageUrl = "https://example.com/images/reebok.jpg",
                            Name = "Reebok"
                        },
                        new
                        {
                            Id = 36,
                            CreatedAt = new DateTime(2025, 1, 4, 3, 17, 14, 242, DateTimeKind.Utc).AddTicks(4542),
                            ImageUrl = "https://example.com/images/coach.jpg",
                            Name = "Coach"
                        },
                        new
                        {
                            Id = 37,
                            CreatedAt = new DateTime(2025, 1, 4, 3, 17, 14, 242, DateTimeKind.Utc).AddTicks(4544),
                            ImageUrl = "https://example.com/images/kate-spade.jpg",
                            Name = "Kate Spade"
                        },
                        new
                        {
                            Id = 38,
                            CreatedAt = new DateTime(2025, 1, 4, 3, 17, 14, 242, DateTimeKind.Utc).AddTicks(4545),
                            ImageUrl = "https://example.com/images/michael-kors.jpg",
                            Name = "Michael Kors"
                        },
                        new
                        {
                            Id = 39,
                            CreatedAt = new DateTime(2025, 1, 4, 3, 17, 14, 242, DateTimeKind.Utc).AddTicks(4546),
                            ImageUrl = "https://example.com/images/bally.jpg",
                            Name = "Bally"
                        },
                        new
                        {
                            Id = 40,
                            CreatedAt = new DateTime(2025, 1, 4, 3, 17, 14, 242, DateTimeKind.Utc).AddTicks(4547),
                            ImageUrl = "https://example.com/images/guess.jpg",
                            Name = "Guess"
                        });
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.CartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("ProductId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 1, 4, 3, 17, 11, 675, DateTimeKind.Utc).AddTicks(7698),
                            ImageUrl = "https://example.com/images/men-clothing.jpg",
                            Name = "Men's Clothing"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 1, 4, 3, 17, 11, 675, DateTimeKind.Utc).AddTicks(8297),
                            ImageUrl = "https://example.com/images/women-clothing.jpg",
                            Name = "Women's Clothing"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 1, 4, 3, 17, 11, 675, DateTimeKind.Utc).AddTicks(8299),
                            ImageUrl = "https://example.com/images/children-clothing.jpg",
                            Name = "Children's Clothing"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 1, 4, 3, 17, 11, 675, DateTimeKind.Utc).AddTicks(8300),
                            ImageUrl = "https://example.com/images/shoes.jpg",
                            Name = "Shoes"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2025, 1, 4, 3, 17, 11, 675, DateTimeKind.Utc).AddTicks(8301),
                            ImageUrl = "https://example.com/images/bags.jpg",
                            Name = "Bags"
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2025, 1, 4, 3, 17, 11, 675, DateTimeKind.Utc).AddTicks(8305),
                            ImageUrl = "https://example.com/images/accessories.jpg",
                            Name = "Accessories"
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2025, 1, 4, 3, 17, 11, 675, DateTimeKind.Utc).AddTicks(8306),
                            ImageUrl = "https://example.com/images/watches.jpg",
                            Name = "Watches"
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2025, 1, 4, 3, 17, 11, 675, DateTimeKind.Utc).AddTicks(8307),
                            ImageUrl = "https://example.com/images/sportswear.jpg",
                            Name = "Sportswear"
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2025, 1, 4, 3, 17, 11, 675, DateTimeKind.Utc).AddTicks(8308),
                            ImageUrl = "https://example.com/images/swimwear.jpg",
                            Name = "Swimwear"
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2025, 1, 4, 3, 17, 11, 675, DateTimeKind.Utc).AddTicks(8310),
                            ImageUrl = "https://example.com/images/formal-wear.jpg",
                            Name = "Formal Wear"
                        },
                        new
                        {
                            Id = 11,
                            CreatedAt = new DateTime(2025, 1, 4, 3, 17, 11, 675, DateTimeKind.Utc).AddTicks(8312),
                            ImageUrl = "https://example.com/images/casual-wear.jpg",
                            Name = "Casual Wear"
                        },
                        new
                        {
                            Id = 12,
                            CreatedAt = new DateTime(2025, 1, 4, 3, 17, 11, 675, DateTimeKind.Utc).AddTicks(8313),
                            ImageUrl = "https://example.com/images/t-shirts.jpg",
                            Name = "T-Shirts"
                        },
                        new
                        {
                            Id = 13,
                            CreatedAt = new DateTime(2025, 1, 4, 3, 17, 11, 675, DateTimeKind.Utc).AddTicks(8314),
                            ImageUrl = "https://example.com/images/jeans.jpg",
                            Name = "Jeans"
                        },
                        new
                        {
                            Id = 14,
                            CreatedAt = new DateTime(2025, 1, 4, 3, 17, 11, 675, DateTimeKind.Utc).AddTicks(8315),
                            ImageUrl = "https://example.com/images/jackets-coats.jpg",
                            Name = "Jackets & Coats"
                        },
                        new
                        {
                            Id = 15,
                            CreatedAt = new DateTime(2025, 1, 4, 3, 17, 11, 675, DateTimeKind.Utc).AddTicks(8316),
                            ImageUrl = "https://example.com/images/hats-caps.jpg",
                            Name = "Hats & Caps"
                        },
                        new
                        {
                            Id = 16,
                            CreatedAt = new DateTime(2025, 1, 4, 3, 17, 11, 675, DateTimeKind.Utc).AddTicks(8317),
                            ImageUrl = "https://example.com/images/scarves.jpg",
                            Name = "Scarves"
                        },
                        new
                        {
                            Id = 17,
                            CreatedAt = new DateTime(2025, 1, 4, 3, 17, 11, 675, DateTimeKind.Utc).AddTicks(8318),
                            ImageUrl = "https://example.com/images/sunglasses.jpg",
                            Name = "Sunglasses"
                        },
                        new
                        {
                            Id = 18,
                            CreatedAt = new DateTime(2025, 1, 4, 3, 17, 11, 675, DateTimeKind.Utc).AddTicks(8320),
                            ImageUrl = "https://example.com/images/belts.jpg",
                            Name = "Belts"
                        },
                        new
                        {
                            Id = 19,
                            CreatedAt = new DateTime(2025, 1, 4, 3, 17, 11, 675, DateTimeKind.Utc).AddTicks(8321),
                            ImageUrl = "https://example.com/images/undergarments.jpg",
                            Name = "Undergarments"
                        },
                        new
                        {
                            Id = 20,
                            CreatedAt = new DateTime(2025, 1, 4, 3, 17, 11, 675, DateTimeKind.Utc).AddTicks(8322),
                            ImageUrl = "https://example.com/images/sports-shoes.jpg",
                            Name = "Sports Shoes"
                        },
                        new
                        {
                            Id = 21,
                            CreatedAt = new DateTime(2025, 1, 4, 3, 17, 11, 675, DateTimeKind.Utc).AddTicks(8323),
                            ImageUrl = "https://example.com/images/boots.jpg",
                            Name = "Boots"
                        },
                        new
                        {
                            Id = 22,
                            CreatedAt = new DateTime(2025, 1, 4, 3, 17, 11, 675, DateTimeKind.Utc).AddTicks(8324),
                            ImageUrl = "https://example.com/images/high-heels.jpg",
                            Name = "High Heels"
                        },
                        new
                        {
                            Id = 23,
                            CreatedAt = new DateTime(2025, 1, 4, 3, 17, 11, 675, DateTimeKind.Utc).AddTicks(8325),
                            ImageUrl = "https://example.com/images/sneakers.jpg",
                            Name = "Sneakers"
                        },
                        new
                        {
                            Id = 24,
                            CreatedAt = new DateTime(2025, 1, 4, 3, 17, 11, 675, DateTimeKind.Utc).AddTicks(8326),
                            ImageUrl = "https://example.com/images/suits.jpg",
                            Name = "Suits"
                        },
                        new
                        {
                            Id = 25,
                            CreatedAt = new DateTime(2025, 1, 4, 3, 17, 11, 675, DateTimeKind.Utc).AddTicks(8327),
                            ImageUrl = "https://example.com/images/dresses.jpg",
                            Name = "Dresses"
                        },
                        new
                        {
                            Id = 26,
                            CreatedAt = new DateTime(2025, 1, 4, 3, 17, 11, 675, DateTimeKind.Utc).AddTicks(8328),
                            ImageUrl = "https://example.com/images/blouses.jpg",
                            Name = "Blouses"
                        },
                        new
                        {
                            Id = 27,
                            CreatedAt = new DateTime(2025, 1, 4, 3, 17, 11, 675, DateTimeKind.Utc).AddTicks(8329),
                            ImageUrl = "https://example.com/images/skirts.jpg",
                            Name = "Skirts"
                        },
                        new
                        {
                            Id = 28,
                            CreatedAt = new DateTime(2025, 1, 4, 3, 17, 11, 675, DateTimeKind.Utc).AddTicks(8330),
                            ImageUrl = "https://example.com/images/shorts.jpg",
                            Name = "Shorts"
                        },
                        new
                        {
                            Id = 29,
                            CreatedAt = new DateTime(2025, 1, 4, 3, 17, 11, 675, DateTimeKind.Utc).AddTicks(8331),
                            ImageUrl = "https://example.com/images/pajamas.jpg",
                            Name = "Pajamas"
                        },
                        new
                        {
                            Id = 30,
                            CreatedAt = new DateTime(2025, 1, 4, 3, 17, 11, 675, DateTimeKind.Utc).AddTicks(8332),
                            ImageUrl = "https://example.com/images/outerwear.jpg",
                            Name = "Outerwear"
                        },
                        new
                        {
                            Id = 31,
                            CreatedAt = new DateTime(2025, 1, 4, 3, 17, 11, 675, DateTimeKind.Utc).AddTicks(8333),
                            ImageUrl = "https://example.com/images/activewear.jpg",
                            Name = "Activewear"
                        },
                        new
                        {
                            Id = 32,
                            CreatedAt = new DateTime(2025, 1, 4, 3, 17, 11, 675, DateTimeKind.Utc).AddTicks(8334),
                            ImageUrl = "https://example.com/images/raincoats.jpg",
                            Name = "Raincoats"
                        },
                        new
                        {
                            Id = 33,
                            CreatedAt = new DateTime(2025, 1, 4, 3, 17, 11, 675, DateTimeKind.Utc).AddTicks(8335),
                            ImageUrl = "https://example.com/images/cardigans.jpg",
                            Name = "Cardigans"
                        },
                        new
                        {
                            Id = 34,
                            CreatedAt = new DateTime(2025, 1, 4, 3, 17, 11, 675, DateTimeKind.Utc).AddTicks(8337),
                            ImageUrl = "https://example.com/images/sweaters.jpg",
                            Name = "Sweaters"
                        },
                        new
                        {
                            Id = 35,
                            CreatedAt = new DateTime(2025, 1, 4, 3, 17, 11, 675, DateTimeKind.Utc).AddTicks(8338),
                            ImageUrl = "https://example.com/images/leggings.jpg",
                            Name = "Leggings"
                        },
                        new
                        {
                            Id = 36,
                            CreatedAt = new DateTime(2025, 1, 4, 3, 17, 11, 675, DateTimeKind.Utc).AddTicks(8339),
                            ImageUrl = "https://example.com/images/tracksuits.jpg",
                            Name = "Tracksuits"
                        },
                        new
                        {
                            Id = 37,
                            CreatedAt = new DateTime(2025, 1, 4, 3, 17, 11, 675, DateTimeKind.Utc).AddTicks(8340),
                            ImageUrl = "https://example.com/images/gloves.jpg",
                            Name = "Gloves"
                        },
                        new
                        {
                            Id = 38,
                            CreatedAt = new DateTime(2025, 1, 4, 3, 17, 11, 675, DateTimeKind.Utc).AddTicks(8341),
                            ImageUrl = "https://example.com/images/socks.jpg",
                            Name = "Socks"
                        },
                        new
                        {
                            Id = 39,
                            CreatedAt = new DateTime(2025, 1, 4, 3, 17, 11, 675, DateTimeKind.Utc).AddTicks(8342),
                            ImageUrl = "https://example.com/images/loungewear.jpg",
                            Name = "Loungewear"
                        },
                        new
                        {
                            Id = 40,
                            CreatedAt = new DateTime(2025, 1, 4, 3, 17, 11, 675, DateTimeKind.Utc).AddTicks(8343),
                            ImageUrl = "https://example.com/images/winter-wear.jpg",
                            Name = "Winter Wear"
                        });
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Coupon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CurrentUsages")
                        .HasColumnType("int");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("MaxUsages")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Coupons");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.CouponCondition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Attribute")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("CouponId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DiscountAmount")
                        .HasColumnType("int");

                    b.Property<string>("Operator")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Value")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CouponId");

                    b.ToTable("CouponConditions");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Favorite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Favorites");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Star")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.News", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("News");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.NewsDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("NewsId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("NewsId");

                    b.HasIndex("ProductId");

                    b.ToTable("NewsDetails");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CouponId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("SessionId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CouponId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.OrderDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CouponId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CouponId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BrandId")
                        .HasColumnType("int");

                    b.Property<int>("BuyTurn")
                        .HasColumnType("int");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("OldPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("Specification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.ProductAttributeValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AttributeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AttributeId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductAttributeValues");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.ProductImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductImages");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfilePictureUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("VerificationCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("VerificationCodeExpiryTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            Address = "08281 Durgan Island, West Catherineton, Bulgaria",
                            ConcurrencyStamp = "4bac2a0b-cc9a-4e0a-aa76-b89aa5dc8df1",
                            CreatedAt = new DateTime(2024, 10, 31, 3, 17, 11, 988, DateTimeKind.Utc).AddTicks(5524),
                            Email = "Abigail_Gerlach13@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Abigail",
                            LastName = "Gerlach",
                            LockoutEnabled = false,
                            NormalizedEmail = "ABIGAIL_GERLACH13@HOTMAIL.COM",
                            NormalizedUserName = "ABIGAIL.GERLACH",
                            PasswordHash = "AQAAAAIAAYagAAAAEJjGjBO4UapTKk9r71U+eOv/4lMYqDwTlye3pZUd0dLzFbVFSb6hupMHINt6kTULJA==",
                            PhoneNumber = "267-592-2346",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/738.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Abigail.Gerlach"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            Address = "6729 Oswald Villages, East Terrill, Niger",
                            ConcurrencyStamp = "66cc5aae-5aec-456c-9631-f6a34b9d3b89",
                            CreatedAt = new DateTime(2024, 4, 24, 3, 17, 11, 989, DateTimeKind.Utc).AddTicks(9754),
                            Email = "Reggie6@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Reggie",
                            LastName = "Block",
                            LockoutEnabled = false,
                            NormalizedEmail = "REGGIE6@YAHOO.COM",
                            NormalizedUserName = "REGGIE.BLOCK49",
                            PasswordHash = "AQAAAAIAAYagAAAAECUxszt1MRui12jo0474lKbyLco9w0PtIbST3ucqXOFIP68o+BEDuk/HSENJeBjpWA==",
                            PhoneNumber = "507-883-2443",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/717.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Reggie.Block49"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            Address = "161 Quinten Court, New Hesterfurt, Kazakhstan",
                            ConcurrencyStamp = "62d24228-cd98-4c09-99d9-295db850b985",
                            CreatedAt = new DateTime(2024, 9, 10, 3, 17, 11, 990, DateTimeKind.Utc).AddTicks(139),
                            Email = "Tyrell_Keeling@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Tyrell",
                            LastName = "Keeling",
                            LockoutEnabled = false,
                            NormalizedEmail = "TYRELL_KEELING@HOTMAIL.COM",
                            NormalizedUserName = "TYRELL16",
                            PasswordHash = "AQAAAAIAAYagAAAAEF1hTvXITRO0rtsMvlsTARMn+B+58jxmymoSsxBWYqnDlfP82gMxsAKpZU7xzmAimA==",
                            PhoneNumber = "868-254-2239",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/487.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Tyrell16"
                        },
                        new
                        {
                            Id = 4,
                            AccessFailedCount = 0,
                            Address = "284 Hintz Mission, Lake Jefferey, Palestinian Territory",
                            ConcurrencyStamp = "82849778-3df5-4d99-991b-aec65b74428c",
                            CreatedAt = new DateTime(2024, 7, 16, 3, 17, 11, 990, DateTimeKind.Utc).AddTicks(380),
                            Email = "Shyann.Pfeffer77@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Shyann",
                            LastName = "Pfeffer",
                            LockoutEnabled = false,
                            NormalizedEmail = "SHYANN.PFEFFER77@HOTMAIL.COM",
                            NormalizedUserName = "SHYANN_PFEFFER",
                            PasswordHash = "AQAAAAIAAYagAAAAEMLCjg/Pq8vYi/RQjBJS+O6T/Ux9BC3S0OoXNQgxatKYwo1bvNNnM0dw9AqLX3b4YQ==",
                            PhoneNumber = "959-827-4190",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/942.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Shyann_Pfeffer"
                        },
                        new
                        {
                            Id = 5,
                            AccessFailedCount = 0,
                            Address = "026 Eunice Flat, Danialton, Poland",
                            ConcurrencyStamp = "2162e5f4-1439-4cf5-83c0-54cedc0cee34",
                            CreatedAt = new DateTime(2024, 7, 23, 3, 17, 11, 990, DateTimeKind.Utc).AddTicks(608),
                            Email = "Vada98@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Vada",
                            LastName = "Johnson",
                            LockoutEnabled = false,
                            NormalizedEmail = "VADA98@HOTMAIL.COM",
                            NormalizedUserName = "VADA95",
                            PasswordHash = "AQAAAAIAAYagAAAAEBqZV1X8Co7STtLFypDAdR6fu+E3Ras241VhQZJBMRzOYFBwpMuiZQl7nGwB1q9aYg==",
                            PhoneNumber = "266-514-4137",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/1179.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Vada95"
                        },
                        new
                        {
                            Id = 6,
                            AccessFailedCount = 0,
                            Address = "323 Winston Row, Estaport, Samoa",
                            ConcurrencyStamp = "9000e48e-ad8b-406a-9e01-abbb9479adad",
                            CreatedAt = new DateTime(2024, 8, 1, 3, 17, 11, 990, DateTimeKind.Utc).AddTicks(975),
                            Email = "Magdalena81@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Magdalena",
                            LastName = "Roberts",
                            LockoutEnabled = false,
                            NormalizedEmail = "MAGDALENA81@HOTMAIL.COM",
                            NormalizedUserName = "MAGDALENA.ROBERTS26",
                            PasswordHash = "AQAAAAIAAYagAAAAEC9cPnBl0B5K1bpNZhyzabxRz39slJHqFrAKuLqS+msxs+Pt29eKnhSlIKqYZlZ0Gg==",
                            PhoneNumber = "059-068-6590",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/563.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Magdalena.Roberts26"
                        },
                        new
                        {
                            Id = 7,
                            AccessFailedCount = 0,
                            Address = "8946 Feil Ramp, Lake Toneyshire, Mali",
                            ConcurrencyStamp = "66ae86d7-faaf-43ff-8495-7acb4423b1f8",
                            CreatedAt = new DateTime(2024, 9, 27, 3, 17, 11, 990, DateTimeKind.Utc).AddTicks(1274),
                            Email = "Porter_Gusikowski83@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Porter",
                            LastName = "Gusikowski",
                            LockoutEnabled = false,
                            NormalizedEmail = "PORTER_GUSIKOWSKI83@HOTMAIL.COM",
                            NormalizedUserName = "PORTER.GUSIKOWSKI89",
                            PasswordHash = "AQAAAAIAAYagAAAAEJvSFvKy520YLSDykRj/vjVw3oHqfCLokc+WJT6ZhsXlJw26lXck+6rTGFebLYCnbw==",
                            PhoneNumber = "946-803-5500",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/47.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Porter.Gusikowski89"
                        },
                        new
                        {
                            Id = 8,
                            AccessFailedCount = 0,
                            Address = "886 Glover Squares, West Lenora, Bermuda",
                            ConcurrencyStamp = "37d6f0a7-2483-4185-999c-aa8f9414ee5e",
                            CreatedAt = new DateTime(2024, 9, 30, 3, 17, 11, 990, DateTimeKind.Utc).AddTicks(1505),
                            Email = "Nicholas.Friesen1@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Nicholas",
                            LastName = "Friesen",
                            LockoutEnabled = false,
                            NormalizedEmail = "NICHOLAS.FRIESEN1@GMAIL.COM",
                            NormalizedUserName = "NICHOLAS.FRIESEN50",
                            PasswordHash = "AQAAAAIAAYagAAAAEI1zKobT4nSCNKg4XkvBOmYiJSyJV+UXxi9v+gNOI/BJ9qipu6jipCVc0VHkFlsyAQ==",
                            PhoneNumber = "197-386-8937",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/1189.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Nicholas.Friesen50"
                        },
                        new
                        {
                            Id = 9,
                            AccessFailedCount = 0,
                            Address = "61406 Diana Prairie, Boehmstad, Gibraltar",
                            ConcurrencyStamp = "c257e733-6d38-4c29-a39a-2061b96a940f",
                            CreatedAt = new DateTime(2024, 9, 14, 3, 17, 11, 990, DateTimeKind.Utc).AddTicks(1786),
                            Email = "Kitty22@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Kitty",
                            LastName = "Oberbrunner",
                            LockoutEnabled = false,
                            NormalizedEmail = "KITTY22@YAHOO.COM",
                            NormalizedUserName = "KITTY58",
                            PasswordHash = "AQAAAAIAAYagAAAAEDZh+oroVfA6nM5LEgw1Z3wkPFIhslJB691n14+F5Y7bYPAFRlvMTLDBZICmSypb4g==",
                            PhoneNumber = "454-138-3940",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/647.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Kitty58"
                        },
                        new
                        {
                            Id = 10,
                            AccessFailedCount = 0,
                            Address = "4975 Beatty Glens, Jayneborough, Cambodia",
                            ConcurrencyStamp = "6b6b2f8a-25fe-4499-82af-15d0e41bce4f",
                            CreatedAt = new DateTime(2024, 6, 8, 3, 17, 11, 990, DateTimeKind.Utc).AddTicks(2005),
                            Email = "Trenton64@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Trenton",
                            LastName = "Kutch",
                            LockoutEnabled = false,
                            NormalizedEmail = "TRENTON64@HOTMAIL.COM",
                            NormalizedUserName = "TRENTON3",
                            PasswordHash = "AQAAAAIAAYagAAAAEDi8g8fn4jTzP0t/TNCk8qCmz+udUMBbAP5lz25l/pVYYIZS6yj+DCAmBK9d/fD7FA==",
                            PhoneNumber = "203-801-5430",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/977.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Trenton3"
                        },
                        new
                        {
                            Id = 11,
                            AccessFailedCount = 0,
                            Address = "91308 Crooks Rest, Port Ayanaside, Lithuania",
                            ConcurrencyStamp = "97093595-dab8-44d5-8de1-3c9d87131660",
                            CreatedAt = new DateTime(2024, 4, 5, 3, 17, 11, 990, DateTimeKind.Utc).AddTicks(2249),
                            Email = "Brisa.Sanford84@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Brisa",
                            LastName = "Sanford",
                            LockoutEnabled = false,
                            NormalizedEmail = "BRISA.SANFORD84@HOTMAIL.COM",
                            NormalizedUserName = "BRISA_SANFORD",
                            PasswordHash = "AQAAAAIAAYagAAAAEHLrYDYl+vzHIsfBKfyl32Ly5xD9j3KfcSVDv9SLdZ5biGMzOqMgP0nNejj6GHn36w==",
                            PhoneNumber = "122-808-2575",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/143.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Brisa_Sanford"
                        },
                        new
                        {
                            Id = 12,
                            AccessFailedCount = 0,
                            Address = "1463 Baumbach Pines, Tyrelburgh, Brazil",
                            ConcurrencyStamp = "22b37c5d-5d98-490a-87a8-cc8185f26f60",
                            CreatedAt = new DateTime(2024, 12, 8, 3, 17, 11, 990, DateTimeKind.Utc).AddTicks(2466),
                            Email = "Arjun_Douglas@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Arjun",
                            LastName = "Douglas",
                            LockoutEnabled = false,
                            NormalizedEmail = "ARJUN_DOUGLAS@YAHOO.COM",
                            NormalizedUserName = "ARJUN_DOUGLAS14",
                            PasswordHash = "AQAAAAIAAYagAAAAEGogfVJsRuCi7ZTM9lf+ilSKqB9bfrdj3owQSmOcptM4XrKbNNy/gaKhvKnlpvUJeg==",
                            PhoneNumber = "062-183-3432",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/543.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Arjun_Douglas14"
                        },
                        new
                        {
                            Id = 13,
                            AccessFailedCount = 0,
                            Address = "5592 Timmy Pine, Brendenburgh, Senegal",
                            ConcurrencyStamp = "a31f1f92-9ea9-4164-ae93-cffd279dc0df",
                            CreatedAt = new DateTime(2024, 11, 26, 3, 17, 11, 990, DateTimeKind.Utc).AddTicks(2720),
                            Email = "Jeanne77@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Jeanne",
                            LastName = "Connelly",
                            LockoutEnabled = false,
                            NormalizedEmail = "JEANNE77@YAHOO.COM",
                            NormalizedUserName = "JEANNE.CONNELLY77",
                            PasswordHash = "AQAAAAIAAYagAAAAEBO6w5WLRXKFtzxufcIW4iUtbAca1BMmwkM2g320SlpibMjqs7KNvZ3m7u+DTVYsGQ==",
                            PhoneNumber = "502-372-6674",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/87.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Jeanne.Connelly77"
                        },
                        new
                        {
                            Id = 14,
                            AccessFailedCount = 0,
                            Address = "04173 Kelli Spring, Stromantown, Guyana",
                            ConcurrencyStamp = "ea8b98f6-dcea-47e8-bb66-222c1c8050c3",
                            CreatedAt = new DateTime(2024, 9, 2, 3, 17, 11, 990, DateTimeKind.Utc).AddTicks(2939),
                            Email = "Garnett.Kunze@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Garnett",
                            LastName = "Kunze",
                            LockoutEnabled = false,
                            NormalizedEmail = "GARNETT.KUNZE@YAHOO.COM",
                            NormalizedUserName = "GARNETT.KUNZE90",
                            PasswordHash = "AQAAAAIAAYagAAAAELENG85ISwawpoSlP1Fe2R6RsfobwxmndiEMBxS3QBJztDY+dtEpnTNWsLAIsloKGg==",
                            PhoneNumber = "685-495-8824",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/284.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Garnett.Kunze90"
                        },
                        new
                        {
                            Id = 15,
                            AccessFailedCount = 0,
                            Address = "8074 Albina Brooks, Bertrandton, United Arab Emirates",
                            ConcurrencyStamp = "4675f64e-43ea-4270-afc4-0088e38f2541",
                            CreatedAt = new DateTime(2024, 1, 16, 3, 17, 11, 990, DateTimeKind.Utc).AddTicks(3182),
                            Email = "Kristofer_Metz63@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Kristofer",
                            LastName = "Metz",
                            LockoutEnabled = false,
                            NormalizedEmail = "KRISTOFER_METZ63@HOTMAIL.COM",
                            NormalizedUserName = "KRISTOFER.METZ",
                            PasswordHash = "AQAAAAIAAYagAAAAEM3mUUHyPOAXPdHNAHtMiNthIPbzmRauAd7dlM6HV92Ab4LN/Oy0krbHhQnjr63C8A==",
                            PhoneNumber = "918-458-1067",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/915.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Kristofer.Metz"
                        },
                        new
                        {
                            Id = 16,
                            AccessFailedCount = 0,
                            Address = "8432 Beahan Walks, New Lucyland, Kuwait",
                            ConcurrencyStamp = "6307da6a-6cfe-411c-abd5-c3b931ed0b3f",
                            CreatedAt = new DateTime(2024, 12, 17, 3, 17, 11, 990, DateTimeKind.Utc).AddTicks(3412),
                            Email = "Margaret33@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Margaret",
                            LastName = "Zulauf",
                            LockoutEnabled = false,
                            NormalizedEmail = "MARGARET33@HOTMAIL.COM",
                            NormalizedUserName = "MARGARET_ZULAUF47",
                            PasswordHash = "AQAAAAIAAYagAAAAEADET595vf+fZC3Rywn3qlQDcdiVUk3nxWQhDNWxzq8GnhyFYUNjUkczw3dofdf80g==",
                            PhoneNumber = "697-323-6676",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/784.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Margaret_Zulauf47"
                        },
                        new
                        {
                            Id = 17,
                            AccessFailedCount = 0,
                            Address = "70168 Waylon Course, Reichertside, Burundi",
                            ConcurrencyStamp = "4f3feaf2-1828-43c7-80ff-fdf970dc1882",
                            CreatedAt = new DateTime(2024, 6, 10, 3, 17, 11, 990, DateTimeKind.Utc).AddTicks(3636),
                            Email = "Aida63@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Aida",
                            LastName = "Wisoky",
                            LockoutEnabled = false,
                            NormalizedEmail = "AIDA63@YAHOO.COM",
                            NormalizedUserName = "AIDA16",
                            PasswordHash = "AQAAAAIAAYagAAAAEERk7K83i8uFoaPT0ljMJUI4DEbfsnuzZLx4JLDQ6wIfC5PG+VpikuiJpHihHhln+g==",
                            PhoneNumber = "651-745-3442",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/455.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Aida16"
                        },
                        new
                        {
                            Id = 18,
                            AccessFailedCount = 0,
                            Address = "17072 Rylee Inlet, Juanitafort, Bhutan",
                            ConcurrencyStamp = "588e535b-9e6c-4d32-99b7-adc99abefb97",
                            CreatedAt = new DateTime(2024, 5, 25, 3, 17, 11, 990, DateTimeKind.Utc).AddTicks(3850),
                            Email = "Alf77@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Alf",
                            LastName = "Friesen",
                            LockoutEnabled = false,
                            NormalizedEmail = "ALF77@YAHOO.COM",
                            NormalizedUserName = "ALF_FRIESEN17",
                            PasswordHash = "AQAAAAIAAYagAAAAEOC0NbMIyfZ1ILEqwkYuSGk7XOy0f4a5qNVFqq1gXNMQdaF/qnBm/Fx9qqWuNIjdKg==",
                            PhoneNumber = "114-698-9008",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/905.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Alf_Friesen17"
                        },
                        new
                        {
                            Id = 19,
                            AccessFailedCount = 0,
                            Address = "686 Houston Hill, Lake Randall, South Georgia and the South Sandwich Islands",
                            ConcurrencyStamp = "4a8ff03d-1460-4e9c-ae7a-65e54bfac5b8",
                            CreatedAt = new DateTime(2024, 1, 16, 3, 17, 11, 990, DateTimeKind.Utc).AddTicks(4089),
                            Email = "Emery_Graham@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Emery",
                            LastName = "Graham",
                            LockoutEnabled = false,
                            NormalizedEmail = "EMERY_GRAHAM@GMAIL.COM",
                            NormalizedUserName = "EMERY_GRAHAM12",
                            PasswordHash = "AQAAAAIAAYagAAAAENBSQGuSu0ZQhLa6YMeMfjJcZ6HjZ3JDrernf/a1xMjv1SI+PIsMepgg9nkUSUSdaQ==",
                            PhoneNumber = "747-994-1272",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/983.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Emery_Graham12"
                        },
                        new
                        {
                            Id = 20,
                            AccessFailedCount = 0,
                            Address = "83225 Daniella Plains, Colestad, Togo",
                            ConcurrencyStamp = "78af8ed7-8ebc-495e-ae55-6350a62316f6",
                            CreatedAt = new DateTime(2024, 3, 18, 3, 17, 11, 990, DateTimeKind.Utc).AddTicks(4308),
                            Email = "Charles_Weimann83@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Charles",
                            LastName = "Weimann",
                            LockoutEnabled = false,
                            NormalizedEmail = "CHARLES_WEIMANN83@HOTMAIL.COM",
                            NormalizedUserName = "CHARLES.WEIMANN",
                            PasswordHash = "AQAAAAIAAYagAAAAELzTC6/47PBYBkTwlmourLPNST1D16pRGWhyR3w2UuUBgUyJCaqy9cmi+8GAu4AnsQ==",
                            PhoneNumber = "854-325-0356",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/816.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Charles.Weimann"
                        },
                        new
                        {
                            Id = 21,
                            AccessFailedCount = 0,
                            Address = "9462 Rosenbaum Lakes, Treverhaven, Argentina",
                            ConcurrencyStamp = "51109907-721f-4dd5-a013-e0aedf53fb11",
                            CreatedAt = new DateTime(2024, 12, 27, 3, 17, 11, 990, DateTimeKind.Utc).AddTicks(4548),
                            Email = "Gayle28@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Gayle",
                            LastName = "Maggio",
                            LockoutEnabled = false,
                            NormalizedEmail = "GAYLE28@HOTMAIL.COM",
                            NormalizedUserName = "GAYLE62",
                            PasswordHash = "AQAAAAIAAYagAAAAEJ4eUAnZxrxW2HiBJ+mSONc+eVQ3LHF+5h0DxYuZjnn4htCRJCYlWQ11/RWFbua8BQ==",
                            PhoneNumber = "580-641-1673",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/1054.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Gayle62"
                        },
                        new
                        {
                            Id = 22,
                            AccessFailedCount = 0,
                            Address = "5198 Kunde Parks, Lake Raphael, Portugal",
                            ConcurrencyStamp = "2bce2df7-5d5e-470b-99a0-1f5c0e4e7440",
                            CreatedAt = new DateTime(2024, 7, 3, 3, 17, 11, 990, DateTimeKind.Utc).AddTicks(4781),
                            Email = "Margaret.Bogisich@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Margaret",
                            LastName = "Bogisich",
                            LockoutEnabled = false,
                            NormalizedEmail = "MARGARET.BOGISICH@HOTMAIL.COM",
                            NormalizedUserName = "MARGARET.BOGISICH",
                            PasswordHash = "AQAAAAIAAYagAAAAEBOU2maNua1Fo8zqJFL9XdUfitfBzI0RPTufJIixkN1QviYTDuJvJBmcyqBvCTYHKA==",
                            PhoneNumber = "647-006-2011",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/165.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Margaret.Bogisich"
                        },
                        new
                        {
                            Id = 23,
                            AccessFailedCount = 0,
                            Address = "3368 Austyn Village, North Hymanland, Ghana",
                            ConcurrencyStamp = "7b5fe783-33db-4e35-b11e-9c187b5cfa32",
                            CreatedAt = new DateTime(2024, 6, 10, 3, 17, 11, 990, DateTimeKind.Utc).AddTicks(5029),
                            Email = "Anna_Hettinger@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Anna",
                            LastName = "Hettinger",
                            LockoutEnabled = false,
                            NormalizedEmail = "ANNA_HETTINGER@HOTMAIL.COM",
                            NormalizedUserName = "ANNA3",
                            PasswordHash = "AQAAAAIAAYagAAAAEM3DEJHVgEFecd3+X+07PRXXCDoPjGWn3QROfKYkD2fn/+9GQ8J3LOu2oarAjjSeBA==",
                            PhoneNumber = "637-993-7232",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/1022.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Anna3"
                        },
                        new
                        {
                            Id = 24,
                            AccessFailedCount = 0,
                            Address = "552 Della Estate, Port Rosaliaville, Botswana",
                            ConcurrencyStamp = "2d7dd6c8-b37f-4ec9-815e-5d4eddd8a7e4",
                            CreatedAt = new DateTime(2024, 6, 6, 3, 17, 11, 990, DateTimeKind.Utc).AddTicks(5239),
                            Email = "Rebecca_Jones@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Rebecca",
                            LastName = "Jones",
                            LockoutEnabled = false,
                            NormalizedEmail = "REBECCA_JONES@GMAIL.COM",
                            NormalizedUserName = "REBECCA36",
                            PasswordHash = "AQAAAAIAAYagAAAAEHqiByK3RPxa1e4Y5RsI7b2o9CPQTE9UkAkpXWQGWPx+kFP3m8O25vgX3jBJkHOC8w==",
                            PhoneNumber = "846-506-9279",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/658.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Rebecca36"
                        },
                        new
                        {
                            Id = 25,
                            AccessFailedCount = 0,
                            Address = "2638 Doyle Track, Franeckiport, Democratic People's Republic of Korea",
                            ConcurrencyStamp = "25f0c4d0-ebd0-458a-8b28-3b5da5824ae7",
                            CreatedAt = new DateTime(2025, 1, 1, 3, 17, 11, 990, DateTimeKind.Utc).AddTicks(5469),
                            Email = "Chandler_Paucek89@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Chandler",
                            LastName = "Paucek",
                            LockoutEnabled = false,
                            NormalizedEmail = "CHANDLER_PAUCEK89@HOTMAIL.COM",
                            NormalizedUserName = "CHANDLER93",
                            PasswordHash = "AQAAAAIAAYagAAAAEKEN7tO7tdt1qAH/qeAg3FMz4cdtWpmVB+6aLI+xwCj6KdI/Zo8ly8T47sEn6ESt2w==",
                            PhoneNumber = "983-932-7212",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/134.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Chandler93"
                        },
                        new
                        {
                            Id = 26,
                            AccessFailedCount = 0,
                            Address = "1013 Doyle Rue, Port Caraside, Belize",
                            ConcurrencyStamp = "3fbc1120-5c59-4d3d-8fb0-89ca982ed628",
                            CreatedAt = new DateTime(2024, 5, 31, 3, 17, 11, 990, DateTimeKind.Utc).AddTicks(5763),
                            Email = "Delaney57@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Delaney",
                            LastName = "Emmerich",
                            LockoutEnabled = false,
                            NormalizedEmail = "DELANEY57@HOTMAIL.COM",
                            NormalizedUserName = "DELANEY_EMMERICH",
                            PasswordHash = "AQAAAAIAAYagAAAAEJWqaBaagfkvo+/vGiM0Vgm2R/NlnS6wRBOIx/zfUkBREvxEEEPhXaJ40H9OZBF3qQ==",
                            PhoneNumber = "083-816-3659",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/134.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Delaney_Emmerich"
                        },
                        new
                        {
                            Id = 27,
                            AccessFailedCount = 0,
                            Address = "712 Bednar Ridges, Cyrilside, Iraq",
                            ConcurrencyStamp = "7c8b4b3b-7f7d-44c6-b25d-fa8ee67010d3",
                            CreatedAt = new DateTime(2024, 8, 19, 3, 17, 11, 990, DateTimeKind.Utc).AddTicks(5978),
                            Email = "Destiney_Heller46@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Destiney",
                            LastName = "Heller",
                            LockoutEnabled = false,
                            NormalizedEmail = "DESTINEY_HELLER46@YAHOO.COM",
                            NormalizedUserName = "DESTINEY.HELLER",
                            PasswordHash = "AQAAAAIAAYagAAAAEBeN20ijBEqdjZh6wEEMFojcGFbbItlImWhby48fgK7OyJlHvJ7c5K03gf2GMrZMVA==",
                            PhoneNumber = "586-415-2331",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/1236.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Destiney.Heller"
                        },
                        new
                        {
                            Id = 28,
                            AccessFailedCount = 0,
                            Address = "81583 Willy Ways, Briellefurt, Belize",
                            ConcurrencyStamp = "cd936abf-cb2b-440d-bf95-c4b0ae9b4b5f",
                            CreatedAt = new DateTime(2024, 9, 11, 3, 17, 11, 990, DateTimeKind.Utc).AddTicks(6216),
                            Email = "Sydnee48@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Sydnee",
                            LastName = "Wilderman",
                            LockoutEnabled = false,
                            NormalizedEmail = "SYDNEE48@HOTMAIL.COM",
                            NormalizedUserName = "SYDNEE_WILDERMAN",
                            PasswordHash = "AQAAAAIAAYagAAAAEF547fseIahRlDV08uU1HsFWijH7kC0A3PrdKGOHCp3aaXhZf+Vlgpl0iyDUh5smXw==",
                            PhoneNumber = "957-674-9004",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/1104.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Sydnee_Wilderman"
                        },
                        new
                        {
                            Id = 29,
                            AccessFailedCount = 0,
                            Address = "42106 Laisha Unions, Skilesburgh, Liberia",
                            ConcurrencyStamp = "c4777414-225b-4254-b160-ffb252b7fd00",
                            CreatedAt = new DateTime(2024, 2, 18, 3, 17, 11, 990, DateTimeKind.Utc).AddTicks(6414),
                            Email = "Kailey36@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Kailey",
                            LastName = "Jacobi",
                            LockoutEnabled = false,
                            NormalizedEmail = "KAILEY36@GMAIL.COM",
                            NormalizedUserName = "KAILEY64",
                            PasswordHash = "AQAAAAIAAYagAAAAEFEhpTt3KJ7oc6TJF1JlmUjd+MkGPLuuCMqGLxBbVtuaIbzxlGQ2XrjgBJ4XIyaJPw==",
                            PhoneNumber = "773-648-1203",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/1196.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Kailey64"
                        },
                        new
                        {
                            Id = 30,
                            AccessFailedCount = 0,
                            Address = "70486 Fritsch Meadows, North Nicklaus, Seychelles",
                            ConcurrencyStamp = "760fad5d-d44f-46dd-b933-d03175b55e81",
                            CreatedAt = new DateTime(2024, 3, 4, 3, 17, 11, 990, DateTimeKind.Utc).AddTicks(6646),
                            Email = "Jairo.Konopelski@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Jairo",
                            LastName = "Konopelski",
                            LockoutEnabled = false,
                            NormalizedEmail = "JAIRO.KONOPELSKI@GMAIL.COM",
                            NormalizedUserName = "JAIRO13",
                            PasswordHash = "AQAAAAIAAYagAAAAEE9vAPc2zWgqkfbn53aqRBbnOrIOFqmY9guv2nkBBxpJT/WpzQWu4yfkANEygrExGA==",
                            PhoneNumber = "030-295-2359",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/179.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Jairo13"
                        },
                        new
                        {
                            Id = 31,
                            AccessFailedCount = 0,
                            Address = "3352 Foster Point, Lake Frank, Ecuador",
                            ConcurrencyStamp = "6c0e2cb2-bc9e-4ae2-ba3a-5c9e01fe5ce5",
                            CreatedAt = new DateTime(2024, 3, 1, 3, 17, 11, 990, DateTimeKind.Utc).AddTicks(6856),
                            Email = "Jeanne_Feil64@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Jeanne",
                            LastName = "Feil",
                            LockoutEnabled = false,
                            NormalizedEmail = "JEANNE_FEIL64@GMAIL.COM",
                            NormalizedUserName = "JEANNE.FEIL",
                            PasswordHash = "AQAAAAIAAYagAAAAEMDSccPiFTdyl8oDp6DLQg3y6Aywbwkxz6UY5BS77Cqs641FOwZAu/NFW7iuQAUsiA==",
                            PhoneNumber = "480-426-0322",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/1134.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Jeanne.Feil"
                        },
                        new
                        {
                            Id = 32,
                            AccessFailedCount = 0,
                            Address = "336 Fred Trail, South Trishaberg, Bahamas",
                            ConcurrencyStamp = "57c47f9a-852b-4270-ad51-eef1763f6e56",
                            CreatedAt = new DateTime(2024, 3, 10, 3, 17, 11, 990, DateTimeKind.Utc).AddTicks(7108),
                            Email = "Alene43@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Alene",
                            LastName = "Osinski",
                            LockoutEnabled = false,
                            NormalizedEmail = "ALENE43@GMAIL.COM",
                            NormalizedUserName = "ALENE7",
                            PasswordHash = "AQAAAAIAAYagAAAAECR+oTL9V0lUS/tEX+H+AG+LbmV+QfnN/BaZ6bM/citvMogIcL71RtbB0i/8cVOAmw==",
                            PhoneNumber = "366-761-8657",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/566.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Alene7"
                        },
                        new
                        {
                            Id = 33,
                            AccessFailedCount = 0,
                            Address = "24188 McGlynn Center, Bodetown, French Guiana",
                            ConcurrencyStamp = "6335fc71-451c-4d64-b494-e1f92dac82dc",
                            CreatedAt = new DateTime(2024, 2, 13, 3, 17, 11, 990, DateTimeKind.Utc).AddTicks(7309),
                            Email = "Amely.Kreiger@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Amely",
                            LastName = "Kreiger",
                            LockoutEnabled = false,
                            NormalizedEmail = "AMELY.KREIGER@HOTMAIL.COM",
                            NormalizedUserName = "AMELY.KREIGER93",
                            PasswordHash = "AQAAAAIAAYagAAAAEOuJ9BTLMIoT0STLT1R48FXWn4eRdKDrhQniUQFv9pJklenOIO7hYeZvj0s99A7fyw==",
                            PhoneNumber = "344-482-2072",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/850.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Amely.Kreiger93"
                        },
                        new
                        {
                            Id = 34,
                            AccessFailedCount = 0,
                            Address = "95086 Sipes Valleys, Americostad, Fiji",
                            ConcurrencyStamp = "cbc13b0d-dce1-41a6-b52c-91d475c91ef9",
                            CreatedAt = new DateTime(2024, 12, 28, 3, 17, 11, 990, DateTimeKind.Utc).AddTicks(7543),
                            Email = "Gloria76@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Gloria",
                            LastName = "Hackett",
                            LockoutEnabled = false,
                            NormalizedEmail = "GLORIA76@HOTMAIL.COM",
                            NormalizedUserName = "GLORIA.HACKETT",
                            PasswordHash = "AQAAAAIAAYagAAAAEAl2StWHViHBTq1Yi7z/eEmf8ZQBum1UMOc89Ly4dwvAIZW9OrJM7N3GuUkOzatn9w==",
                            PhoneNumber = "563-473-6355",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/190.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Gloria.Hackett"
                        },
                        new
                        {
                            Id = 35,
                            AccessFailedCount = 0,
                            Address = "1037 Donnell Fall, North Maiyastad, Chad",
                            ConcurrencyStamp = "4b80be15-889c-4d0e-b65c-b899609264d6",
                            CreatedAt = new DateTime(2024, 5, 2, 3, 17, 11, 990, DateTimeKind.Utc).AddTicks(7742),
                            Email = "Warren_Grady@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Warren",
                            LastName = "Grady",
                            LockoutEnabled = false,
                            NormalizedEmail = "WARREN_GRADY@HOTMAIL.COM",
                            NormalizedUserName = "WARREN_GRADY77",
                            PasswordHash = "AQAAAAIAAYagAAAAENvhkWgu3LwtznPE6MgH1DYNBzSAA2No6PNaWbNKyIUTFJg9l5hRRA1tmbtq16ftcA==",
                            PhoneNumber = "982-532-9219",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/590.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Warren_Grady77"
                        },
                        new
                        {
                            Id = 36,
                            AccessFailedCount = 0,
                            Address = "8341 Josefina Garden, Lake Cierra, Zimbabwe",
                            ConcurrencyStamp = "924d9f61-7458-4776-b4a5-da675ce12917",
                            CreatedAt = new DateTime(2024, 7, 14, 3, 17, 11, 990, DateTimeKind.Utc).AddTicks(7981),
                            Email = "Roosevelt.Bernhard90@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Roosevelt",
                            LastName = "Bernhard",
                            LockoutEnabled = false,
                            NormalizedEmail = "ROOSEVELT.BERNHARD90@HOTMAIL.COM",
                            NormalizedUserName = "ROOSEVELT.BERNHARD",
                            PasswordHash = "AQAAAAIAAYagAAAAEI4gx3/HssDJO+9md2oQKRFYp1VgJiZMlc+zgxqorYEnVk45PJnVDCDy8K/J72j06w==",
                            PhoneNumber = "132-442-3711",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/187.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Roosevelt.Bernhard"
                        },
                        new
                        {
                            Id = 37,
                            AccessFailedCount = 0,
                            Address = "6938 Gerlach Brook, Haleybury, Lesotho",
                            ConcurrencyStamp = "04c2da5c-a47b-4747-939a-bf9c9c12df23",
                            CreatedAt = new DateTime(2024, 6, 7, 3, 17, 11, 990, DateTimeKind.Utc).AddTicks(8198),
                            Email = "Archibald43@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Archibald",
                            LastName = "Lesch",
                            LockoutEnabled = false,
                            NormalizedEmail = "ARCHIBALD43@GMAIL.COM",
                            NormalizedUserName = "ARCHIBALD33",
                            PasswordHash = "AQAAAAIAAYagAAAAEBH85aKRcqUNoMguoHbQq9MwDWmGwJ2mtfcxQbqB52G8FhteF5l27VYp+pWZPnbpRA==",
                            PhoneNumber = "147-718-6521",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/350.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Archibald33"
                        },
                        new
                        {
                            Id = 38,
                            AccessFailedCount = 0,
                            Address = "06407 Nova Dale, Jenningsmouth, Honduras",
                            ConcurrencyStamp = "bab62c00-3eeb-4fa8-ade1-71ca20ea0658",
                            CreatedAt = new DateTime(2024, 10, 31, 3, 17, 11, 990, DateTimeKind.Utc).AddTicks(8453),
                            Email = "Timmothy_Wiegand37@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Timmothy",
                            LastName = "Wiegand",
                            LockoutEnabled = false,
                            NormalizedEmail = "TIMMOTHY_WIEGAND37@YAHOO.COM",
                            NormalizedUserName = "TIMMOTHY30",
                            PasswordHash = "AQAAAAIAAYagAAAAEOpu1gRVBVcNYPnWJXeU8F4l4rSEH4BUdL5pzeNK1NLWScG5Nl6EH78q+EM1hugLRg==",
                            PhoneNumber = "976-464-6260",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/482.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Timmothy30"
                        },
                        new
                        {
                            Id = 39,
                            AccessFailedCount = 0,
                            Address = "52601 Irving Mall, North Maximoton, Finland",
                            ConcurrencyStamp = "600ab8c2-d4b4-40bf-aa02-58810f981e8d",
                            CreatedAt = new DateTime(2024, 4, 8, 3, 17, 11, 990, DateTimeKind.Utc).AddTicks(8661),
                            Email = "Dejah26@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Dejah",
                            LastName = "McDermott",
                            LockoutEnabled = false,
                            NormalizedEmail = "DEJAH26@HOTMAIL.COM",
                            NormalizedUserName = "DEJAH.MCDERMOTT",
                            PasswordHash = "AQAAAAIAAYagAAAAEBMDYUgq1io9StEbZE8O7IYHibRWznRKKVBvV3FTqhrmrLq7dLCcg58p/kmIBRTj5g==",
                            PhoneNumber = "537-187-8319",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/1011.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Dejah.McDermott"
                        },
                        new
                        {
                            Id = 40,
                            AccessFailedCount = 0,
                            Address = "84065 Missouri Turnpike, Margaritaburgh, Sao Tome and Principe",
                            ConcurrencyStamp = "3d163945-24d6-4c75-b03d-175daf79027e",
                            CreatedAt = new DateTime(2024, 5, 8, 3, 17, 11, 990, DateTimeKind.Utc).AddTicks(8890),
                            Email = "Tiffany4@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Tiffany",
                            LastName = "Conroy",
                            LockoutEnabled = false,
                            NormalizedEmail = "TIFFANY4@YAHOO.COM",
                            NormalizedUserName = "TIFFANY69",
                            PasswordHash = "AQAAAAIAAYagAAAAEKcn0LBxUdrlKexT3Ri++e094Cizf1RikzrDVo31kllGEN03TwFx0ipL2U2l6bmVng==",
                            PhoneNumber = "680-775-5651",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/214.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Tiffany69"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Address", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.User", "User")
                        .WithMany("Addresses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.BannerDetail", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Banner", "Banner")
                        .WithMany("BannerDetails")
                        .HasForeignKey("BannerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManboShopAPI.Domain.Entities.Product", "Product")
                        .WithMany("BannerDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Banner");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Cart", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("User");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.CartItem", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Cart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManboShopAPI.Domain.Entities.Product", "Product")
                        .WithMany("CartItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.CouponCondition", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Coupon", "Coupon")
                        .WithMany("CouponConditions")
                        .HasForeignKey("CouponId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Coupon");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Favorite", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Product", "Product")
                        .WithMany("Favorites")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManboShopAPI.Domain.Entities.User", "User")
                        .WithMany("Favorites")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Feedback", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Product", "Product")
                        .WithMany("Feedbacks")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManboShopAPI.Domain.Entities.User", "User")
                        .WithMany("Feedbacks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.NewsDetail", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.News", "News")
                        .WithMany("NewsDetails")
                        .HasForeignKey("NewsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManboShopAPI.Domain.Entities.Product", "Product")
                        .WithMany("NewsDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("News");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Order", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Coupon", "Coupon")
                        .WithMany("Orders")
                        .HasForeignKey("CouponId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ManboShopAPI.Domain.Entities.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Coupon");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.OrderDetail", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Coupon", "Coupon")
                        .WithMany("OrderDetails")
                        .HasForeignKey("CouponId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ManboShopAPI.Domain.Entities.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManboShopAPI.Domain.Entities.Product", "Product")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Coupon");

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Product", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ManboShopAPI.Domain.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Brand");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.ProductAttributeValue", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Attributes", "Attribute")
                        .WithMany("ProductAttributeValues")
                        .HasForeignKey("AttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManboShopAPI.Domain.Entities.Product", "Product")
                        .WithMany("ProductAttributeValues")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attribute");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.ProductImage", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Product", "Product")
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManboShopAPI.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Attributes", b =>
                {
                    b.Navigation("ProductAttributeValues");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Banner", b =>
                {
                    b.Navigation("BannerDetails");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Brand", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Cart", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Coupon", b =>
                {
                    b.Navigation("CouponConditions");

                    b.Navigation("OrderDetails");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.News", b =>
                {
                    b.Navigation("NewsDetails");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Product", b =>
                {
                    b.Navigation("BannerDetails");

                    b.Navigation("CartItems");

                    b.Navigation("Favorites");

                    b.Navigation("Feedbacks");

                    b.Navigation("NewsDetails");

                    b.Navigation("OrderDetails");

                    b.Navigation("ProductAttributeValues");

                    b.Navigation("ProductImages");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.User", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Favorites");

                    b.Navigation("Feedbacks");

                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
