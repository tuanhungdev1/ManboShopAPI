// <auto-generated />
using System;
using ManboShopAPI.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ManboShopAPI.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250208222105_createTableOrderAddress")]
    partial class createTableOrderAddress
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ManboShopAPI.Application.Services.VariantValueImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("VariantValueId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VariantValueId");

                    b.ToTable("VariantValueImages");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AddressLine")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Attributes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Attributes");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Banner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Banners");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.BannerDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BannerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BannerId");

                    b.HasIndex("ProductId");

                    b.ToTable("BannerDetails");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.CartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductVariantValueId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("ProductVariantValueId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("ParentCategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ParentCategoryId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Coupon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CurrentUsages")
                        .HasColumnType("int");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("MaxUsages")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Coupons");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.CouponCondition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Attribute")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("CouponId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DiscountAmount")
                        .HasColumnType("int");

                    b.Property<string>("Operator")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Value")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CouponId");

                    b.ToTable("CouponConditions");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Favorite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Favorites");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Star")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.FeedbackLike", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("FeedbackId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FeedbackId");

                    b.HasIndex("UserId");

                    b.ToTable("FeedbackLikes");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.FeedbackReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("FeedbackId")
                        .HasColumnType("int");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FeedbackId");

                    b.HasIndex("UserId");

                    b.ToTable("FeedbackReports");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.News", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("News");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.NewsDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("NewsId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("NewsId");

                    b.HasIndex("ProductId");

                    b.ToTable("NewsDetails");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CancelledAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ConfirmedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CouponId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeliveredAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("PaymentMethod")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("PaymentStatus")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ProcessedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ShippedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ShippingAddressId")
                        .HasColumnType("int");

                    b.Property<decimal>("ShippingFee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("SubTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CouponId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.OrderAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AddressLine")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.ToTable("OrderAddresses");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.OrderDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CouponId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductVariantValueId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CouponId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductVariantValueId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BrandId")
                        .HasColumnType("int");

                    b.Property<int>("BuyTurn")
                        .HasColumnType("int");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("OldPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("SlugName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Specification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.ProductAttributeValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AttributeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AttributeId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductAttributeValues");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.ProductImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductImages");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.ProductVariantValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("OldPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("Sku")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductVariantValues");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfilePictureUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("VerificationCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("VerificationCodeExpiryTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            Address = "345 O'Hara Coves, New Madisyn, Portugal",
                            ConcurrencyStamp = "e1986744-2d64-4034-88b9-2a423e41a1a2",
                            CreatedAt = new DateTime(2024, 7, 24, 22, 21, 3, 64, DateTimeKind.Utc).AddTicks(1825),
                            Email = "Theodore.Schroeder37@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Theodore",
                            LastName = "Schroeder",
                            LockoutEnabled = false,
                            NormalizedEmail = "THEODORE.SCHROEDER37@YAHOO.COM",
                            NormalizedUserName = "THEODORE.SCHROEDER",
                            PasswordHash = "AQAAAAIAAYagAAAAEOhszMr8xOk2X6S2KQ+RHEJAAEOI1b/Zh+nI0HPG22ge96g+Ls3ymSGlQvNOXA8Tcw==",
                            PhoneNumber = "605-340-5861",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/769.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Theodore.Schroeder"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            Address = "765 Koepp Mountains, Grantstad, Venezuela",
                            ConcurrencyStamp = "6e819021-ab7e-4315-9b95-cb80ea23d965",
                            CreatedAt = new DateTime(2024, 11, 20, 22, 21, 3, 65, DateTimeKind.Utc).AddTicks(3712),
                            Email = "Sandra.Walker95@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Sandra",
                            LastName = "Walker",
                            LockoutEnabled = false,
                            NormalizedEmail = "SANDRA.WALKER95@GMAIL.COM",
                            NormalizedUserName = "SANDRA50",
                            PasswordHash = "AQAAAAIAAYagAAAAEA7FGme7ANgPsDZXI6hbOEB+Jp0sQhrsupMc9ajSezyAynpGpaVzqBiTWV/kKgjFNQ==",
                            PhoneNumber = "792-002-9827",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/649.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Sandra50"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            Address = "455 Schimmel Road, West Elvera, Ireland",
                            ConcurrencyStamp = "70a4ea81-c1e1-4273-b24a-761585d7420d",
                            CreatedAt = new DateTime(2024, 3, 17, 22, 21, 3, 65, DateTimeKind.Utc).AddTicks(4000),
                            Email = "Veronica_Fay6@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Veronica",
                            LastName = "Fay",
                            LockoutEnabled = false,
                            NormalizedEmail = "VERONICA_FAY6@GMAIL.COM",
                            NormalizedUserName = "VERONICA2",
                            PasswordHash = "AQAAAAIAAYagAAAAEIM17QC4IhfvmjZnTXUqtym+7JoNy+uHNcCwXZjDkIzYWghx8C6lZaDQkRpLAO7Zgw==",
                            PhoneNumber = "584-525-1501",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/550.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Veronica2"
                        },
                        new
                        {
                            Id = 4,
                            AccessFailedCount = 0,
                            Address = "9860 Trinity Ford, Lindgrenfurt, Somalia",
                            ConcurrencyStamp = "033d32c2-abc6-4348-a827-5264869e5df5",
                            CreatedAt = new DateTime(2024, 8, 14, 22, 21, 3, 65, DateTimeKind.Utc).AddTicks(4266),
                            Email = "Bernadine.Bernhard@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Bernadine",
                            LastName = "Bernhard",
                            LockoutEnabled = false,
                            NormalizedEmail = "BERNADINE.BERNHARD@YAHOO.COM",
                            NormalizedUserName = "BERNADINE.BERNHARD",
                            PasswordHash = "AQAAAAIAAYagAAAAEDOS3XHLSBv+1UKZ/O8fc2yERWfIYO/89ShuaZLA3Prq2KBsGElATJkyazO8PYMlUQ==",
                            PhoneNumber = "487-456-8804",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/219.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Bernadine.Bernhard"
                        },
                        new
                        {
                            Id = 5,
                            AccessFailedCount = 0,
                            Address = "5475 Torrance Brook, Port Ginoberg, Cook Islands",
                            ConcurrencyStamp = "d0e63d65-af71-4df5-851c-2a15040dd5e5",
                            CreatedAt = new DateTime(2024, 3, 30, 22, 21, 3, 65, DateTimeKind.Utc).AddTicks(4480),
                            Email = "Domingo36@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Domingo",
                            LastName = "Ernser",
                            LockoutEnabled = false,
                            NormalizedEmail = "DOMINGO36@YAHOO.COM",
                            NormalizedUserName = "DOMINGO28",
                            PasswordHash = "AQAAAAIAAYagAAAAEMI34NSkiwYCpdE9M57EwmDN5cRlEabdpwFJ7rT4nEZeYsDKIBobz9HK4hb88CRZUQ==",
                            PhoneNumber = "116-136-6837",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/920.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Domingo28"
                        },
                        new
                        {
                            Id = 6,
                            AccessFailedCount = 0,
                            Address = "1874 Bechtelar Road, Geovannyborough, Ukraine",
                            ConcurrencyStamp = "76dbc93a-a3d4-48fe-9486-80ae41f12158",
                            CreatedAt = new DateTime(2024, 12, 22, 22, 21, 3, 65, DateTimeKind.Utc).AddTicks(4723),
                            Email = "Jayden.Collier62@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Jayden",
                            LastName = "Collier",
                            LockoutEnabled = false,
                            NormalizedEmail = "JAYDEN.COLLIER62@YAHOO.COM",
                            NormalizedUserName = "JAYDEN_COLLIER33",
                            PasswordHash = "AQAAAAIAAYagAAAAEGQKV7JxgpWQ39383Ufe6D983+TYoRaed+0LMsqigcAfneT4NAFTuyMKYw3s0bxssQ==",
                            PhoneNumber = "721-010-8282",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/424.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Jayden_Collier33"
                        },
                        new
                        {
                            Id = 7,
                            AccessFailedCount = 0,
                            Address = "215 Kulas Canyon, Lessieport, Rwanda",
                            ConcurrencyStamp = "59adbcac-ac79-42f2-8851-9f7ce3c6a637",
                            CreatedAt = new DateTime(2024, 3, 15, 22, 21, 3, 65, DateTimeKind.Utc).AddTicks(4930),
                            Email = "Dena.Bergnaum36@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Dena",
                            LastName = "Bergnaum",
                            LockoutEnabled = false,
                            NormalizedEmail = "DENA.BERGNAUM36@GMAIL.COM",
                            NormalizedUserName = "DENA.BERGNAUM8",
                            PasswordHash = "AQAAAAIAAYagAAAAEC20y0ViZX5aRvAD/DgzTmISfjfrHw6+l72JTITRc7dlbhuPAwmT5ILixX6MfOjOLw==",
                            PhoneNumber = "539-863-9648",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/993.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Dena.Bergnaum8"
                        },
                        new
                        {
                            Id = 8,
                            AccessFailedCount = 0,
                            Address = "835 Carol Circle, South Alanna, Samoa",
                            ConcurrencyStamp = "4e84d49d-bd8f-4749-8349-086ecda02e80",
                            CreatedAt = new DateTime(2024, 4, 27, 22, 21, 3, 65, DateTimeKind.Utc).AddTicks(5163),
                            Email = "Nikki_Spencer@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Nikki",
                            LastName = "Spencer",
                            LockoutEnabled = false,
                            NormalizedEmail = "NIKKI_SPENCER@HOTMAIL.COM",
                            NormalizedUserName = "NIKKI_SPENCER77",
                            PasswordHash = "AQAAAAIAAYagAAAAEFpFAhLEIgWa5I7R2Z/+nC+ZWVh1ecpc/HjlHagR/I+VfOLU7VH/6+ioQuBVUjXcfQ==",
                            PhoneNumber = "801-712-8989",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/893.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Nikki_Spencer77"
                        },
                        new
                        {
                            Id = 9,
                            AccessFailedCount = 0,
                            Address = "7005 Cheyenne Locks, Zoilaville, Solomon Islands",
                            ConcurrencyStamp = "7b93ec44-6373-460e-a419-e24526321c4f",
                            CreatedAt = new DateTime(2024, 12, 4, 22, 21, 3, 65, DateTimeKind.Utc).AddTicks(5387),
                            Email = "Marshall3@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Marshall",
                            LastName = "Gaylord",
                            LockoutEnabled = false,
                            NormalizedEmail = "MARSHALL3@GMAIL.COM",
                            NormalizedUserName = "MARSHALL.GAYLORD30",
                            PasswordHash = "AQAAAAIAAYagAAAAEK4v/SFbbkjlS1U71hDWVGJ85xNz3VjLUKvI0F0o8H1GNmt4RawYAEkEzJn86WdrIQ==",
                            PhoneNumber = "529-475-1170",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/1030.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Marshall.Gaylord30"
                        },
                        new
                        {
                            Id = 10,
                            AccessFailedCount = 0,
                            Address = "58751 Sherman Plain, Westmouth, Malaysia",
                            ConcurrencyStamp = "2519a727-70f7-4329-9c88-2e27a152ba49",
                            CreatedAt = new DateTime(2024, 12, 8, 22, 21, 3, 65, DateTimeKind.Utc).AddTicks(5644),
                            Email = "Leola.Rogahn19@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Leola",
                            LastName = "Rogahn",
                            LockoutEnabled = false,
                            NormalizedEmail = "LEOLA.ROGAHN19@GMAIL.COM",
                            NormalizedUserName = "LEOLA60",
                            PasswordHash = "AQAAAAIAAYagAAAAEDT85dv5gSzIyD0JNxwii0iULG9Vn/+giWWyyS2BmCF5uJbhE5BnFSBIameWTkr5Dw==",
                            PhoneNumber = "895-870-3208",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/928.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Leola60"
                        },
                        new
                        {
                            Id = 11,
                            AccessFailedCount = 0,
                            Address = "2862 Green Course, Darwinmouth, Democratic People's Republic of Korea",
                            ConcurrencyStamp = "4651d8c7-a477-41f9-a664-e8fc3585c271",
                            CreatedAt = new DateTime(2024, 7, 2, 22, 21, 3, 65, DateTimeKind.Utc).AddTicks(5830),
                            Email = "Gwendolyn_Spinka1@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Gwendolyn",
                            LastName = "Spinka",
                            LockoutEnabled = false,
                            NormalizedEmail = "GWENDOLYN_SPINKA1@GMAIL.COM",
                            NormalizedUserName = "GWENDOLYN.SPINKA65",
                            PasswordHash = "AQAAAAIAAYagAAAAEPKUZvpU0YvC7v7eXF1XQq7ebM8iihhfhOqPwZN5oXmnErnOmiFiz4WXjJ8m1z4zVQ==",
                            PhoneNumber = "600-483-5928",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/965.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Gwendolyn.Spinka65"
                        },
                        new
                        {
                            Id = 12,
                            AccessFailedCount = 0,
                            Address = "2320 Lura Alley, Laronmouth, Bahrain",
                            ConcurrencyStamp = "4aa8e551-3b8e-4a83-b4d7-3b78cae5e615",
                            CreatedAt = new DateTime(2024, 4, 11, 22, 21, 3, 65, DateTimeKind.Utc).AddTicks(6057),
                            Email = "Lucy.Torp@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Lucy",
                            LastName = "Torp",
                            LockoutEnabled = false,
                            NormalizedEmail = "LUCY.TORP@GMAIL.COM",
                            NormalizedUserName = "LUCY.TORP47",
                            PasswordHash = "AQAAAAIAAYagAAAAECPRP2HpaGSeVywuom+TvS/QOINNdbqR3Hra8jK0UOFdqnuq2ZbV/wSnLp1KTnbp9Q==",
                            PhoneNumber = "933-261-7703",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/1034.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Lucy.Torp47"
                        },
                        new
                        {
                            Id = 13,
                            AccessFailedCount = 0,
                            Address = "452 Lowe Hollow, East Bobby, Cayman Islands",
                            ConcurrencyStamp = "0e65898b-9cfb-4219-8eda-f9855ed76fcb",
                            CreatedAt = new DateTime(2024, 6, 24, 22, 21, 3, 65, DateTimeKind.Utc).AddTicks(6250),
                            Email = "Breanne_Renner71@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Breanne",
                            LastName = "Renner",
                            LockoutEnabled = false,
                            NormalizedEmail = "BREANNE_RENNER71@YAHOO.COM",
                            NormalizedUserName = "BREANNE53",
                            PasswordHash = "AQAAAAIAAYagAAAAEBLW1tPUCdBIB3hsYV0+v607qo5WFgvgEHQJbgaqGynFxAximqxhS7COu29iGd2vuw==",
                            PhoneNumber = "488-244-3125",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/1018.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Breanne53"
                        },
                        new
                        {
                            Id = 14,
                            AccessFailedCount = 0,
                            Address = "9695 Marquardt Valleys, Lake Myriam, Yemen",
                            ConcurrencyStamp = "fa58854c-5186-4a14-a45b-22d72d0d877e",
                            CreatedAt = new DateTime(2024, 4, 21, 22, 21, 3, 65, DateTimeKind.Utc).AddTicks(6477),
                            Email = "Sammie_Ullrich12@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Sammie",
                            LastName = "Ullrich",
                            LockoutEnabled = false,
                            NormalizedEmail = "SAMMIE_ULLRICH12@HOTMAIL.COM",
                            NormalizedUserName = "SAMMIE.ULLRICH90",
                            PasswordHash = "AQAAAAIAAYagAAAAEGpk4gHORRkWixMmy0iY40gVd2e1qJ3df92klPNLdVSu034+c9F/KJubZ2xwQgWM7Q==",
                            PhoneNumber = "846-646-1125",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/1095.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Sammie.Ullrich90"
                        },
                        new
                        {
                            Id = 15,
                            AccessFailedCount = 0,
                            Address = "3728 Jesse Forest, New Dangelo, Cameroon",
                            ConcurrencyStamp = "eb20852c-55ac-43e8-b58d-0121e53af942",
                            CreatedAt = new DateTime(2025, 1, 29, 22, 21, 3, 65, DateTimeKind.Utc).AddTicks(6662),
                            Email = "Randi91@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Randi",
                            LastName = "Herzog",
                            LockoutEnabled = false,
                            NormalizedEmail = "RANDI91@GMAIL.COM",
                            NormalizedUserName = "RANDI37",
                            PasswordHash = "AQAAAAIAAYagAAAAENQB11iCEkpM2yFsn3NWP30vG2uvrxAfFGBqcMxfxt3l4kv0SDboCmTZYUE6WkSYRQ==",
                            PhoneNumber = "358-277-1456",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/290.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Randi37"
                        },
                        new
                        {
                            Id = 16,
                            AccessFailedCount = 0,
                            Address = "7800 Wisoky Island, South Alexandro, Portugal",
                            ConcurrencyStamp = "04f5570b-278d-4d8e-8f5b-2fca9e7a32c4",
                            CreatedAt = new DateTime(2024, 12, 3, 22, 21, 3, 65, DateTimeKind.Utc).AddTicks(6857),
                            Email = "Estel_Fadel24@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Estel",
                            LastName = "Fadel",
                            LockoutEnabled = false,
                            NormalizedEmail = "ESTEL_FADEL24@YAHOO.COM",
                            NormalizedUserName = "ESTEL27",
                            PasswordHash = "AQAAAAIAAYagAAAAEJM1lyzJ2kkdqb0Ed7ZtUP5ZFdidgYi3KeEtBus7xfvjMIP8+TOy3obW8A1o8vFzaA==",
                            PhoneNumber = "059-276-7366",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/1151.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Estel27"
                        },
                        new
                        {
                            Id = 17,
                            AccessFailedCount = 0,
                            Address = "45851 Bailey Grove, Nedraberg, Norfolk Island",
                            ConcurrencyStamp = "98df0be2-be32-4c29-bf69-e331f30e9858",
                            CreatedAt = new DateTime(2024, 8, 24, 22, 21, 3, 65, DateTimeKind.Utc).AddTicks(7053),
                            Email = "Zetta.Schamberger@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Zetta",
                            LastName = "Schamberger",
                            LockoutEnabled = false,
                            NormalizedEmail = "ZETTA.SCHAMBERGER@YAHOO.COM",
                            NormalizedUserName = "ZETTA88",
                            PasswordHash = "AQAAAAIAAYagAAAAEMmvoYdJlTm3KP/KvRy6es65EkcIH2xopbh4+TUc/N3S6O7EW8mWs/BhN4rOmIK03w==",
                            PhoneNumber = "708-967-6983",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/854.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Zetta88"
                        },
                        new
                        {
                            Id = 18,
                            AccessFailedCount = 0,
                            Address = "37547 Cora Glens, West Israelmouth, United Kingdom",
                            ConcurrencyStamp = "24949c01-94c4-488c-afc1-4f75d34c99bf",
                            CreatedAt = new DateTime(2024, 11, 18, 22, 21, 3, 65, DateTimeKind.Utc).AddTicks(7293),
                            Email = "Webster12@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Webster",
                            LastName = "Kozey",
                            LockoutEnabled = false,
                            NormalizedEmail = "WEBSTER12@YAHOO.COM",
                            NormalizedUserName = "WEBSTER_KOZEY85",
                            PasswordHash = "AQAAAAIAAYagAAAAENWg45Jis/oZflvk6Wlkuigz5oD0whXgIK8s1NG9yI1xOQGru/0xGIXFMngolhUAsQ==",
                            PhoneNumber = "852-726-0166",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/1028.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Webster_Kozey85"
                        },
                        new
                        {
                            Id = 19,
                            AccessFailedCount = 0,
                            Address = "29462 Goodwin Squares, Lake Tiafurt, China",
                            ConcurrencyStamp = "1eacd4e6-a6cb-4e7e-ad31-d6722dc889c6",
                            CreatedAt = new DateTime(2024, 5, 18, 22, 21, 3, 65, DateTimeKind.Utc).AddTicks(7476),
                            Email = "Dianna_Littel@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Dianna",
                            LastName = "Littel",
                            LockoutEnabled = false,
                            NormalizedEmail = "DIANNA_LITTEL@GMAIL.COM",
                            NormalizedUserName = "DIANNA60",
                            PasswordHash = "AQAAAAIAAYagAAAAENLGqaI74zJq9+LAG7txbyU3Qffneo+JLss0fYlvx/MUc1N8TCnKSYrFUHynEZwaIg==",
                            PhoneNumber = "133-217-0030",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/249.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Dianna60"
                        },
                        new
                        {
                            Id = 20,
                            AccessFailedCount = 0,
                            Address = "358 Halvorson Mount, East Seamusburgh, Somalia",
                            ConcurrencyStamp = "060b4909-bf20-40b6-a7f0-bca1cccfae27",
                            CreatedAt = new DateTime(2024, 5, 19, 22, 21, 3, 65, DateTimeKind.Utc).AddTicks(7704),
                            Email = "Dariana.Runolfsson@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Dariana",
                            LastName = "Runolfsson",
                            LockoutEnabled = false,
                            NormalizedEmail = "DARIANA.RUNOLFSSON@GMAIL.COM",
                            NormalizedUserName = "DARIANA_RUNOLFSSON",
                            PasswordHash = "AQAAAAIAAYagAAAAEJ41kaWSuFWU5BwECqR+cQCVtXfPZFq3twCRE4ZdjrTRVN0WN2apF/RDrZDocAlgNw==",
                            PhoneNumber = "324-912-8285",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/744.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Dariana_Runolfsson"
                        },
                        new
                        {
                            Id = 21,
                            AccessFailedCount = 0,
                            Address = "81498 Berge Corner, Henriport, Jamaica",
                            ConcurrencyStamp = "670f8ca8-fe8d-4007-8c29-4eb6b8bbca57",
                            CreatedAt = new DateTime(2024, 11, 19, 22, 21, 3, 65, DateTimeKind.Utc).AddTicks(7901),
                            Email = "Stephany23@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Stephany",
                            LastName = "Abbott",
                            LockoutEnabled = false,
                            NormalizedEmail = "STEPHANY23@HOTMAIL.COM",
                            NormalizedUserName = "STEPHANY.ABBOTT",
                            PasswordHash = "AQAAAAIAAYagAAAAEF8s9ubvGrHz1gUiONoVTDhxoyMmhxCV8OEuYCfpH31QSbtyAVS9otaO5K3iDDW+Kg==",
                            PhoneNumber = "430-210-1808",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/621.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Stephany.Abbott"
                        },
                        new
                        {
                            Id = 22,
                            AccessFailedCount = 0,
                            Address = "107 Wilkinson Glens, Lake Blaiseberg, Taiwan",
                            ConcurrencyStamp = "863e042d-df39-4e61-92a7-a04468402bab",
                            CreatedAt = new DateTime(2024, 10, 31, 22, 21, 3, 65, DateTimeKind.Utc).AddTicks(8084),
                            Email = "Myah14@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Myah",
                            LastName = "Walsh",
                            LockoutEnabled = false,
                            NormalizedEmail = "MYAH14@YAHOO.COM",
                            NormalizedUserName = "MYAH34",
                            PasswordHash = "AQAAAAIAAYagAAAAEPexFZcWMDxv5clylD9380Lp5jDM2cCsLO92pV5aYS4o+ANwiiwQXOP0aStl1d9zqg==",
                            PhoneNumber = "011-308-5522",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/961.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Myah34"
                        },
                        new
                        {
                            Id = 23,
                            AccessFailedCount = 0,
                            Address = "524 Treutel Courts, Kenyattaberg, Spain",
                            ConcurrencyStamp = "56c52cc3-8ca1-4a49-b6f2-0cc9df583ea0",
                            CreatedAt = new DateTime(2024, 12, 7, 22, 21, 3, 65, DateTimeKind.Utc).AddTicks(8303),
                            Email = "Chase_Kemmer@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Chase",
                            LastName = "Kemmer",
                            LockoutEnabled = false,
                            NormalizedEmail = "CHASE_KEMMER@HOTMAIL.COM",
                            NormalizedUserName = "CHASE67",
                            PasswordHash = "AQAAAAIAAYagAAAAELOWPuc+kpGOnaB/cWA/s/cKfC1ik1jOOgRlsoVECooaCld9yiXDc4eb57raeVjqXg==",
                            PhoneNumber = "926-351-7612",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/161.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Chase67"
                        },
                        new
                        {
                            Id = 24,
                            AccessFailedCount = 0,
                            Address = "23504 Adriel Shoal, Marlenemouth, Virgin Islands, U.S.",
                            ConcurrencyStamp = "45779433-7d85-4bbf-a894-2d8dc074e8cc",
                            CreatedAt = new DateTime(2024, 12, 13, 22, 21, 3, 65, DateTimeKind.Utc).AddTicks(8478),
                            Email = "Jaylan.Heaney@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Jaylan",
                            LastName = "Heaney",
                            LockoutEnabled = false,
                            NormalizedEmail = "JAYLAN.HEANEY@YAHOO.COM",
                            NormalizedUserName = "JAYLAN_HEANEY79",
                            PasswordHash = "AQAAAAIAAYagAAAAEEwGDBBbPR14XuweOI6+TvrMFxHmr2QVsLqSiS05HdkPpdn+gttmVl6e3hkl2Zu1eA==",
                            PhoneNumber = "607-920-1203",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/89.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Jaylan_Heaney79"
                        },
                        new
                        {
                            Id = 25,
                            AccessFailedCount = 0,
                            Address = "364 Fay Place, East Pierre, Venezuela",
                            ConcurrencyStamp = "f022d26b-9e73-4d5d-b9dd-9df434aa471e",
                            CreatedAt = new DateTime(2024, 12, 29, 22, 21, 3, 65, DateTimeKind.Utc).AddTicks(8696),
                            Email = "Loyal4@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Loyal",
                            LastName = "Sanford",
                            LockoutEnabled = false,
                            NormalizedEmail = "LOYAL4@HOTMAIL.COM",
                            NormalizedUserName = "LOYAL.SANFORD",
                            PasswordHash = "AQAAAAIAAYagAAAAEANnRnDFeTNf4GQOmFDR7JI+3OhhDurHGU+DcY44t1mh9A/APo+WiKewLXZONpenIw==",
                            PhoneNumber = "156-976-0103",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/413.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Loyal.Sanford"
                        },
                        new
                        {
                            Id = 26,
                            AccessFailedCount = 0,
                            Address = "709 Vada Crescent, Wehnermouth, India",
                            ConcurrencyStamp = "652ce822-2765-4355-bee4-d0a32e8c9d51",
                            CreatedAt = new DateTime(2024, 3, 26, 22, 21, 3, 65, DateTimeKind.Utc).AddTicks(8899),
                            Email = "Solon59@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Solon",
                            LastName = "Anderson",
                            LockoutEnabled = false,
                            NormalizedEmail = "SOLON59@YAHOO.COM",
                            NormalizedUserName = "SOLON_ANDERSON",
                            PasswordHash = "AQAAAAIAAYagAAAAED8pXxWNvzvbgX8ffmuCluOrQZZwgm9MQE/iZt9xJUrC8ZSQSI5hPnh55qwU2dTHzw==",
                            PhoneNumber = "239-415-1550",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/964.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Solon_Anderson"
                        },
                        new
                        {
                            Id = 27,
                            AccessFailedCount = 0,
                            Address = "678 Bradtke Ports, New Jaiden, United States of America",
                            ConcurrencyStamp = "7d80aec2-9c68-43a4-96f2-148fa0720e46",
                            CreatedAt = new DateTime(2024, 4, 19, 22, 21, 3, 65, DateTimeKind.Utc).AddTicks(9154),
                            Email = "Myrtice_Gutkowski85@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Myrtice",
                            LastName = "Gutkowski",
                            LockoutEnabled = false,
                            NormalizedEmail = "MYRTICE_GUTKOWSKI85@HOTMAIL.COM",
                            NormalizedUserName = "MYRTICE.GUTKOWSKI",
                            PasswordHash = "AQAAAAIAAYagAAAAELNG8tphqrJi8aBYlZWNqmPHY9U0JdIlYbql61FRLGcvTOvRdipnE9P+Pq9lRVjG5A==",
                            PhoneNumber = "088-150-9004",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/551.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Myrtice.Gutkowski"
                        },
                        new
                        {
                            Id = 28,
                            AccessFailedCount = 0,
                            Address = "430 Rhianna Tunnel, Vidalland, Saint Vincent and the Grenadines",
                            ConcurrencyStamp = "fb2b4ca0-a9ea-46e3-a180-adb0b44cf2e4",
                            CreatedAt = new DateTime(2024, 10, 28, 22, 21, 3, 65, DateTimeKind.Utc).AddTicks(9319),
                            Email = "Ora_Botsford@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Ora",
                            LastName = "Botsford",
                            LockoutEnabled = false,
                            NormalizedEmail = "ORA_BOTSFORD@HOTMAIL.COM",
                            NormalizedUserName = "ORA.BOTSFORD",
                            PasswordHash = "AQAAAAIAAYagAAAAEA3VKZ2VtDAFtvJX1hCjy/iiM1kc9qvK3JYeA8ax1Ym/KdKejLn7/Ij+Xftj6o8ifw==",
                            PhoneNumber = "781-328-6885",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/417.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Ora.Botsford"
                        },
                        new
                        {
                            Id = 29,
                            AccessFailedCount = 0,
                            Address = "0780 Ellen Summit, North Stanfurt, Cuba",
                            ConcurrencyStamp = "80081857-2b53-4adf-868a-06091f9522ae",
                            CreatedAt = new DateTime(2024, 10, 18, 22, 21, 3, 65, DateTimeKind.Utc).AddTicks(9554),
                            Email = "Lloyd_Beatty46@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Lloyd",
                            LastName = "Beatty",
                            LockoutEnabled = false,
                            NormalizedEmail = "LLOYD_BEATTY46@HOTMAIL.COM",
                            NormalizedUserName = "LLOYD38",
                            PasswordHash = "AQAAAAIAAYagAAAAEOGoC3CikY2cNxMZ+9QOZfFAqXzMAs5s2J35r+JD6htAMSyWwRle+jHJgHYnyzTdFA==",
                            PhoneNumber = "550-260-5537",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/50.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Lloyd38"
                        },
                        new
                        {
                            Id = 30,
                            AccessFailedCount = 0,
                            Address = "1685 Eden Stream, East Alycefurt, Guatemala",
                            ConcurrencyStamp = "2265e960-c34f-4474-abcd-a42d7a9dc0ce",
                            CreatedAt = new DateTime(2024, 3, 2, 22, 21, 3, 65, DateTimeKind.Utc).AddTicks(9738),
                            Email = "Vallie90@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Vallie",
                            LastName = "Cassin",
                            LockoutEnabled = false,
                            NormalizedEmail = "VALLIE90@HOTMAIL.COM",
                            NormalizedUserName = "VALLIE77",
                            PasswordHash = "AQAAAAIAAYagAAAAEDpzOaWKg7kLXcbB9NTRm3TC1+06uwZga6XCu7YjCNhguwYh8ZiD0yucfTbTHWMLEQ==",
                            PhoneNumber = "773-589-2062",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/290.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Vallie77"
                        },
                        new
                        {
                            Id = 31,
                            AccessFailedCount = 0,
                            Address = "65762 Chesley Corners, Karinebury, Falkland Islands (Malvinas)",
                            ConcurrencyStamp = "39f08143-f8c9-4baf-b3d0-b5a45eeaff6e",
                            CreatedAt = new DateTime(2024, 6, 23, 22, 21, 3, 65, DateTimeKind.Utc).AddTicks(9979),
                            Email = "Cordelia.Dickinson@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Cordelia",
                            LastName = "Dickinson",
                            LockoutEnabled = false,
                            NormalizedEmail = "CORDELIA.DICKINSON@GMAIL.COM",
                            NormalizedUserName = "CORDELIA_DICKINSON67",
                            PasswordHash = "AQAAAAIAAYagAAAAEBrTkconC2A1jXLP5ekLbZKzCdXgnCrNfDw00FOAHvJyfzR8HoqUeXBwSWIikFViDg==",
                            PhoneNumber = "065-732-5680",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/617.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Cordelia_Dickinson67"
                        },
                        new
                        {
                            Id = 32,
                            AccessFailedCount = 0,
                            Address = "4636 Judge Brooks, Mallieville, Hong Kong",
                            ConcurrencyStamp = "ad05aa3b-9947-4c98-b94b-b74e5196f66c",
                            CreatedAt = new DateTime(2025, 1, 11, 22, 21, 3, 66, DateTimeKind.Utc).AddTicks(143),
                            Email = "Gus14@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Gus",
                            LastName = "Mann",
                            LockoutEnabled = false,
                            NormalizedEmail = "GUS14@GMAIL.COM",
                            NormalizedUserName = "GUS91",
                            PasswordHash = "AQAAAAIAAYagAAAAEEvcuJ/B9dwFBClJ5Qg0Mdr1bDKGueaOpjdo9s30a9AQ/Sg+A7Z4VMrzqS8evNCvYQ==",
                            PhoneNumber = "528-574-9822",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/207.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Gus91"
                        },
                        new
                        {
                            Id = 33,
                            AccessFailedCount = 0,
                            Address = "09999 Rosalyn Circle, South Rebekahfurt, Brazil",
                            ConcurrencyStamp = "5c952c1d-8666-48ea-a1b6-041710276dad",
                            CreatedAt = new DateTime(2024, 5, 14, 22, 21, 3, 66, DateTimeKind.Utc).AddTicks(350),
                            Email = "Ryan_Homenick46@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Ryan",
                            LastName = "Homenick",
                            LockoutEnabled = false,
                            NormalizedEmail = "RYAN_HOMENICK46@GMAIL.COM",
                            NormalizedUserName = "RYAN.HOMENICK64",
                            PasswordHash = "AQAAAAIAAYagAAAAEPl8EsmDABZ9FzOeGtGpPrYiVCGIOisPob6R6RNqyjgcQo6UpHUDq5qrsAceBHdA0A==",
                            PhoneNumber = "980-935-6601",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/584.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Ryan.Homenick64"
                        },
                        new
                        {
                            Id = 34,
                            AccessFailedCount = 0,
                            Address = "96814 Hyatt Path, Reynatown, Lao People's Democratic Republic",
                            ConcurrencyStamp = "55fa9437-2ca7-4fcd-9bbe-e843e7eff44e",
                            CreatedAt = new DateTime(2024, 12, 27, 22, 21, 3, 66, DateTimeKind.Utc).AddTicks(533),
                            Email = "Dalton17@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Dalton",
                            LastName = "Herman",
                            LockoutEnabled = false,
                            NormalizedEmail = "DALTON17@HOTMAIL.COM",
                            NormalizedUserName = "DALTON_HERMAN",
                            PasswordHash = "AQAAAAIAAYagAAAAELEjKGQPvEX9OqWUVHdUGg5ud8ofaRdp3eIf4dAudG0MhzeM5d+WFcPyf+L1oQqxxA==",
                            PhoneNumber = "193-423-1791",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/34.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Dalton_Herman"
                        },
                        new
                        {
                            Id = 35,
                            AccessFailedCount = 0,
                            Address = "25846 Legros Squares, New Deontaeberg, Pitcairn Islands",
                            ConcurrencyStamp = "2ff67f6f-781c-472e-844f-652cb4f25129",
                            CreatedAt = new DateTime(2024, 8, 31, 22, 21, 3, 66, DateTimeKind.Utc).AddTicks(762),
                            Email = "Otto_Jenkins@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Otto",
                            LastName = "Jenkins",
                            LockoutEnabled = false,
                            NormalizedEmail = "OTTO_JENKINS@YAHOO.COM",
                            NormalizedUserName = "OTTO_JENKINS61",
                            PasswordHash = "AQAAAAIAAYagAAAAEM3Nfcs+Gi7xuPPXWn0toFQV457Or60THA39TytaTZMTaafDFm+KRu0C7YiIOOcAAw==",
                            PhoneNumber = "938-240-0141",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/533.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Otto_Jenkins61"
                        },
                        new
                        {
                            Id = 36,
                            AccessFailedCount = 0,
                            Address = "8688 Jazmyne Key, Daisyland, Mauritania",
                            ConcurrencyStamp = "5e58c4e6-0d99-4ede-bc42-5e0acff46a3b",
                            CreatedAt = new DateTime(2025, 1, 15, 22, 21, 3, 66, DateTimeKind.Utc).AddTicks(941),
                            Email = "Rae.Osinski@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Rae",
                            LastName = "Osinski",
                            LockoutEnabled = false,
                            NormalizedEmail = "RAE.OSINSKI@HOTMAIL.COM",
                            NormalizedUserName = "RAE79",
                            PasswordHash = "AQAAAAIAAYagAAAAENk3wbVTxbvMWsdKN/8GqUX2mOQPhUs7oyvwgHX4edTTtMXeXF0J7XApBtdu7asKHQ==",
                            PhoneNumber = "563-430-4945",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/437.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Rae79"
                        },
                        new
                        {
                            Id = 37,
                            AccessFailedCount = 0,
                            Address = "29167 Patsy Gardens, Rodriguezville, Egypt",
                            ConcurrencyStamp = "b75e6154-9564-430e-be98-c874d3811211",
                            CreatedAt = new DateTime(2024, 9, 29, 22, 21, 3, 66, DateTimeKind.Utc).AddTicks(1161),
                            Email = "Freddy_Russel60@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Freddy",
                            LastName = "Russel",
                            LockoutEnabled = false,
                            NormalizedEmail = "FREDDY_RUSSEL60@YAHOO.COM",
                            NormalizedUserName = "FREDDY_RUSSEL81",
                            PasswordHash = "AQAAAAIAAYagAAAAEONafctfZm9+n7njDM9qnFElBfppkknlw0NmVjq18erQimJkSqhj3kjEYsJJWScHZg==",
                            PhoneNumber = "238-930-5751",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/219.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Freddy_Russel81"
                        },
                        new
                        {
                            Id = 38,
                            AccessFailedCount = 0,
                            Address = "5195 Ritchie Square, South Nilsville, Netherlands",
                            ConcurrencyStamp = "001c1fb1-c404-494c-bbac-907b0cb4ae05",
                            CreatedAt = new DateTime(2024, 12, 23, 22, 21, 3, 66, DateTimeKind.Utc).AddTicks(1331),
                            Email = "Kip_Zieme59@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Kip",
                            LastName = "Zieme",
                            LockoutEnabled = false,
                            NormalizedEmail = "KIP_ZIEME59@YAHOO.COM",
                            NormalizedUserName = "KIP71",
                            PasswordHash = "AQAAAAIAAYagAAAAEOHN4gGygBDZfds+zDc5xuEW8gQfRqUowP788bzDr6slaxK0UtdSkb9hmVA2+ZWMCQ==",
                            PhoneNumber = "421-232-3826",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/1038.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Kip71"
                        },
                        new
                        {
                            Id = 39,
                            AccessFailedCount = 0,
                            Address = "65391 Ratke Wells, West Rosannaview, Mongolia",
                            ConcurrencyStamp = "b2e4199b-1b3d-4b26-9e5e-aa55f31c61c8",
                            CreatedAt = new DateTime(2024, 2, 17, 22, 21, 3, 66, DateTimeKind.Utc).AddTicks(1530),
                            Email = "Stewart69@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Stewart",
                            LastName = "Crist",
                            LockoutEnabled = false,
                            NormalizedEmail = "STEWART69@YAHOO.COM",
                            NormalizedUserName = "STEWART53",
                            PasswordHash = "AQAAAAIAAYagAAAAEIlrnz1G8pZ3KoGb0NWfssPx/n1bdfdHT9AQOrRgu6caYr9VzfHxf1xWFC42OBsG7A==",
                            PhoneNumber = "528-547-0313",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/160.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Stewart53"
                        },
                        new
                        {
                            Id = 40,
                            AccessFailedCount = 0,
                            Address = "748 Stacey Ville, Lake Adam, Svalbard & Jan Mayen Islands",
                            ConcurrencyStamp = "142a00b6-a1fc-4cbf-8773-e4fc0fd68ed0",
                            CreatedAt = new DateTime(2024, 3, 18, 22, 21, 3, 66, DateTimeKind.Utc).AddTicks(1714),
                            Email = "Enos.Hilpert@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Enos",
                            LastName = "Hilpert",
                            LockoutEnabled = false,
                            NormalizedEmail = "ENOS.HILPERT@GMAIL.COM",
                            NormalizedUserName = "ENOS34",
                            PasswordHash = "AQAAAAIAAYagAAAAECHhuxq8CfbOieOcry/C1MSGgSHg0J/zRCPyXOOVAZJpwXarYwATJ4CyNxuwAC3OaA==",
                            PhoneNumber = "479-118-5291",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/520.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Enos34"
                        });
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Variant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Variants");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.VariantValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VariantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VariantId");

                    b.ToTable("VariantValues");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ManboShopAPI.Application.Services.VariantValueImage", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.VariantValue", "VariantValue")
                        .WithMany("VariantValueImages")
                        .HasForeignKey("VariantValueId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("VariantValue");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Address", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.User", "User")
                        .WithMany("Addresses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.BannerDetail", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Banner", "Banner")
                        .WithMany("BannerDetails")
                        .HasForeignKey("BannerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManboShopAPI.Domain.Entities.Product", "Product")
                        .WithMany("BannerDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Banner");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Cart", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("User");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.CartItem", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Cart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManboShopAPI.Domain.Entities.ProductVariantValue", "ProductVariantValue")
                        .WithMany("CartItems")
                        .HasForeignKey("ProductVariantValueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("ProductVariantValue");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Category", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Category", "ParentCategory")
                        .WithMany("SubCategories")
                        .HasForeignKey("ParentCategoryId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.CouponCondition", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Coupon", "Coupon")
                        .WithMany("CouponConditions")
                        .HasForeignKey("CouponId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Coupon");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Favorite", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Product", "Product")
                        .WithMany("Favorites")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManboShopAPI.Domain.Entities.User", "User")
                        .WithMany("Favorites")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Feedback", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Product", "Product")
                        .WithMany("Feedbacks")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ManboShopAPI.Domain.Entities.User", "User")
                        .WithMany("Feedbacks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.FeedbackLike", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Feedback", "Feedback")
                        .WithMany("FeedbackLikes")
                        .HasForeignKey("FeedbackId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ManboShopAPI.Domain.Entities.User", "User")
                        .WithMany("FeedbackLikes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Feedback");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.FeedbackReport", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Feedback", "Feedback")
                        .WithMany("FeedbackReports")
                        .HasForeignKey("FeedbackId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ManboShopAPI.Domain.Entities.User", "User")
                        .WithMany("FeedbackReports")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Feedback");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.NewsDetail", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.News", "News")
                        .WithMany("NewsDetails")
                        .HasForeignKey("NewsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManboShopAPI.Domain.Entities.Product", "Product")
                        .WithMany("NewsDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("News");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Order", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Coupon", null)
                        .WithMany("Orders")
                        .HasForeignKey("CouponId");

                    b.HasOne("ManboShopAPI.Domain.Entities.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("User");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.OrderAddress", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Order", "Order")
                        .WithOne("ShippingAddress")
                        .HasForeignKey("ManboShopAPI.Domain.Entities.OrderAddress", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.OrderDetail", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Coupon", null)
                        .WithMany("OrderDetails")
                        .HasForeignKey("CouponId");

                    b.HasOne("ManboShopAPI.Domain.Entities.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManboShopAPI.Domain.Entities.ProductVariantValue", "ProductVariantValue")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductVariantValueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("ProductVariantValue");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Product", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ManboShopAPI.Domain.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Brand");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.ProductAttributeValue", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Attributes", "Attribute")
                        .WithMany("ProductAttributeValues")
                        .HasForeignKey("AttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManboShopAPI.Domain.Entities.Product", "Product")
                        .WithMany("ProductAttributeValues")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attribute");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.ProductImage", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Product", "Product")
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.ProductVariantValue", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Product", "Product")
                        .WithMany("ProductVariantValues")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.VariantValue", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Variant", "Variant")
                        .WithMany("VariantValues")
                        .HasForeignKey("VariantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Variant");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManboShopAPI.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Attributes", b =>
                {
                    b.Navigation("ProductAttributeValues");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Banner", b =>
                {
                    b.Navigation("BannerDetails");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Brand", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Cart", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Category", b =>
                {
                    b.Navigation("Products");

                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Coupon", b =>
                {
                    b.Navigation("CouponConditions");

                    b.Navigation("OrderDetails");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Feedback", b =>
                {
                    b.Navigation("FeedbackLikes");

                    b.Navigation("FeedbackReports");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.News", b =>
                {
                    b.Navigation("NewsDetails");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Order", b =>
                {
                    b.Navigation("OrderDetails");

                    b.Navigation("ShippingAddress")
                        .IsRequired();
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Product", b =>
                {
                    b.Navigation("BannerDetails");

                    b.Navigation("Favorites");

                    b.Navigation("Feedbacks");

                    b.Navigation("NewsDetails");

                    b.Navigation("ProductAttributeValues");

                    b.Navigation("ProductImages");

                    b.Navigation("ProductVariantValues");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.ProductVariantValue", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.User", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Favorites");

                    b.Navigation("FeedbackLikes");

                    b.Navigation("FeedbackReports");

                    b.Navigation("Feedbacks");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Variant", b =>
                {
                    b.Navigation("VariantValues");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.VariantValue", b =>
                {
                    b.Navigation("VariantValueImages");
                });
#pragma warning restore 612, 618
        }
    }
}
