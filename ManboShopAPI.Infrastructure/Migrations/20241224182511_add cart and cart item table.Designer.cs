// <auto-generated />
using System;
using ManboShopAPI.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ManboShopAPI.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241224182511_add cart and cart item table")]
    partial class addcartandcartitemtable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AreaOrColonyOrStreetOrSectorOrVillage")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("BuildingOrCompanyOrApartment")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FlatOrHouse")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PinCode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Banner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Banners");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.BannerDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BannerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BannerId");

                    b.HasIndex("ProductId");

                    b.ToTable("BannerDetails");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Brands");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 12, 24, 18, 25, 10, 219, DateTimeKind.Utc).AddTicks(246),
                            ImageUrl = "https://example.com/images/nike.jpg",
                            Name = "Nike"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 12, 24, 18, 25, 10, 219, DateTimeKind.Utc).AddTicks(651),
                            ImageUrl = "https://example.com/images/adidas.jpg",
                            Name = "Adidas"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 12, 24, 18, 25, 10, 219, DateTimeKind.Utc).AddTicks(653),
                            ImageUrl = "https://example.com/images/gucci.jpg",
                            Name = "Gucci"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2024, 12, 24, 18, 25, 10, 219, DateTimeKind.Utc).AddTicks(654),
                            ImageUrl = "https://example.com/images/louis-vuitton.jpg",
                            Name = "Louis Vuitton"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2024, 12, 24, 18, 25, 10, 219, DateTimeKind.Utc).AddTicks(655),
                            ImageUrl = "https://example.com/images/zara.jpg",
                            Name = "Zara"
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2024, 12, 24, 18, 25, 10, 219, DateTimeKind.Utc).AddTicks(658),
                            ImageUrl = "https://example.com/images/h&m.jpg",
                            Name = "H&M"
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2024, 12, 24, 18, 25, 10, 219, DateTimeKind.Utc).AddTicks(659),
                            ImageUrl = "https://example.com/images/chanel.jpg",
                            Name = "Chanel"
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2024, 12, 24, 18, 25, 10, 219, DateTimeKind.Utc).AddTicks(660),
                            ImageUrl = "https://example.com/images/prada.jpg",
                            Name = "Prada"
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2024, 12, 24, 18, 25, 10, 219, DateTimeKind.Utc).AddTicks(661),
                            ImageUrl = "https://example.com/images/versace.jpg",
                            Name = "Versace"
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2024, 12, 24, 18, 25, 10, 219, DateTimeKind.Utc).AddTicks(663),
                            ImageUrl = "https://example.com/images/burberry.jpg",
                            Name = "Burberry"
                        },
                        new
                        {
                            Id = 11,
                            CreatedAt = new DateTime(2024, 12, 24, 18, 25, 10, 219, DateTimeKind.Utc).AddTicks(664),
                            ImageUrl = "https://example.com/images/dior.jpg",
                            Name = "Dior"
                        },
                        new
                        {
                            Id = 12,
                            CreatedAt = new DateTime(2024, 12, 24, 18, 25, 10, 219, DateTimeKind.Utc).AddTicks(665),
                            ImageUrl = "https://example.com/images/calvin-klein.jpg",
                            Name = "Calvin Klein"
                        },
                        new
                        {
                            Id = 13,
                            CreatedAt = new DateTime(2024, 12, 24, 18, 25, 10, 219, DateTimeKind.Utc).AddTicks(666),
                            ImageUrl = "https://example.com/images/tommy-hilfiger.jpg",
                            Name = "Tommy Hilfiger"
                        },
                        new
                        {
                            Id = 14,
                            CreatedAt = new DateTime(2024, 12, 24, 18, 25, 10, 219, DateTimeKind.Utc).AddTicks(667),
                            ImageUrl = "https://example.com/images/levis.jpg",
                            Name = "Levi's"
                        },
                        new
                        {
                            Id = 15,
                            CreatedAt = new DateTime(2024, 12, 24, 18, 25, 10, 219, DateTimeKind.Utc).AddTicks(668),
                            ImageUrl = "https://example.com/images/uniqlo.jpg",
                            Name = "Uniqlo"
                        },
                        new
                        {
                            Id = 16,
                            CreatedAt = new DateTime(2024, 12, 24, 18, 25, 10, 219, DateTimeKind.Utc).AddTicks(669),
                            ImageUrl = "https://example.com/images/lacoste.jpg",
                            Name = "Lacoste"
                        },
                        new
                        {
                            Id = 17,
                            CreatedAt = new DateTime(2024, 12, 24, 18, 25, 10, 219, DateTimeKind.Utc).AddTicks(670),
                            ImageUrl = "https://example.com/images/the-north-face.jpg",
                            Name = "The North Face"
                        },
                        new
                        {
                            Id = 18,
                            CreatedAt = new DateTime(2024, 12, 24, 18, 25, 10, 219, DateTimeKind.Utc).AddTicks(672),
                            ImageUrl = "https://example.com/images/ralph-lauren.jpg",
                            Name = "Ralph Lauren"
                        },
                        new
                        {
                            Id = 19,
                            CreatedAt = new DateTime(2024, 12, 24, 18, 25, 10, 219, DateTimeKind.Utc).AddTicks(673),
                            ImageUrl = "https://example.com/images/puma.jpg",
                            Name = "Puma"
                        },
                        new
                        {
                            Id = 20,
                            CreatedAt = new DateTime(2024, 12, 24, 18, 25, 10, 219, DateTimeKind.Utc).AddTicks(674),
                            ImageUrl = "https://example.com/images/hugo-boss.jpg",
                            Name = "Hugo Boss"
                        },
                        new
                        {
                            Id = 21,
                            CreatedAt = new DateTime(2024, 12, 24, 18, 25, 10, 219, DateTimeKind.Utc).AddTicks(675),
                            ImageUrl = "https://example.com/images/armani.jpg",
                            Name = "Armani"
                        },
                        new
                        {
                            Id = 22,
                            CreatedAt = new DateTime(2024, 12, 24, 18, 25, 10, 219, DateTimeKind.Utc).AddTicks(676),
                            ImageUrl = "https://example.com/images/balenciaga.jpg",
                            Name = "Balenciaga"
                        },
                        new
                        {
                            Id = 23,
                            CreatedAt = new DateTime(2024, 12, 24, 18, 25, 10, 219, DateTimeKind.Utc).AddTicks(677),
                            ImageUrl = "https://example.com/images/fendi.jpg",
                            Name = "Fendi"
                        },
                        new
                        {
                            Id = 24,
                            CreatedAt = new DateTime(2024, 12, 24, 18, 25, 10, 219, DateTimeKind.Utc).AddTicks(678),
                            ImageUrl = "https://example.com/images/givenchy.jpg",
                            Name = "Givenchy"
                        },
                        new
                        {
                            Id = 25,
                            CreatedAt = new DateTime(2024, 12, 24, 18, 25, 10, 219, DateTimeKind.Utc).AddTicks(679),
                            ImageUrl = "https://example.com/images/hermes.jpg",
                            Name = "Hermès"
                        },
                        new
                        {
                            Id = 26,
                            CreatedAt = new DateTime(2024, 12, 24, 18, 25, 10, 219, DateTimeKind.Utc).AddTicks(680),
                            ImageUrl = "https://example.com/images/salvatore-ferragamo.jpg",
                            Name = "Salvatore Ferragamo"
                        },
                        new
                        {
                            Id = 27,
                            CreatedAt = new DateTime(2024, 12, 24, 18, 25, 10, 219, DateTimeKind.Utc).AddTicks(681),
                            ImageUrl = "https://example.com/images/valentino.jpg",
                            Name = "Valentino"
                        },
                        new
                        {
                            Id = 28,
                            CreatedAt = new DateTime(2024, 12, 24, 18, 25, 10, 219, DateTimeKind.Utc).AddTicks(738),
                            ImageUrl = "https://example.com/images/dolce-gabbana.jpg",
                            Name = "Dolce & Gabbana"
                        },
                        new
                        {
                            Id = 29,
                            CreatedAt = new DateTime(2024, 12, 24, 18, 25, 10, 219, DateTimeKind.Utc).AddTicks(740),
                            ImageUrl = "https://example.com/images/gap.jpg",
                            Name = "Gap"
                        },
                        new
                        {
                            Id = 30,
                            CreatedAt = new DateTime(2024, 12, 24, 18, 25, 10, 219, DateTimeKind.Utc).AddTicks(755),
                            ImageUrl = "https://example.com/images/forever21.jpg",
                            Name = "Forever 21"
                        },
                        new
                        {
                            Id = 31,
                            CreatedAt = new DateTime(2024, 12, 24, 18, 25, 10, 219, DateTimeKind.Utc).AddTicks(756),
                            ImageUrl = "https://example.com/images/new-balance.jpg",
                            Name = "New Balance"
                        },
                        new
                        {
                            Id = 32,
                            CreatedAt = new DateTime(2024, 12, 24, 18, 25, 10, 219, DateTimeKind.Utc).AddTicks(757),
                            ImageUrl = "https://example.com/images/vans.jpg",
                            Name = "Vans"
                        },
                        new
                        {
                            Id = 33,
                            CreatedAt = new DateTime(2024, 12, 24, 18, 25, 10, 219, DateTimeKind.Utc).AddTicks(758),
                            ImageUrl = "https://example.com/images/converse.jpg",
                            Name = "Converse"
                        },
                        new
                        {
                            Id = 34,
                            CreatedAt = new DateTime(2024, 12, 24, 18, 25, 10, 219, DateTimeKind.Utc).AddTicks(759),
                            ImageUrl = "https://example.com/images/under-armour.jpg",
                            Name = "Under Armour"
                        },
                        new
                        {
                            Id = 35,
                            CreatedAt = new DateTime(2024, 12, 24, 18, 25, 10, 219, DateTimeKind.Utc).AddTicks(760),
                            ImageUrl = "https://example.com/images/reebok.jpg",
                            Name = "Reebok"
                        },
                        new
                        {
                            Id = 36,
                            CreatedAt = new DateTime(2024, 12, 24, 18, 25, 10, 219, DateTimeKind.Utc).AddTicks(761),
                            ImageUrl = "https://example.com/images/coach.jpg",
                            Name = "Coach"
                        },
                        new
                        {
                            Id = 37,
                            CreatedAt = new DateTime(2024, 12, 24, 18, 25, 10, 219, DateTimeKind.Utc).AddTicks(762),
                            ImageUrl = "https://example.com/images/kate-spade.jpg",
                            Name = "Kate Spade"
                        },
                        new
                        {
                            Id = 38,
                            CreatedAt = new DateTime(2024, 12, 24, 18, 25, 10, 219, DateTimeKind.Utc).AddTicks(763),
                            ImageUrl = "https://example.com/images/michael-kors.jpg",
                            Name = "Michael Kors"
                        },
                        new
                        {
                            Id = 39,
                            CreatedAt = new DateTime(2024, 12, 24, 18, 25, 10, 219, DateTimeKind.Utc).AddTicks(764),
                            ImageUrl = "https://example.com/images/bally.jpg",
                            Name = "Bally"
                        },
                        new
                        {
                            Id = 40,
                            CreatedAt = new DateTime(2024, 12, 24, 18, 25, 10, 219, DateTimeKind.Utc).AddTicks(765),
                            ImageUrl = "https://example.com/images/guess.jpg",
                            Name = "Guess"
                        });
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("SessionId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.CartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("ProductId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 12, 24, 18, 25, 7, 413, DateTimeKind.Utc).AddTicks(5171),
                            ImageUrl = "https://example.com/images/men-clothing.jpg",
                            Name = "Men's Clothing"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 12, 24, 18, 25, 7, 413, DateTimeKind.Utc).AddTicks(5710),
                            ImageUrl = "https://example.com/images/women-clothing.jpg",
                            Name = "Women's Clothing"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 12, 24, 18, 25, 7, 413, DateTimeKind.Utc).AddTicks(5711),
                            ImageUrl = "https://example.com/images/children-clothing.jpg",
                            Name = "Children's Clothing"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2024, 12, 24, 18, 25, 7, 413, DateTimeKind.Utc).AddTicks(5713),
                            ImageUrl = "https://example.com/images/shoes.jpg",
                            Name = "Shoes"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2024, 12, 24, 18, 25, 7, 413, DateTimeKind.Utc).AddTicks(5714),
                            ImageUrl = "https://example.com/images/bags.jpg",
                            Name = "Bags"
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2024, 12, 24, 18, 25, 7, 413, DateTimeKind.Utc).AddTicks(5718),
                            ImageUrl = "https://example.com/images/accessories.jpg",
                            Name = "Accessories"
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2024, 12, 24, 18, 25, 7, 413, DateTimeKind.Utc).AddTicks(5719),
                            ImageUrl = "https://example.com/images/watches.jpg",
                            Name = "Watches"
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2024, 12, 24, 18, 25, 7, 413, DateTimeKind.Utc).AddTicks(5720),
                            ImageUrl = "https://example.com/images/sportswear.jpg",
                            Name = "Sportswear"
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2024, 12, 24, 18, 25, 7, 413, DateTimeKind.Utc).AddTicks(5721),
                            ImageUrl = "https://example.com/images/swimwear.jpg",
                            Name = "Swimwear"
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2024, 12, 24, 18, 25, 7, 413, DateTimeKind.Utc).AddTicks(5723),
                            ImageUrl = "https://example.com/images/formal-wear.jpg",
                            Name = "Formal Wear"
                        },
                        new
                        {
                            Id = 11,
                            CreatedAt = new DateTime(2024, 12, 24, 18, 25, 7, 413, DateTimeKind.Utc).AddTicks(5724),
                            ImageUrl = "https://example.com/images/casual-wear.jpg",
                            Name = "Casual Wear"
                        },
                        new
                        {
                            Id = 12,
                            CreatedAt = new DateTime(2024, 12, 24, 18, 25, 7, 413, DateTimeKind.Utc).AddTicks(5725),
                            ImageUrl = "https://example.com/images/t-shirts.jpg",
                            Name = "T-Shirts"
                        },
                        new
                        {
                            Id = 13,
                            CreatedAt = new DateTime(2024, 12, 24, 18, 25, 7, 413, DateTimeKind.Utc).AddTicks(5726),
                            ImageUrl = "https://example.com/images/jeans.jpg",
                            Name = "Jeans"
                        },
                        new
                        {
                            Id = 14,
                            CreatedAt = new DateTime(2024, 12, 24, 18, 25, 7, 413, DateTimeKind.Utc).AddTicks(5727),
                            ImageUrl = "https://example.com/images/jackets-coats.jpg",
                            Name = "Jackets & Coats"
                        },
                        new
                        {
                            Id = 15,
                            CreatedAt = new DateTime(2024, 12, 24, 18, 25, 7, 413, DateTimeKind.Utc).AddTicks(5728),
                            ImageUrl = "https://example.com/images/hats-caps.jpg",
                            Name = "Hats & Caps"
                        },
                        new
                        {
                            Id = 16,
                            CreatedAt = new DateTime(2024, 12, 24, 18, 25, 7, 413, DateTimeKind.Utc).AddTicks(5729),
                            ImageUrl = "https://example.com/images/scarves.jpg",
                            Name = "Scarves"
                        },
                        new
                        {
                            Id = 17,
                            CreatedAt = new DateTime(2024, 12, 24, 18, 25, 7, 413, DateTimeKind.Utc).AddTicks(5730),
                            ImageUrl = "https://example.com/images/sunglasses.jpg",
                            Name = "Sunglasses"
                        },
                        new
                        {
                            Id = 18,
                            CreatedAt = new DateTime(2024, 12, 24, 18, 25, 7, 413, DateTimeKind.Utc).AddTicks(5732),
                            ImageUrl = "https://example.com/images/belts.jpg",
                            Name = "Belts"
                        },
                        new
                        {
                            Id = 19,
                            CreatedAt = new DateTime(2024, 12, 24, 18, 25, 7, 413, DateTimeKind.Utc).AddTicks(5733),
                            ImageUrl = "https://example.com/images/undergarments.jpg",
                            Name = "Undergarments"
                        },
                        new
                        {
                            Id = 20,
                            CreatedAt = new DateTime(2024, 12, 24, 18, 25, 7, 413, DateTimeKind.Utc).AddTicks(5734),
                            ImageUrl = "https://example.com/images/sports-shoes.jpg",
                            Name = "Sports Shoes"
                        },
                        new
                        {
                            Id = 21,
                            CreatedAt = new DateTime(2024, 12, 24, 18, 25, 7, 413, DateTimeKind.Utc).AddTicks(5735),
                            ImageUrl = "https://example.com/images/boots.jpg",
                            Name = "Boots"
                        },
                        new
                        {
                            Id = 22,
                            CreatedAt = new DateTime(2024, 12, 24, 18, 25, 7, 413, DateTimeKind.Utc).AddTicks(5736),
                            ImageUrl = "https://example.com/images/high-heels.jpg",
                            Name = "High Heels"
                        },
                        new
                        {
                            Id = 23,
                            CreatedAt = new DateTime(2024, 12, 24, 18, 25, 7, 413, DateTimeKind.Utc).AddTicks(5737),
                            ImageUrl = "https://example.com/images/sneakers.jpg",
                            Name = "Sneakers"
                        },
                        new
                        {
                            Id = 24,
                            CreatedAt = new DateTime(2024, 12, 24, 18, 25, 7, 413, DateTimeKind.Utc).AddTicks(5738),
                            ImageUrl = "https://example.com/images/suits.jpg",
                            Name = "Suits"
                        },
                        new
                        {
                            Id = 25,
                            CreatedAt = new DateTime(2024, 12, 24, 18, 25, 7, 413, DateTimeKind.Utc).AddTicks(5739),
                            ImageUrl = "https://example.com/images/dresses.jpg",
                            Name = "Dresses"
                        },
                        new
                        {
                            Id = 26,
                            CreatedAt = new DateTime(2024, 12, 24, 18, 25, 7, 413, DateTimeKind.Utc).AddTicks(5740),
                            ImageUrl = "https://example.com/images/blouses.jpg",
                            Name = "Blouses"
                        },
                        new
                        {
                            Id = 27,
                            CreatedAt = new DateTime(2024, 12, 24, 18, 25, 7, 413, DateTimeKind.Utc).AddTicks(5741),
                            ImageUrl = "https://example.com/images/skirts.jpg",
                            Name = "Skirts"
                        },
                        new
                        {
                            Id = 28,
                            CreatedAt = new DateTime(2024, 12, 24, 18, 25, 7, 413, DateTimeKind.Utc).AddTicks(5742),
                            ImageUrl = "https://example.com/images/shorts.jpg",
                            Name = "Shorts"
                        },
                        new
                        {
                            Id = 29,
                            CreatedAt = new DateTime(2024, 12, 24, 18, 25, 7, 413, DateTimeKind.Utc).AddTicks(5743),
                            ImageUrl = "https://example.com/images/pajamas.jpg",
                            Name = "Pajamas"
                        },
                        new
                        {
                            Id = 30,
                            CreatedAt = new DateTime(2024, 12, 24, 18, 25, 7, 413, DateTimeKind.Utc).AddTicks(5744),
                            ImageUrl = "https://example.com/images/outerwear.jpg",
                            Name = "Outerwear"
                        },
                        new
                        {
                            Id = 31,
                            CreatedAt = new DateTime(2024, 12, 24, 18, 25, 7, 413, DateTimeKind.Utc).AddTicks(5745),
                            ImageUrl = "https://example.com/images/activewear.jpg",
                            Name = "Activewear"
                        },
                        new
                        {
                            Id = 32,
                            CreatedAt = new DateTime(2024, 12, 24, 18, 25, 7, 413, DateTimeKind.Utc).AddTicks(5746),
                            ImageUrl = "https://example.com/images/raincoats.jpg",
                            Name = "Raincoats"
                        },
                        new
                        {
                            Id = 33,
                            CreatedAt = new DateTime(2024, 12, 24, 18, 25, 7, 413, DateTimeKind.Utc).AddTicks(5747),
                            ImageUrl = "https://example.com/images/cardigans.jpg",
                            Name = "Cardigans"
                        },
                        new
                        {
                            Id = 34,
                            CreatedAt = new DateTime(2024, 12, 24, 18, 25, 7, 413, DateTimeKind.Utc).AddTicks(5818),
                            ImageUrl = "https://example.com/images/sweaters.jpg",
                            Name = "Sweaters"
                        },
                        new
                        {
                            Id = 35,
                            CreatedAt = new DateTime(2024, 12, 24, 18, 25, 7, 413, DateTimeKind.Utc).AddTicks(5820),
                            ImageUrl = "https://example.com/images/leggings.jpg",
                            Name = "Leggings"
                        },
                        new
                        {
                            Id = 36,
                            CreatedAt = new DateTime(2024, 12, 24, 18, 25, 7, 413, DateTimeKind.Utc).AddTicks(5821),
                            ImageUrl = "https://example.com/images/tracksuits.jpg",
                            Name = "Tracksuits"
                        },
                        new
                        {
                            Id = 37,
                            CreatedAt = new DateTime(2024, 12, 24, 18, 25, 7, 413, DateTimeKind.Utc).AddTicks(5822),
                            ImageUrl = "https://example.com/images/gloves.jpg",
                            Name = "Gloves"
                        },
                        new
                        {
                            Id = 38,
                            CreatedAt = new DateTime(2024, 12, 24, 18, 25, 7, 413, DateTimeKind.Utc).AddTicks(5823),
                            ImageUrl = "https://example.com/images/socks.jpg",
                            Name = "Socks"
                        },
                        new
                        {
                            Id = 39,
                            CreatedAt = new DateTime(2024, 12, 24, 18, 25, 7, 413, DateTimeKind.Utc).AddTicks(5824),
                            ImageUrl = "https://example.com/images/loungewear.jpg",
                            Name = "Loungewear"
                        },
                        new
                        {
                            Id = 40,
                            CreatedAt = new DateTime(2024, 12, 24, 18, 25, 7, 413, DateTimeKind.Utc).AddTicks(5825),
                            ImageUrl = "https://example.com/images/winter-wear.jpg",
                            Name = "Winter Wear"
                        });
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Coupon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CurrentUsages")
                        .HasColumnType("int");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("MaxUsages")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Coupons");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.CouponCondition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Attribute")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("CouponId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DiscountAmount")
                        .HasColumnType("int");

                    b.Property<string>("Operator")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Value")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CouponId");

                    b.ToTable("CouponConditions");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Favorite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Favorites");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Star")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.News", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("News");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.NewsDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("NewsId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("NewsId");

                    b.HasIndex("ProductId");

                    b.ToTable("NewsDetails");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CouponId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("SessionId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CouponId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.OrderDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CouponId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CouponId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BrandId")
                        .HasColumnType("int");

                    b.Property<int>("BuyTurn")
                        .HasColumnType("int");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("OldPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("Specification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.ProductImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductImages");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfilePictureUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            Address = "199 Kendrick Mill, Port Winonatown, Sweden",
                            ConcurrencyStamp = "411392e4-17eb-4b99-aa7c-17e47ce072c2",
                            CreatedAt = new DateTime(2024, 9, 12, 18, 25, 7, 763, DateTimeKind.Utc).AddTicks(1563),
                            Email = "Adah_Ledner79@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Adah",
                            LastName = "Ledner",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADAH_LEDNER79@GMAIL.COM",
                            NormalizedUserName = "ADAH21",
                            PasswordHash = "AQAAAAIAAYagAAAAELlt4nUskW1lVE9b7xkK9tAKsAiKVlVUAZPH0gvokJUn5xuOzB9ay5okx18g0jzchA==",
                            PhoneNumber = "718-301-3520",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/464.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Adah21"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            Address = "48651 Clinton Grove, North Armani, Liberia",
                            ConcurrencyStamp = "7bb72331-4aac-4f4f-ab50-471a4adea1e2",
                            CreatedAt = new DateTime(2024, 11, 21, 18, 25, 7, 764, DateTimeKind.Utc).AddTicks(6961),
                            Email = "Gay86@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Gay",
                            LastName = "Wisozk",
                            LockoutEnabled = false,
                            NormalizedEmail = "GAY86@YAHOO.COM",
                            NormalizedUserName = "GAY_WISOZK0",
                            PasswordHash = "AQAAAAIAAYagAAAAEKKB0T/+Em1revyqg9R4uzMIOzeVw2lGgtOOcOKE9PI95mHh9RrvT8DD4cQ9j9RADg==",
                            PhoneNumber = "932-865-8232",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/56.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Gay_Wisozk0"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            Address = "3636 Adolphus Flat, Miloside, Bosnia and Herzegovina",
                            ConcurrencyStamp = "c472c1f5-05b2-4304-8e93-9ebf6198ea8a",
                            CreatedAt = new DateTime(2024, 2, 3, 18, 25, 7, 764, DateTimeKind.Utc).AddTicks(7391),
                            Email = "Camila.Krajcik@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Camila",
                            LastName = "Krajcik",
                            LockoutEnabled = false,
                            NormalizedEmail = "CAMILA.KRAJCIK@GMAIL.COM",
                            NormalizedUserName = "CAMILA1",
                            PasswordHash = "AQAAAAIAAYagAAAAEN0csZKM7s5TTpnay0x/O7h6FCkdDe27ue1aX9WPUqsOaFwy3fIvfBJBGTeghScttQ==",
                            PhoneNumber = "127-560-9260",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/1101.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Camila1"
                        },
                        new
                        {
                            Id = 4,
                            AccessFailedCount = 0,
                            Address = "5896 Yadira Vista, Kilbackfort, Samoa",
                            ConcurrencyStamp = "dd5485fd-16b6-4fd1-825b-b4f0288fac05",
                            CreatedAt = new DateTime(2024, 10, 16, 18, 25, 7, 764, DateTimeKind.Utc).AddTicks(9190),
                            Email = "Georgette.Sporer@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Georgette",
                            LastName = "Sporer",
                            LockoutEnabled = false,
                            NormalizedEmail = "GEORGETTE.SPORER@GMAIL.COM",
                            NormalizedUserName = "GEORGETTE_SPORER27",
                            PasswordHash = "AQAAAAIAAYagAAAAEDoRTIzCW4PiJMhahnYjw9ruTcURI7YkbQV5ewoMnKLite5nS7I7mWA294waQCkRUQ==",
                            PhoneNumber = "933-997-5658",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/475.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Georgette_Sporer27"
                        },
                        new
                        {
                            Id = 5,
                            AccessFailedCount = 0,
                            Address = "5809 Kris Meadows, North Dorianfurt, Isle of Man",
                            ConcurrencyStamp = "0c5b1dbf-d9e3-452c-95ee-0c0d5908d533",
                            CreatedAt = new DateTime(2024, 9, 27, 18, 25, 7, 764, DateTimeKind.Utc).AddTicks(9631),
                            Email = "Haskell46@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Haskell",
                            LastName = "Halvorson",
                            LockoutEnabled = false,
                            NormalizedEmail = "HASKELL46@HOTMAIL.COM",
                            NormalizedUserName = "HASKELL72",
                            PasswordHash = "AQAAAAIAAYagAAAAEGhjlM0DuULa1g+Ty8grdHtU8H6TsK1Ek20rh6EBBiavq3FElswbjy3Li5zEFgP+jA==",
                            PhoneNumber = "272-388-4176",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/617.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Haskell72"
                        },
                        new
                        {
                            Id = 6,
                            AccessFailedCount = 0,
                            Address = "3950 Crist Landing, Othastad, Falkland Islands (Malvinas)",
                            ConcurrencyStamp = "cf213824-2a11-4e11-942e-3f9897a9ac05",
                            CreatedAt = new DateTime(2024, 4, 12, 18, 25, 7, 765, DateTimeKind.Utc).AddTicks(13),
                            Email = "Justice_Padberg46@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Justice",
                            LastName = "Padberg",
                            LockoutEnabled = false,
                            NormalizedEmail = "JUSTICE_PADBERG46@YAHOO.COM",
                            NormalizedUserName = "JUSTICE_PADBERG1",
                            PasswordHash = "AQAAAAIAAYagAAAAEHQhjN/gHAPxygXEnj/PuJ2xpzPkJBI4apq5+ndQFY7po1QomIxfH8mrhJi0WN8FVQ==",
                            PhoneNumber = "560-156-5335",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/453.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Justice_Padberg1"
                        },
                        new
                        {
                            Id = 7,
                            AccessFailedCount = 0,
                            Address = "763 Hunter Turnpike, Hickleton, Heard Island and McDonald Islands",
                            ConcurrencyStamp = "a0183207-3db4-42d5-8b18-dec14e00c6db",
                            CreatedAt = new DateTime(2024, 5, 12, 18, 25, 7, 765, DateTimeKind.Utc).AddTicks(428),
                            Email = "Lexie.Konopelski@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Lexie",
                            LastName = "Konopelski",
                            LockoutEnabled = false,
                            NormalizedEmail = "LEXIE.KONOPELSKI@GMAIL.COM",
                            NormalizedUserName = "LEXIE27",
                            PasswordHash = "AQAAAAIAAYagAAAAEOKlafF8HsVO9tMBoZbRovRGfNS0zJiBqEx+ubbvMcqN9zRgNSV6SANvBigA9tF3Wg==",
                            PhoneNumber = "991-668-6722",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/302.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Lexie27"
                        },
                        new
                        {
                            Id = 8,
                            AccessFailedCount = 0,
                            Address = "00865 Randi Parkway, Strackeburgh, Ecuador",
                            ConcurrencyStamp = "32dc467f-54b0-4f00-8ba4-10c71a93cc3a",
                            CreatedAt = new DateTime(2024, 11, 5, 18, 25, 7, 765, DateTimeKind.Utc).AddTicks(859),
                            Email = "Roy.Lindgren2@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Roy",
                            LastName = "Lindgren",
                            LockoutEnabled = false,
                            NormalizedEmail = "ROY.LINDGREN2@GMAIL.COM",
                            NormalizedUserName = "ROY59",
                            PasswordHash = "AQAAAAIAAYagAAAAEJztjgHPItTvyCCFdbYosjmInDXJ0R99gTrrW+b5wGZdhegS/skjiswXke7MMn8jTw==",
                            PhoneNumber = "254-821-9852",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/396.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Roy59"
                        },
                        new
                        {
                            Id = 9,
                            AccessFailedCount = 0,
                            Address = "265 Kunde Rest, Gloriafort, Malaysia",
                            ConcurrencyStamp = "dcc57c75-e4b6-4343-9f85-fc89a0ed6197",
                            CreatedAt = new DateTime(2024, 4, 5, 18, 25, 7, 765, DateTimeKind.Utc).AddTicks(1147),
                            Email = "Alvah86@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Alvah",
                            LastName = "Monahan",
                            LockoutEnabled = false,
                            NormalizedEmail = "ALVAH86@YAHOO.COM",
                            NormalizedUserName = "ALVAH27",
                            PasswordHash = "AQAAAAIAAYagAAAAEGuCnztfCJ3lXUfQ6FTQ9VBPOdhUmHxPOIF2jivzvBTw+f5fyRiAm9t8i4xIlT4keg==",
                            PhoneNumber = "073-815-8863",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/598.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Alvah27"
                        },
                        new
                        {
                            Id = 10,
                            AccessFailedCount = 0,
                            Address = "492 Murphy Isle, Millerhaven, Belarus",
                            ConcurrencyStamp = "666442f3-231c-448a-9444-7494e3b0095f",
                            CreatedAt = new DateTime(2024, 4, 6, 18, 25, 7, 765, DateTimeKind.Utc).AddTicks(1507),
                            Email = "Reggie.Kerluke20@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Reggie",
                            LastName = "Kerluke",
                            LockoutEnabled = false,
                            NormalizedEmail = "REGGIE.KERLUKE20@YAHOO.COM",
                            NormalizedUserName = "REGGIE_KERLUKE",
                            PasswordHash = "AQAAAAIAAYagAAAAEMLvDygc96R5zPeoM9ijOOCzUcso8frEzze5rBmcdEqGG5mSg0spYUc17oZhuWW5gw==",
                            PhoneNumber = "640-783-3798",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/307.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Reggie_Kerluke"
                        },
                        new
                        {
                            Id = 11,
                            AccessFailedCount = 0,
                            Address = "74644 Parisian Plain, Lake Justinamouth, Italy",
                            ConcurrencyStamp = "fb74d568-e44b-400c-aca0-86eba1cb5823",
                            CreatedAt = new DateTime(2024, 12, 7, 18, 25, 7, 765, DateTimeKind.Utc).AddTicks(1813),
                            Email = "Lexus61@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Lexus",
                            LastName = "Maggio",
                            LockoutEnabled = false,
                            NormalizedEmail = "LEXUS61@YAHOO.COM",
                            NormalizedUserName = "LEXUS_MAGGIO64",
                            PasswordHash = "AQAAAAIAAYagAAAAEPnWh90bqya2fwqO6i+5yfBP9e6LzPu2Shw0gcPSalCkKzbI8Qgz/BmxCF9aKatjvA==",
                            PhoneNumber = "378-587-1608",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/710.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Lexus_Maggio64"
                        },
                        new
                        {
                            Id = 12,
                            AccessFailedCount = 0,
                            Address = "8894 Rippin Avenue, New Blaiseburgh, Madagascar",
                            ConcurrencyStamp = "2e4ddfc0-4b62-4e57-93f8-7711e037ab60",
                            CreatedAt = new DateTime(2024, 3, 2, 18, 25, 7, 765, DateTimeKind.Utc).AddTicks(2152),
                            Email = "Rodger.Schiller@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Rodger",
                            LastName = "Schiller",
                            LockoutEnabled = false,
                            NormalizedEmail = "RODGER.SCHILLER@GMAIL.COM",
                            NormalizedUserName = "RODGER97",
                            PasswordHash = "AQAAAAIAAYagAAAAEKnbdnC4/P44/2+97w2Fvn3D3fNTP8ZFLNOAJG7EFvW+ZmJAr3GYz3DETIx7hyQ8bg==",
                            PhoneNumber = "059-027-5927",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/554.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Rodger97"
                        },
                        new
                        {
                            Id = 13,
                            AccessFailedCount = 0,
                            Address = "38401 Everardo Rest, Murazikburgh, Iran",
                            ConcurrencyStamp = "2db67b66-269f-40a7-a738-6b499c9bd7a8",
                            CreatedAt = new DateTime(2024, 3, 8, 18, 25, 7, 765, DateTimeKind.Utc).AddTicks(2506),
                            Email = "Justice.Williamson@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Justice",
                            LastName = "Williamson",
                            LockoutEnabled = false,
                            NormalizedEmail = "JUSTICE.WILLIAMSON@YAHOO.COM",
                            NormalizedUserName = "JUSTICE_WILLIAMSON11",
                            PasswordHash = "AQAAAAIAAYagAAAAEHEGWTOfUarOTIToG+lNBfLdFia8B5iZsbIKHN+8WkJVIYtyPhqqYDu8CKbOoUsORA==",
                            PhoneNumber = "842-013-0263",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/876.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Justice_Williamson11"
                        },
                        new
                        {
                            Id = 14,
                            AccessFailedCount = 0,
                            Address = "9418 Johathan Inlet, Lake Maegan, Ecuador",
                            ConcurrencyStamp = "4605a3e7-fe23-4d0d-93bf-5763e4ebab4f",
                            CreatedAt = new DateTime(2024, 8, 29, 18, 25, 7, 765, DateTimeKind.Utc).AddTicks(2818),
                            Email = "Anabelle.Kuhic69@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Anabelle",
                            LastName = "Kuhic",
                            LockoutEnabled = false,
                            NormalizedEmail = "ANABELLE.KUHIC69@HOTMAIL.COM",
                            NormalizedUserName = "ANABELLE_KUHIC",
                            PasswordHash = "AQAAAAIAAYagAAAAEOUBqWqvJCTyeDnisUH7syRhABePwf43A/rOmGAmxSNMFTi5TBWP4xd3YYQtAMEjcQ==",
                            PhoneNumber = "483-920-6040",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/844.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Anabelle_Kuhic"
                        },
                        new
                        {
                            Id = 15,
                            AccessFailedCount = 0,
                            Address = "78957 Smitham View, New Tad, Indonesia",
                            ConcurrencyStamp = "7e39f296-993b-404e-91a2-b0b46519bc05",
                            CreatedAt = new DateTime(2024, 7, 2, 18, 25, 7, 765, DateTimeKind.Utc).AddTicks(3116),
                            Email = "Lonie.Gibson72@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Lonie",
                            LastName = "Gibson",
                            LockoutEnabled = false,
                            NormalizedEmail = "LONIE.GIBSON72@GMAIL.COM",
                            NormalizedUserName = "LONIE.GIBSON",
                            PasswordHash = "AQAAAAIAAYagAAAAED+X66K7zoMU+YVG7vLQsMxdWkGzb8WYxmOhKM38oMXuW4jx3v53A/aF6wkgW2+7hg==",
                            PhoneNumber = "252-436-3768",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/822.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Lonie.Gibson"
                        },
                        new
                        {
                            Id = 16,
                            AccessFailedCount = 0,
                            Address = "8836 Walsh Point, Darrellhaven, Kenya",
                            ConcurrencyStamp = "b67a1284-e18f-4dc3-9f70-5b08aee43d31",
                            CreatedAt = new DateTime(2024, 9, 21, 18, 25, 7, 765, DateTimeKind.Utc).AddTicks(3441),
                            Email = "Kelsie_Wisoky@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Kelsie",
                            LastName = "Wisoky",
                            LockoutEnabled = false,
                            NormalizedEmail = "KELSIE_WISOKY@GMAIL.COM",
                            NormalizedUserName = "KELSIE2",
                            PasswordHash = "AQAAAAIAAYagAAAAEGdlreq7JCtD3B4XMs4fv+oTR67V+ceYba9vE56DsdjicrUSLW6lDF3e0y3itosgsg==",
                            PhoneNumber = "443-274-2528",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/309.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Kelsie2"
                        },
                        new
                        {
                            Id = 17,
                            AccessFailedCount = 0,
                            Address = "831 Merlin Circles, Arnoldobury, Bahamas",
                            ConcurrencyStamp = "2663e63a-be95-4278-bfb3-2ca2ceb17836",
                            CreatedAt = new DateTime(2024, 8, 28, 18, 25, 7, 765, DateTimeKind.Utc).AddTicks(3711),
                            Email = "Titus_King24@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Titus",
                            LastName = "King",
                            LockoutEnabled = false,
                            NormalizedEmail = "TITUS_KING24@YAHOO.COM",
                            NormalizedUserName = "TITUS_KING70",
                            PasswordHash = "AQAAAAIAAYagAAAAEHrH9Lm9E3+qM0LWdTGHsSM4xqdJ/guFBnGKMqdSVZe6roUgMGEFWfGlFXrX/hPURA==",
                            PhoneNumber = "365-038-1786",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/991.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Titus_King70"
                        },
                        new
                        {
                            Id = 18,
                            AccessFailedCount = 0,
                            Address = "85023 Rosella Harbors, Port Leola, Togo",
                            ConcurrencyStamp = "cc14cbc5-1b99-476e-b1b4-afdcc3cef2a8",
                            CreatedAt = new DateTime(2024, 7, 13, 18, 25, 7, 765, DateTimeKind.Utc).AddTicks(4050),
                            Email = "Rahsaan.Stiedemann3@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Rahsaan",
                            LastName = "Stiedemann",
                            LockoutEnabled = false,
                            NormalizedEmail = "RAHSAAN.STIEDEMANN3@HOTMAIL.COM",
                            NormalizedUserName = "RAHSAAN_STIEDEMANN59",
                            PasswordHash = "AQAAAAIAAYagAAAAECsXXzlN25UrszBHp0dPEvSmTGA6l9/OLOyDpdEH1Q9vVJauoVToXJo5YOJm6ySXPw==",
                            PhoneNumber = "499-709-4325",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/1236.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Rahsaan_Stiedemann59"
                        },
                        new
                        {
                            Id = 19,
                            AccessFailedCount = 0,
                            Address = "434 Roscoe Square, West Nayelimouth, Nepal",
                            ConcurrencyStamp = "dc5ed538-ad9a-469a-9f1c-d5afee98cf58",
                            CreatedAt = new DateTime(2024, 9, 4, 18, 25, 7, 765, DateTimeKind.Utc).AddTicks(4328),
                            Email = "Maud_Leuschke@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Maud",
                            LastName = "Leuschke",
                            LockoutEnabled = false,
                            NormalizedEmail = "MAUD_LEUSCHKE@HOTMAIL.COM",
                            NormalizedUserName = "MAUD97",
                            PasswordHash = "AQAAAAIAAYagAAAAEFkxmvEYdRvdG/R3UxMYocAsuGgPO2gMv6UfHNxzTRTmcL+80W4uolZqHrZigrtjGQ==",
                            PhoneNumber = "294-695-5296",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/378.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Maud97"
                        },
                        new
                        {
                            Id = 20,
                            AccessFailedCount = 0,
                            Address = "0456 Lilly Valley, Lake Liachester, Pakistan",
                            ConcurrencyStamp = "71330a17-3e85-4419-bd5c-56df84e14955",
                            CreatedAt = new DateTime(2024, 1, 11, 18, 25, 7, 765, DateTimeKind.Utc).AddTicks(4643),
                            Email = "Judge.Halvorson@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Judge",
                            LastName = "Halvorson",
                            LockoutEnabled = false,
                            NormalizedEmail = "JUDGE.HALVORSON@YAHOO.COM",
                            NormalizedUserName = "JUDGE_HALVORSON73",
                            PasswordHash = "AQAAAAIAAYagAAAAEFZS6LM2YgdZ0hIvuqKJfa4xsHIq7383SLAc7C9yEO1azjebCUDpBYpNdHK3gWFTrw==",
                            PhoneNumber = "171-655-9050",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/945.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Judge_Halvorson73"
                        },
                        new
                        {
                            Id = 21,
                            AccessFailedCount = 0,
                            Address = "267 Denis Place, Willstad, French Guiana",
                            ConcurrencyStamp = "1abf0f3e-a4d6-4e7e-a236-3297c9f818ad",
                            CreatedAt = new DateTime(2024, 9, 24, 18, 25, 7, 765, DateTimeKind.Utc).AddTicks(4912),
                            Email = "Brad_Erdman@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Brad",
                            LastName = "Erdman",
                            LockoutEnabled = false,
                            NormalizedEmail = "BRAD_ERDMAN@YAHOO.COM",
                            NormalizedUserName = "BRAD70",
                            PasswordHash = "AQAAAAIAAYagAAAAEJ1gtdThxqJPD5Q7gQEIh/djrIxCIugGOsCD8pBXAN6fnx4B9JZE6yNLcpTJAaUQTw==",
                            PhoneNumber = "446-093-1333",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/837.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Brad70"
                        },
                        new
                        {
                            Id = 22,
                            AccessFailedCount = 0,
                            Address = "30252 Gabrielle Flats, Lindfurt, Marshall Islands",
                            ConcurrencyStamp = "5c124651-bdf8-4337-9f0d-efd0e87d4569",
                            CreatedAt = new DateTime(2024, 6, 12, 18, 25, 7, 765, DateTimeKind.Utc).AddTicks(5242),
                            Email = "Joaquin.Schroeder@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Joaquin",
                            LastName = "Schroeder",
                            LockoutEnabled = false,
                            NormalizedEmail = "JOAQUIN.SCHROEDER@YAHOO.COM",
                            NormalizedUserName = "JOAQUIN_SCHROEDER46",
                            PasswordHash = "AQAAAAIAAYagAAAAEAkzpTQHcm32Q4dWABoTFubPh8xghU6DaDFtIGEPCwBSCTllm8M+lbs+2nJTfp+XBA==",
                            PhoneNumber = "303-334-1237",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/153.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Joaquin_Schroeder46"
                        },
                        new
                        {
                            Id = 23,
                            AccessFailedCount = 0,
                            Address = "11372 Toby Causeway, Noraburgh, Bosnia and Herzegovina",
                            ConcurrencyStamp = "22c4f582-d327-46ca-a345-329f1b51a079",
                            CreatedAt = new DateTime(2024, 12, 1, 18, 25, 7, 765, DateTimeKind.Utc).AddTicks(5513),
                            Email = "Roxane4@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Roxane",
                            LastName = "Feil",
                            LockoutEnabled = false,
                            NormalizedEmail = "ROXANE4@GMAIL.COM",
                            NormalizedUserName = "ROXANE.FEIL43",
                            PasswordHash = "AQAAAAIAAYagAAAAENTSVpLLBzZVpO31ip7LqjY8UxUTAORGuboRy0huFdRe0D66dcqUACrpQrp2siqHEw==",
                            PhoneNumber = "594-472-9056",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/945.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Roxane.Feil43"
                        },
                        new
                        {
                            Id = 24,
                            AccessFailedCount = 0,
                            Address = "658 Jody Landing, Dimitriland, Heard Island and McDonald Islands",
                            ConcurrencyStamp = "717dbb76-ee96-44dc-bf5d-8b86d7d13b13",
                            CreatedAt = new DateTime(2024, 6, 26, 18, 25, 7, 765, DateTimeKind.Utc).AddTicks(5825),
                            Email = "Arlo.Cartwright41@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Arlo",
                            LastName = "Cartwright",
                            LockoutEnabled = false,
                            NormalizedEmail = "ARLO.CARTWRIGHT41@HOTMAIL.COM",
                            NormalizedUserName = "ARLO57",
                            PasswordHash = "AQAAAAIAAYagAAAAEFjIV7mB2ZNT+yp2EQxNShvZy3y/IIqarM6r3INVCwLFas1XxgvpzFG4EEKjE+mPQw==",
                            PhoneNumber = "373-703-8618",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/444.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Arlo57"
                        },
                        new
                        {
                            Id = 25,
                            AccessFailedCount = 0,
                            Address = "01313 Calista Pines, East Chauncey, Ethiopia",
                            ConcurrencyStamp = "c5a4c353-607e-401f-9d83-af45d2083704",
                            CreatedAt = new DateTime(2024, 11, 29, 18, 25, 7, 765, DateTimeKind.Utc).AddTicks(6134),
                            Email = "Jaylan.Abbott@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Jaylan",
                            LastName = "Abbott",
                            LockoutEnabled = false,
                            NormalizedEmail = "JAYLAN.ABBOTT@YAHOO.COM",
                            NormalizedUserName = "JAYLAN.ABBOTT57",
                            PasswordHash = "AQAAAAIAAYagAAAAEMASXFy4pucMFQCG06L+knvdNKaEHJp5aUFK0t0SZiqzm9k/Q1OoYYQFOnDVqE7YuQ==",
                            PhoneNumber = "887-385-5954",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/1114.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Jaylan.Abbott57"
                        },
                        new
                        {
                            Id = 26,
                            AccessFailedCount = 0,
                            Address = "63954 Rosella Springs, Bretview, Cyprus",
                            ConcurrencyStamp = "9f73c6e2-0d52-4798-b173-a68d92d9ea77",
                            CreatedAt = new DateTime(2024, 1, 2, 18, 25, 7, 765, DateTimeKind.Utc).AddTicks(6465),
                            Email = "Baylee_Hermann12@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Baylee",
                            LastName = "Hermann",
                            LockoutEnabled = false,
                            NormalizedEmail = "BAYLEE_HERMANN12@GMAIL.COM",
                            NormalizedUserName = "BAYLEE.HERMANN93",
                            PasswordHash = "AQAAAAIAAYagAAAAELZLwdiLVqt2KrYXnSVcd+02dvQivrt4L3sbLxhRkdROVvVDG8xlvoWxGRIlk7r7ng==",
                            PhoneNumber = "159-655-1150",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/343.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Baylee.Hermann93"
                        },
                        new
                        {
                            Id = 27,
                            AccessFailedCount = 0,
                            Address = "63809 Jamil Burg, Lake Antonetteside, Suriname",
                            ConcurrencyStamp = "49f691e4-d3f9-4b26-b495-7a20001147d3",
                            CreatedAt = new DateTime(2024, 11, 19, 18, 25, 7, 765, DateTimeKind.Utc).AddTicks(6798),
                            Email = "Josianne_Dickens@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Josianne",
                            LastName = "Dickens",
                            LockoutEnabled = false,
                            NormalizedEmail = "JOSIANNE_DICKENS@GMAIL.COM",
                            NormalizedUserName = "JOSIANNE_DICKENS",
                            PasswordHash = "AQAAAAIAAYagAAAAEJvJJhl97aRTnBOsEfLFlir2hlQnmsfr99sXVMgx/oHThTflKNQGdY2GkZ902J5Bjg==",
                            PhoneNumber = "813-184-6820",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/295.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Josianne_Dickens"
                        },
                        new
                        {
                            Id = 28,
                            AccessFailedCount = 0,
                            Address = "5404 Greenholt Trafficway, Trompberg, Mali",
                            ConcurrencyStamp = "49899714-8220-4b01-9e49-6f3dd3c9ecbe",
                            CreatedAt = new DateTime(2024, 4, 24, 18, 25, 7, 765, DateTimeKind.Utc).AddTicks(7064),
                            Email = "Collin_Jast@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Collin",
                            LastName = "Jast",
                            LockoutEnabled = false,
                            NormalizedEmail = "COLLIN_JAST@GMAIL.COM",
                            NormalizedUserName = "COLLIN1",
                            PasswordHash = "AQAAAAIAAYagAAAAEMZ7tzuyKy2iI1wA37Po95MOGM/kwobC7MIWpFfq20/c85XhNVQ1p46OKGJrZJUnXQ==",
                            PhoneNumber = "384-379-6882",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/609.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Collin1"
                        },
                        new
                        {
                            Id = 29,
                            AccessFailedCount = 0,
                            Address = "299 Eunice Lane, Swiftton, Czech Republic",
                            ConcurrencyStamp = "5fa2ec59-fa8e-489f-ae0c-cd4cc999eedc",
                            CreatedAt = new DateTime(2024, 6, 8, 18, 25, 7, 765, DateTimeKind.Utc).AddTicks(7387),
                            Email = "Juwan_Mitchell@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Juwan",
                            LastName = "Mitchell",
                            LockoutEnabled = false,
                            NormalizedEmail = "JUWAN_MITCHELL@GMAIL.COM",
                            NormalizedUserName = "JUWAN79",
                            PasswordHash = "AQAAAAIAAYagAAAAEMrgtTYxeKiWOJ7r/TQX44wHBdiIdr4pGnXSHzOCeDm2WbJJPJyjUN+LJJOP2M68XA==",
                            PhoneNumber = "492-061-5971",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/522.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Juwan79"
                        },
                        new
                        {
                            Id = 30,
                            AccessFailedCount = 0,
                            Address = "58719 Lesch Bypass, Mitchellfurt, Bermuda",
                            ConcurrencyStamp = "5b07861d-33e5-4ef4-a75b-cd65b57ec542",
                            CreatedAt = new DateTime(2024, 2, 18, 18, 25, 7, 765, DateTimeKind.Utc).AddTicks(7703),
                            Email = "Aditya.Heidenreich97@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Aditya",
                            LastName = "Heidenreich",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADITYA.HEIDENREICH97@YAHOO.COM",
                            NormalizedUserName = "ADITYA_HEIDENREICH",
                            PasswordHash = "AQAAAAIAAYagAAAAEPLkpK3VjPxCNq46iJvEdrg2nqN3Wavsr870qiSSwgxYZLL3Ldz7o+M7/V0PSp/GQg==",
                            PhoneNumber = "657-919-9666",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/1042.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Aditya_Heidenreich"
                        },
                        new
                        {
                            Id = 31,
                            AccessFailedCount = 0,
                            Address = "1693 Schiller Forest, Arnulfofort, Pitcairn Islands",
                            ConcurrencyStamp = "a7608f1b-ca9d-4077-995f-5984f5b89ee2",
                            CreatedAt = new DateTime(2024, 2, 23, 18, 25, 7, 765, DateTimeKind.Utc).AddTicks(7986),
                            Email = "Brad.Goodwin95@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Brad",
                            LastName = "Goodwin",
                            LockoutEnabled = false,
                            NormalizedEmail = "BRAD.GOODWIN95@GMAIL.COM",
                            NormalizedUserName = "BRAD_GOODWIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEDnsQ4/zlkVj3CxEMEzZ+oYzzo6ymEUGtRnEdGHsAQ1A4hWFdQiQVQ69RTLspkuBhA==",
                            PhoneNumber = "692-404-3279",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/14.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Brad_Goodwin"
                        },
                        new
                        {
                            Id = 32,
                            AccessFailedCount = 0,
                            Address = "2236 Robert Drive, West Fredton, Guinea",
                            ConcurrencyStamp = "f73a9e59-c7c3-400e-bb83-5164e92f10d4",
                            CreatedAt = new DateTime(2024, 12, 5, 18, 25, 7, 765, DateTimeKind.Utc).AddTicks(8289),
                            Email = "Presley.Erdman@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Presley",
                            LastName = "Erdman",
                            LockoutEnabled = false,
                            NormalizedEmail = "PRESLEY.ERDMAN@YAHOO.COM",
                            NormalizedUserName = "PRESLEY.ERDMAN94",
                            PasswordHash = "AQAAAAIAAYagAAAAEEGDqBsq7j02Vep6AnylrZL77OzvTCITp+lE4CA+yk/XFM4bYVxHTbXnOY1rcmZGFA==",
                            PhoneNumber = "575-774-2862",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/1164.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Presley.Erdman94"
                        },
                        new
                        {
                            Id = 33,
                            AccessFailedCount = 0,
                            Address = "9889 Jesse Point, Travonhaven, Maldives",
                            ConcurrencyStamp = "4067a336-8b6d-40f2-ae53-abdd27c81b95",
                            CreatedAt = new DateTime(2024, 9, 14, 18, 25, 7, 765, DateTimeKind.Utc).AddTicks(8602),
                            Email = "Haylie_Beer14@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Haylie",
                            LastName = "Beer",
                            LockoutEnabled = false,
                            NormalizedEmail = "HAYLIE_BEER14@GMAIL.COM",
                            NormalizedUserName = "HAYLIE.BEER",
                            PasswordHash = "AQAAAAIAAYagAAAAEFwvlccuyjkMQtxO2VtZIUQnsdvoLau8VAcRxHm1MA4w09bkvg1G7WtPgXmZawiSXQ==",
                            PhoneNumber = "664-533-7353",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/585.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Haylie.Beer"
                        },
                        new
                        {
                            Id = 34,
                            AccessFailedCount = 0,
                            Address = "406 Ebert Drive, South Jamar, Switzerland",
                            ConcurrencyStamp = "a65bfe61-cc55-4087-bf2b-40bf27b06b21",
                            CreatedAt = new DateTime(2024, 11, 10, 18, 25, 7, 765, DateTimeKind.Utc).AddTicks(8873),
                            Email = "Laurence80@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Laurence",
                            LastName = "Jacobi",
                            LockoutEnabled = false,
                            NormalizedEmail = "LAURENCE80@HOTMAIL.COM",
                            NormalizedUserName = "LAURENCE.JACOBI",
                            PasswordHash = "AQAAAAIAAYagAAAAEL/RTY3bH+uSloMtC6EOj6Z0A+DpVUHGOux1TG4dLxc0/Yxcgb2pkKY2UewTQPCDAg==",
                            PhoneNumber = "948-853-3980",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/648.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Laurence.Jacobi"
                        },
                        new
                        {
                            Id = 35,
                            AccessFailedCount = 0,
                            Address = "747 Angela Causeway, North Eloisetown, Syrian Arab Republic",
                            ConcurrencyStamp = "010fea9e-e489-4f25-b42e-5f35cd180246",
                            CreatedAt = new DateTime(2024, 10, 25, 18, 25, 7, 765, DateTimeKind.Utc).AddTicks(9210),
                            Email = "Harvey_Gusikowski52@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Harvey",
                            LastName = "Gusikowski",
                            LockoutEnabled = false,
                            NormalizedEmail = "HARVEY_GUSIKOWSKI52@GMAIL.COM",
                            NormalizedUserName = "HARVEY99",
                            PasswordHash = "AQAAAAIAAYagAAAAEKSMQb2v4zoalbMsV5eTK+hjj6KF3AydVizKMIDeCyWSIpDgvfoGkMB3jH1Nt21rZA==",
                            PhoneNumber = "958-314-9947",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/961.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Harvey99"
                        },
                        new
                        {
                            Id = 36,
                            AccessFailedCount = 0,
                            Address = "750 Borer Point, East Nickolas, Netherlands",
                            ConcurrencyStamp = "937ea052-5add-4570-ae85-79425b4d3032",
                            CreatedAt = new DateTime(2024, 7, 3, 18, 25, 7, 765, DateTimeKind.Utc).AddTicks(9484),
                            Email = "Stewart.Ritchie@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Stewart",
                            LastName = "Ritchie",
                            LockoutEnabled = false,
                            NormalizedEmail = "STEWART.RITCHIE@GMAIL.COM",
                            NormalizedUserName = "STEWART.RITCHIE",
                            PasswordHash = "AQAAAAIAAYagAAAAEDRpJJRxJTiGQdqNS3ZgrFZYpXy6glH49oer49S9Pslx5CskpxAQDplKtXWf0mW3uw==",
                            PhoneNumber = "322-398-1607",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/122.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Stewart.Ritchie"
                        },
                        new
                        {
                            Id = 37,
                            AccessFailedCount = 0,
                            Address = "9323 Flatley Points, Scottieville, Western Sahara",
                            ConcurrencyStamp = "af5cf090-6217-4c65-8f8e-d7012e6e6801",
                            CreatedAt = new DateTime(2024, 6, 12, 18, 25, 7, 765, DateTimeKind.Utc).AddTicks(9794),
                            Email = "Anissa_Ullrich8@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Anissa",
                            LastName = "Ullrich",
                            LockoutEnabled = false,
                            NormalizedEmail = "ANISSA_ULLRICH8@HOTMAIL.COM",
                            NormalizedUserName = "ANISSA_ULLRICH",
                            PasswordHash = "AQAAAAIAAYagAAAAECXuoCqNBqSZwDeeFuV0XDjdAQ/ROBv7fDCn7GlDTrlPBkRNBLKTpYazDfnz2AlSlA==",
                            PhoneNumber = "195-163-2997",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/71.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Anissa_Ullrich"
                        },
                        new
                        {
                            Id = 38,
                            AccessFailedCount = 0,
                            Address = "0656 Roberts Crossroad, Wehnerfurt, Lao People's Democratic Republic",
                            ConcurrencyStamp = "049f610b-2cf7-428e-8ef3-5d2af1f75641",
                            CreatedAt = new DateTime(2024, 7, 30, 18, 25, 7, 766, DateTimeKind.Utc).AddTicks(80),
                            Email = "Micaela_Frami42@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Micaela",
                            LastName = "Frami",
                            LockoutEnabled = false,
                            NormalizedEmail = "MICAELA_FRAMI42@GMAIL.COM",
                            NormalizedUserName = "MICAELA40",
                            PasswordHash = "AQAAAAIAAYagAAAAEKULBHZ3x0+1OPXhi7gJvujMdRfuzuX+SppY/s0vBeP4/EO+A8PkIdCbe/L5dPCifQ==",
                            PhoneNumber = "896-243-9019",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/623.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Micaela40"
                        },
                        new
                        {
                            Id = 39,
                            AccessFailedCount = 0,
                            Address = "485 Flatley Centers, Terryside, Eritrea",
                            ConcurrencyStamp = "194e13b7-f02f-4fb7-ba46-a65e53a18148",
                            CreatedAt = new DateTime(2024, 2, 27, 18, 25, 7, 766, DateTimeKind.Utc).AddTicks(397),
                            Email = "Timmothy22@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Timmothy",
                            LastName = "Bernier",
                            LockoutEnabled = false,
                            NormalizedEmail = "TIMMOTHY22@YAHOO.COM",
                            NormalizedUserName = "TIMMOTHY15",
                            PasswordHash = "AQAAAAIAAYagAAAAECezKh6liwc2zpbHzpqjxZphsOn5+8bOOaI/WaWY5o8GsNLMzmzCV6cAFm3lA5TEgg==",
                            PhoneNumber = "924-039-8619",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/494.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Timmothy15"
                        },
                        new
                        {
                            Id = 40,
                            AccessFailedCount = 0,
                            Address = "457 Cruickshank Gardens, West Georgiana, Poland",
                            ConcurrencyStamp = "03d2cc17-8afd-4b5c-9fde-77fcd3be4fd2",
                            CreatedAt = new DateTime(2024, 12, 9, 18, 25, 7, 766, DateTimeKind.Utc).AddTicks(673),
                            Email = "Camryn49@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Camryn",
                            LastName = "Rosenbaum",
                            LockoutEnabled = false,
                            NormalizedEmail = "CAMRYN49@HOTMAIL.COM",
                            NormalizedUserName = "CAMRYN_ROSENBAUM",
                            PasswordHash = "AQAAAAIAAYagAAAAEAbODXNuZilYbFbTdjiYAs+jUHqH62bWeah+Gpz8oHCr1xUx/m2mDkvkX2hvNLgTog==",
                            PhoneNumber = "869-695-8119",
                            PhoneNumberConfirmed = true,
                            ProfilePictureUrl = "https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/463.jpg",
                            TwoFactorEnabled = false,
                            UserName = "Camryn_Rosenbaum"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Address", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.User", "User")
                        .WithMany("Addresses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.BannerDetail", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Banner", "Banner")
                        .WithMany("BannerDetails")
                        .HasForeignKey("BannerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManboShopAPI.Domain.Entities.Product", "Product")
                        .WithMany("BannerDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Banner");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Cart", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.CartItem", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Cart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManboShopAPI.Domain.Entities.Product", "Product")
                        .WithMany("CartItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.CouponCondition", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Coupon", "Coupon")
                        .WithMany("CouponConditions")
                        .HasForeignKey("CouponId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Coupon");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Favorite", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Product", "Product")
                        .WithMany("Favorites")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManboShopAPI.Domain.Entities.User", "User")
                        .WithMany("Favorites")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Feedback", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Product", "Product")
                        .WithMany("Feedbacks")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManboShopAPI.Domain.Entities.User", "User")
                        .WithMany("Feedbacks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.NewsDetail", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.News", "News")
                        .WithMany("NewsDetails")
                        .HasForeignKey("NewsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManboShopAPI.Domain.Entities.Product", "Product")
                        .WithMany("NewsDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("News");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Order", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Coupon", "Coupon")
                        .WithMany("Orders")
                        .HasForeignKey("CouponId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ManboShopAPI.Domain.Entities.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Coupon");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.OrderDetail", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Coupon", "Coupon")
                        .WithMany("OrderDetails")
                        .HasForeignKey("CouponId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ManboShopAPI.Domain.Entities.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManboShopAPI.Domain.Entities.Product", "Product")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Coupon");

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Product", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ManboShopAPI.Domain.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Brand");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.ProductImage", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.Product", "Product")
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManboShopAPI.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("ManboShopAPI.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Banner", b =>
                {
                    b.Navigation("BannerDetails");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Brand", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Cart", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Coupon", b =>
                {
                    b.Navigation("CouponConditions");

                    b.Navigation("OrderDetails");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.News", b =>
                {
                    b.Navigation("NewsDetails");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.Product", b =>
                {
                    b.Navigation("BannerDetails");

                    b.Navigation("CartItems");

                    b.Navigation("Favorites");

                    b.Navigation("Feedbacks");

                    b.Navigation("NewsDetails");

                    b.Navigation("OrderDetails");

                    b.Navigation("ProductImages");
                });

            modelBuilder.Entity("ManboShopAPI.Domain.Entities.User", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Favorites");

                    b.Navigation("Feedbacks");

                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
